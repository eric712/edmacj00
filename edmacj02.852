; edmacj02.852 draw lines
; edmacp01.852
; edmack.852
; edmack.850 change callback to add imed to esp
; this is the first line of this program
; this edmacj02.asm or edmacj02.852  text editor program
; is written by Eric Matteson. Permission is granted
; to copy this source code file edmacj02.852 and to publish
; it on the Internet and to use it at least for
; non-profit use.
; to assemble with nasm
; cp edmacj02.852 edmacj02.asm
; nasm -f bin -o edmacj02.dbg edmacj02.asm
; This program uses org more than once so
; nasm might not work at all.
; mv edmacj02.dbg edmacj02.exe
; dir -l edmacj02.*
; edmacj02.exe will be exactly 61440 bytes if it is
; assembled correctly.
; it is best to use casm3.c based assembler to
; assemble edmacj02.852 if it is available.
; wine edmacj02.exe
; to run this program on wine+linux
; Also tested on Windows 98 SE
; edmacj02.asm or edmacj02.852 assembler source code is next.
 section .bss
 org 02000h
hmanyargs resd 1
argsarea resb 512
nonscroll resd 1
keysdebugger resd 1
nzsaveskipod resd 1
leftdebugger resd 1
nznormalend resd 1
inserback resd 1
cmdheight resd 1
nzerror resd 1
keychar5 resd 1
tzrx resd 1
tzby resd 1
yyectr resd 1
xxjctr resd 1
lfdal resd 1
opendell resd 1
chchr40 resd 1
rcmdctr resd 1
howmanycmd resd 1
repceedag resd 1
keycmd5 resd 1
uprighty resd 1
lowlefty resd 1
lowleftb resd 1
lowleftc resd 1
curcommand resd 1
jxwidth resd 1
jyheight resd 1
jynext resd 1
jysrc resd 1
jydest resd 1
yjn resd 1
jydiff resd 1
jyctr resd 1
jxdiff resd 1
yre resd 1
xe resd 1
uprightx resd 1
lowleftx resd 1
bkgnd resd 1
cmdkeyxctr resd 1
chctr40 resd 1
uppercase resd 1
evdk resd 1
elevrd resd 1
dagraprvkey resd 1
dagranewkey resd 1
keyclineinit resd 1
; dib section
 resb 2
vardib resb 655422
te resd 1
dkey resd 1
le resd 1
r resd 1
revl resd 4
wmwindclass resd 24
tevl resd 4
wmwindmsg resd 16
rquesize resd 1
rquesave resd 1024
nzshift resd 1
cmd resd 1
tjctr resd 1
teepbase resd 1
; -
rep0 resd 1
one2 resd 1
fp04 resd 1
fl06 resd 1
eofi resd 1
eofdelay resd 1
a80w resd 1
hv0c resd 1
evrd resb 88
hiskrba resb 16
edhanb resd 2
pose resd 1
hiskwid resd 1
afilelen resd 1
largestln resd 1
keyctr resd 1
zeeconsole resd 1
dagrajmpnow resd 1
freddynext resd 1
dagraprvjmp resd 1
tprnctr resd 1
klinewid resd 1
editwithin resd 1
chkline resd 1
str96 resd 1
iojump resd 1
namzset resd 1
pitchin resd 1
filenamz resb 84
conrhan resd 2
conrham resd 2
conwhan resd 2
conwham resd 2
onecurwozx resd 1
onecurwozy resd 1
twocurwozx resd 1
twocurwozy resd 1
x resd 1
y resd 1
ypheight resd 1
prindiff resd 1
prinjill resd 1
prindiffprv resd 1
chzerv resd 1
chnext resd 1
chdoc resd 1
alsel resd 1
insel resd 1
marginselect resd 1
moualglobal resd 1
mouallocal resd 1
moux resd 1
mouy resd 1
insertype resd 1
inspg resd 1
evwr resb 2080
crz0160 resb 16384
sandoval resb 2092152
; xxxxxxxxxxxx
 section .code
 bits 32
 org 00000000h
 db "MZ"
 dw 0080h
 dw 0001h
 dw 0000h
 dw 0004h
 dw 0000h
 dw 0FFFFh
 dw 0FFF0h
 dw 7ff4h
 dw 0000h
 dw 0100h
 dw 0fff0h
 dd 0,0,0,0,0,0,0,0
 db 00h, 00h, 00h, 00h
 dd 00000080h
 db 0c7h,0c2h,010h,01h,0b4h,09h,0cdh,21h
 db 0c7h,0c0h,01h,04ch,0cdh,021h,00h,00h
 db "*** ERROR *** unable to load program"
 db 024h,00h,00h,00h
 dd 0,0
; begin 32-bit console header here at 0080
 db "PE"
 db 00h,00h
 db 04ch,01h
hmanysects db 03h,00h
 dd 00000000h
 dd 00000000h
 dd 00000000h
 dd 010600e0h
; xxxxxxxxxxxx 0098
 dd 3702010bh
hcodesize dd 0000D000h
hinitdsize dd 00001000h
hramsize dd 00800000h
lphfileIP dd 00001000h
lphramIP dd 00001000h
lphramCONST dd 0080E000h
iimagebase dd 00400000h
hsectalign dd 00001000h
hfilealign dd 00001000h
 dd 00000004h
 dd 00000000h
 dd 00000004h
 dd 00000000h
iimagesize dd 0080F000h
hddrsize dd 00001000h
checksum dd 00000000h
;    2 or 3 next
hwdllclwsub dd 00000002h
stackreserve dd 00100000h
stackcommit dd 00001000h
heapreserve dd 00100000h
heapcommit dd 00001000h
 dd 00000000h
 dd 00000010h
; xxxxxxxxxxxx 00f8h
;            address    size
hhjexport  dd 00000000h,00000000h
hhjimport  dd 0080E000h,0000054Bh
hhresource dd 00000000h,00000000h
 dd 00000000h,00000000h
 dd 00000000h,00000000h
 dd 00000000h,00000000h
 dd 00000000h,00000000h
 dd 00000000h,00000000h
 dd 00000000h,00000000h
 dd 00000000h,00000000h
 dd 00000000h,00000000h
 dd 00000000h,00000000h
 dd 00000000h,00000000h
 dd 00000000h,00000000h
 dd 00000000h,00000000h
 dd 00000000h,00000000h
; 0178h
 db ".text"
 db 00h,00h,00h
 dd 0000D000h
lpcoderam dd 00001000h
llcodesize dd 0000D000h
lpcodefill dd 00001000h
 dd 00000000h
 dd 00000000h
 dd 00000000h
codchrs dd 060000020h
; xxxxxxxxxxxx
 db ".bss"
 db 00h,00h,00h,00h
 dd 00800000h
 dd 0000E000h
 dd 00000000h
 dd 00000000h
 dd 00000000h
 dd 00000000h
 dd 00000000h
 dd 0C0000080h
; xxxxxxxxxxxx
 db ".data"
 db 00h,00h,00h
 dd 00001000h
 dd 0080E000h
 dd 00001000h
 dd 0000E000h
 dd 00000000h
 dd 00000000h
 dd 00000000h
 dd 0C0000040h
; xxxxxxxxxxxx
 dd 00000000h
 dd 00000000h
 dd 00000000h
 dd 00000000h
; 0200h
 dd 0,0,0,0,0,0,0,0
 db "xxxxxxxxyyyyyyyyxxxxxxxxyyyyyyyy"
 db "xxxxxxxxyyyyyyyyxxxxxxxxyyyyyyyy"
 db "xxxxxxxxyyyyyyyyxxxxxxxxyyyyyyyy"
 db "xxxxxxxxyyyyyyyyxxxxxxxxyyyyyyyy"
 db "xxxxxxxxyyyyyyyyxxxxxxxxyyyyyyyy"
 db "xxxxxxxxyyyyyyyyxxxxxxxxyyyyyyyy"
 db "xxxxxxxxyyyyyyyyxxxxxxxxyyyyyyyy"
 db "xxxxxxxxyyyyyyyyxxxxxxxxyyyyyyyy"
 db "xxxxxxxxyyyyyyyyxxxxxxxxyyyyyyyy"
 db "xxxxxxxxyyyyyyyyxxxxxxxxyyyyyyyy"
 db "xxxxxxxxyyyyyyyyxxxxxxxxyyyyyyyy"
 db "xxxxxxxxyyyyyyyyxxxxxxxxyyyyyyyy"
 db "xxxxxxxxyyyyyyyyxxxxxxxxyyyyyyyy"
 db "xxxxxxxxyyyyyyyyxxxxxxxxyyyyyyyy"
 db "xxxxxxxxyyyyyyyyxxxxxxxxyyyyyyyy"
; xxxxxxxxxxxx 0400
 db "xxxxxxxxyyyyyyyyxxxxxxxxyyyyyyyy"
 db "xxxxxxxxyyyyyyyyxxxxxxxxyyyyyyyy"
 db "xxxxxxxxyyyyyyyyxxxxxxxxyyyyyyyy"
 db "xxxxxxxxyyyyyyyyxxxxxxxxyyyyyyyy"
 db "xxxxxxxxyyyyyyyyxxxxxxxxyyyyyyyy"
 db "xxxxxxxxyyyyyyyyxxxxxxxxyyyyyyyy"
 db "xxxxxxxxyyyyyyyyxxxxxxxxyyyyyyyy"
 db "xxxxxxxxyyyyyyyyxxxxxxxxyyyyyyyy"
 db "xxxxxxxxyyyyyyyyxxxxxxxxyyyyyyyy"
 db "xxxxxxxxyyyyyyyyxxxxxxxxyyyyyyyy"
 db "xxxxxxxxyyyyyyyyxxxxxxxxyyyyyyyy"
 db "xxxxxxxxyyyyyyyyxxxxxxxxyyyyyyyy"
 db "xxxxxxxxyyyyyyyyxxxxxxxxyyyyyyyy"
 db "xxxxxxxxyyyyyyyyxxxxxxxxyyyyyyyy"
 db "xxxxxxxxyyyyyyyyxxxxxxxxyyyyyyyy"
 db "xxxxxxxxyyyyyyyyxxxxxxxxyyyyyyyy"
; xxxxxxxxxxxx 0600
 db "xxxxxxxxyyyyyyyyxxxxxxxxyyyyyyyy"
 db "xxxxxxxxyyyyyyyyxxxxxxxxyyyyyyyy"
 db "xxxxxxxxyyyyyyyyxxxxxxxxyyyyyyyy"
 db "xxxxxxxxyyyyyyyyxxxxxxxxyyyyyyyy"
 db "xxxxxxxxyyyyyyyyxxxxxxxxyyyyyyyy"
 db "xxxxxxxxyyyyyyyyxxxxxxxxyyyyyyyy"
 db "xxxxxxxxyyyyyyyyxxxxxxxxyyyyyyyy"
 db "xxxxxxxxyyyyyyyyxxxxxxxxyyyyyyyy"
 db "xxxxxxxxyyyyyyyyxxxxxxxxyyyyyyyy"
 db "xxxxxxxxyyyyyyyyxxxxxxxxyyyyyyyy"
 db "xxxxxxxxyyyyyyyyxxxxxxxxyyyyyyyy"
 db "xxxxxxxxyyyyyyyyxxxxxxxxyyyyyyyy"
 db "xxxxxxxxyyyyyyyyxxxxxxxxyyyyyyyy"
 db "xxxxxxxxyyyyyyyyxxxxxxxxyyyyyyyy"
 db "xxxxxxxxyyyyyyyyxxxxxxxxyyyyyyyy"
 db "xxxxxxxxyyyyyyyyxxxxxxxxyyyyyyyy"
; xxxxxxxxxxxx 0800
 db "xxxxxxxxyyyyyyyyxxxxxxxxyyyyyyyy"
 db "xxxxxxxxyyyyyyyyxxxxxxxxyyyyyyyy"
 db "xxxxxxxxyyyyyyyyxxxxxxxxyyyyyyyy"
 db "xxxxxxxxyyyyyyyyxxxxxxxxyyyyyyyy"
 db "xxxxxxxxyyyyyyyyxxxxxxxxyyyyyyyy"
 db "xxxxxxxxyyyyyyyyxxxxxxxxyyyyyyyy"
 db "xxxxxxxxyyyyyyyyxxxxxxxxyyyyyyyy"
 db "xxxxxxxxyyyyyyyyxxxxxxxxyyyyyyyy"
 db "xxxxxxxxyyyyyyyyxxxxxxxxyyyyyyyy"
 db "xxxxxxxxyyyyyyyyxxxxxxxxyyyyyyyy"
 db "xxxxxxxxyyyyyyyyxxxxxxxxyyyyyyyy"
 db "xxxxxxxxyyyyyyyyxxxxxxxxyyyyyyyy"
 db "xxxxxxxxyyyyyyyyxxxxxxxxyyyyyyyy"
 db "xxxxxxxxyyyyyyyyxxxxxxxxyyyyyyyy"
 db "xxxxxxxxyyyyyyyyxxxxxxxxyyyyyyyy"
 db "xxxxxxxxyyyyyyyyxxxxxxxxyyyyyyyy"
; xxxxxxxxxxxx 0a00
 db "xxxxxxxxyyyyyyyyxxxxxxxxyyyyyyyy"
 db "xxxxxxxxyyyyyyyyxxxxxxxxyyyyyyyy"
 db "xxxxxxxxyyyyyyyyxxxxxxxxyyyyyyyy"
 db "xxxxxxxxyyyyyyyyxxxxxxxxyyyyyyyy"
 db "xxxxxxxxyyyyyyyyxxxxxxxxyyyyyyyy"
 db "xxxxxxxxyyyyyyyyxxxxxxxxyyyyyyyy"
 db "xxxxxxxxyyyyyyyyxxxxxxxxyyyyyyyy"
 db "xxxxxxxxyyyyyyyyxxxxxxxxyyyyyyyy"
 db "xxxxxxxxyyyyyyyyxxxxxxxxyyyyyyyy"
 db "xxxxxxxxyyyyyyyyxxxxxxxxyyyyyyyy"
 db "xxxxxxxxyyyyyyyyxxxxxxxxyyyyyyyy"
 db "xxxxxxxxyyyyyyyyxxxxxxxxyyyyyyyy"
 db "xxxxxxxxyyyyyyyyxxxxxxxxyyyyyyyy"
 db "xxxxxxxxyyyyyyyyxxxxxxxxyyyyyyyy"
 db "xxxxxxxxyyyyyyyyxxxxxxxxyyyyyyyy"
 db "xxxxxxxxyyyyyyyyxxxxxxxxyyyyyyyy"
; xxxxxxxxxxxx 0c00
 db "xxxxxxxxyyyyyyyyxxxxxxxxyyyyyyyy"
 db "xxxxxxxxyyyyyyyyxxxxxxxxyyyyyyyy"
 db "xxxxxxxxyyyyyyyyxxxxxxxxyyyyyyyy"
 db "xxxxxxxxyyyyyyyyxxxxxxxxyyyyyyyy"
 db "xxxxxxxxyyyyyyyyxxxxxxxxyyyyyyyy"
 db "xxxxxxxxyyyyyyyyxxxxxxxxyyyyyyyy"
 db "xxxxxxxxyyyyyyyyxxxxxxxxyyyyyyyy"
 db "xxxxxxxxyyyyyyyyxxxxxxxxyyyyyyyy"
 db "xxxxxxxxyyyyyyyyxxxxxxxxyyyyyyyy"
 db "xxxxxxxxyyyyyyyyxxxxxxxxyyyyyyyy"
 db "xxxxxxxxyyyyyyyyxxxxxxxxyyyyyyyy"
 db "xxxxxxxxyyyyyyyyxxxxxxxxyyyyyyyy"
 db "xxxxxxxxyyyyyyyyxxxxxxxxyyyyyyyy"
 db "xxxxxxxxyyyyyyyyxxxxxxxxyyyyyyyy"
 db "xxxxxxxxyyyyyyyyxxxxxxxxyyyyyyyy"
 db "xxxxxxxxyyyyyyyyxxxxxxxxyyyyyyyy"
; xxxxxxxxxxxx 0e00
 db "xxxxxxxxyyyyyyyyxxxxxxxxyyyyyyyy"
 db "xxxxxxxxyyyyyyyyxxxxxxxxyyyyyyyy"
 db "xxxxxxxxyyyyyyyyxxxxxxxxyyyyyyyy"
 db "xxxxxxxxyyyyyyyyxxxxxxxxyyyyyyyy"
 db "xxxxxxxxyyyyyyyyxxxxxxxxyyyyyyyy"
 db "xxxxxxxxyyyyyyyyxxxxxxxxyyyyyyyy"
 db "xxxxxxxxyyyyyyyyxxxxxxxxyyyyyyyy"
 db "xxxxxxxxyyyyyyyyxxxxxxxxyyyyyyyy"
 db "xxxxxxxxyyyyyyyyxxxxxxxxyyyyyyyy"
 db "xxxxxxxxyyyyyyyyxxxxxxxxyyyyyyyy"
 db "xxxxxxxxyyyyyyyyxxxxxxxxyyyyyyyy"
 db "xxxxxxxxyyyyyyyyxxxxxxxxyyyyyyyy"
 db "xxxxxxxxyyyyyyyyxxxxxxxxyyyyyyyy"
 db "xxxxxxxxyyyyyyyyxxxxxxxxyyyyyyyy"
 db "xxxxxxxxyyyyyyyyxxxxxxxxyyyyyyyy"
 dd 0,0,0,0,0,0,0,0
; xxxxxxxxxxxx 1000
; begin 32-bit code here
firstcode: jmp rncmain125
 db 00h, 00h, 00h
; 0313
data0314 db "xxxxxxxx"
aandy db 07fh,0bfh,0dfh,0efh
        db 0f7h,0fbh,0fdh,0feh
chbackground  dd 0fc01fe00h
 db 03h,0f8h,07h,0f0h,0fh,0e0h
 db 1fh,0c0h,03fh,080h,07fh,00h
dotprevcur db 0ffh,07fh,0feh,0ffh
 db 0fdh,0ffh,0fbh,0ffh,0f7h,0ffh,0efh
 db 0ffh,0dfh,0ffh,0bfh,0ffh
; 11111111 01111111  11111110 11111111    11111101 11111111
; 11111011 11111111  11110111 11111111    11101111 11111111
; 11011111 11111111  10111111 11111111
 db 0ffh,0bfh,0ffh,07fh,0feh,0ffh
 db 0fdh,0ffh,0fbh,0ffh,0f7h
 db 0ffh,0efh,0ffh,0dfh,0ffh
; 11111111 10111111  11111111 01111111    11111110 11111111
; 11111101 11111111  11111011 11111111    11110111 11111111
; 11101111 11111111  11011111 11111111
 db 0ffh,0dfh,0ffh,0bfh,0ffh,07fh
 db 0feh,0ffh,0fdh,0ffh,0fbh
 db 0ffh,0f7h,0ffh,0efh,0ffh
; 11111111 11011111  11111111 10111111    11111111 01111111
; 11111110 11111111  11111101 11111111    11111011 11111111
; 11110111 11111111  11101111 11111111
 db 0ffh,0efh,0ffh,0dfh,0ffh,0bfh
 db 0ffh,07fh,0feh,0ffh,0fdh
 db 0ffh,0fbh,0ffh,0f7h,0ffh
; 11111111 11101111  11111111 11011111    11111111 10111111
; 11111111 01111111  11111110 11111111    11111101 11111111
; 11111011 11111111  11110111 11111111
 db 0ffh,0f7h,0ffh,0efh,0ffh,0dfh
 db 0ffh,0bfh,0ffh,07fh,0feh
 db 0ffh,0fdh,0ffh,0fbh,0ffh
; 11111111 11110111  11111111 11101111    11111111 11011111
; 11111111 10111111  11111111 01111111    11111110 11111111
; 11111101 11111111  11111011 11111111
 db 0ffh,0fbh,0ffh,0f7h,0ffh,0efh
 db 0ffh,0dfh,0ffh,0bfh,0ffh
 db 07fh,0feh,0ffh,0fdh,0ffh
; 11111111 11111011  11111111 11110111    11111111 11101111
; 11111111 11011111  11111111 10111111    11111111 01111111
; 11111110 11111111  11111101 11111111
 db 0ffh,0fdh,0ffh,0fbh,0ffh,0f7h
 db 0ffh,0efh,0ffh,0dfh,0ffh
 db 0bfh,0ffh,07fh,0feh,0ffh
; 11111111 11111101  11111111 11111011    11111111 11110111
; 11111111 11101111  11111111 11011111    11111111 10111111
; 11111111 01111111  11111110 11111111
prebh db 00h,00h
constbh db 42h,4dh
 dd 17558
 dd 0
consthdrsize dd 0000003eh
 dd 00000028h
biwidth dd 00000240h
biheight dd 0000010eh
 dd 00010001h
 dd 0
 dd 17496
 dd 00000ec4h
 dd 00000ec4h
 dd 0,0,00000000h
 dd 0000FFFFh
onefontdir dd 02020200h,02060204h
 dd 020a0208h,020e020ch
 dd 02120210h,02160214h,021a0218h,021e021ch
 dd 02220220h,02260224h,022a0228h,022e022ch
 dd 02320230h,02360234h,023a0238h,023e023ch
 dd 02420240h,02640253h,028a0275h,02b4029fh
 dd 02ca02bdh,02e402d7h,02f602edh,030402fbh
 dd 031e0309h,0340032bh,03620355h,03900377h
 dd 03b60399h,03d803cfh,03ee03e5h,040003f7h
 dd 04260411h,044c0437h,046e0459h,048c047fh
 dd 04ae04a1h,04c404bbh,04da04d1h,04f804ebh
 dd 051e050dh,0544052fh,05620559h,0580056fh
 dd 059a0591h,05b805abh,05ca05c5h,05e405d7h
 dd 05f205e9h,06180607h,06360625h,0658064bh
 dd 06760669h,068c067fh,06a20699h,06c006b3h
 dd 06ea06d9h,070806ffh,0726071dh,073c0733h
 dd 0756074dh,07740767h,078e0785h,07ac079fh
; xxxxxxxxxxxx
 dd 02020200h,02060204h,020a0208h,020e020ch
 dd 02120210h,02160214h,021a0218h,021e021ch
 dd 02220220h,02260224h,022a0228h,022e022ch
 dd 02320230h,02360234h,023a0238h,023e023ch
 dd 02020200h,02060204h,020a0208h,020e020ch
 dd 02120210h,02160214h,021a0218h,021e021ch
 dd 02220220h,02260224h,022a0228h,022e022ch
 dd 02320230h,02360234h,023a0238h,023e023ch
 dd 02020200h,02060204h,020a0208h,020e020ch
 dd 02120210h,02160214h,021a0218h,021e021ch
 dd 02220220h,02260224h,022a0228h,022e022ch
 dd 02320230h,02360234h,023a0238h,023e023ch
 dd 02020200h,02060204h,020a0208h,020e020ch
 dd 02120210h,02160214h,021a0218h,021e021ch
 dd 02220220h,02260224h,022a0228h,022e022ch
 dd 02320230h,02360234h,023a0238h,023e023ch
; top of font    5*7 letter on 7*9 box
;    xpos 1-5 within 0-6
;    ypos 1-7 within 0-8
;    x    y    size    drawtype
; drawtype    direction
;        1    right
;        2    down
;        3    upperleft lowerright
;        4    lowerleft upperright
twofontdll db "0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-"
 db "0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-"
;  32 blank  exclaimation  doublequotes poundsign
 db "0-2142314226212721-"
 db "2222422213214321-2162416213511551-"
;  36  dollarsign  percent
 db "11511122125317513162-16543122132153323731-"
;  38 ampersand  singlequote ( )
 db "13421451175151622334-13212422-132415231332-"
 db "313353323734-"
; 42 * + , - . /
 db "165412533252-14513252-35214522-"
 db "1441-35224522-1644-"
; 48 0 1 2
 db "12525252213127311654-"
 db  "316227311324-"
 db "52221522114124312731-"
; 51 3 4 5
 db "11411441174152225522-"
 db "114224315162-"
 db "22225522213124312731-"
; 54 6 7 8
 db "552212221522213124312731-"
 db "11511654-"
 db "2131243127315222552212221522-"
;    57 9 : ;
 db "213124312731522255221222-"
 db "33213521-222125213522-"
;    60  lessthan  equalsign  greaterthan  question
 db "14341433-13411541-17341143-"
 db "3431513211413432-"
;    64 at A
 db "33322433516211511162-"
 db "2131243111625162-"
;    66 B C D
 db "21332433243127311162-213127311252-"
 db "21335322273411621121-"
;    69 E F G
 db "2131243127311162-116221312431-"
 db "24331421273121311162-"
; 72 H I J K
 db "243151621162-213127313252-"
 db "17415162-243424331162-"
;    76 L M N
 db "27311162-3324113352521252-"
 db "233351621162-"
;    79 O P Q
 db "13344223543214322731-"
 db "2431113151421162-1151124215443333-"
;    82 R S T
 db "24311141514211621343-"
 db "21213731145154321142-11513252-"
;    85 U V W
 db "273151621162-3734143312225232-"
 db "1734342351621162-"
; 88 X Y Z [
 db "16541253-1132513223313432-"
 db "165411511751-113117311252-"
; 92 backslash ] upper  underline
; graveaccentbackwardssinglequote
 db "1253-313137315252-"
 db "312112214221-1751-21213221-"
; 97 a b c
 db "21312431273152521522-"
 db "2431273155221252-"
 db "243127311522-"
; 100 d e f
 db "1522243127315252-"
 db "21312431273152221252-"
 db "214124211252-"
; 103 g h i j
 db "1434133351622731-"
 db "243154321162-"
 db "23422121-273153423121-"
; 107 k l m n
 db "253424332252-22523621-"
 db "1341143234325432-134314325332-"
; 111 o p q
 db "142437341523323314225422-"
 db "4322232125211342-"
 db "11511451514211423342-"
; 114 r s t u
 db "23311432-12411232143127341741-"
 db "13513252-143254322731-"
; 115 v w x y
 db "37341433-1641133233325332-"
 db "16441343-2232423224313522-"
; 122 z  leftset  or  rightset
 db "174414312731-3131373114213162-"
 db "31323522-1131316234311731-"
;  126 sinewave
 db "122131234121-0-0-0-0-0-0-0-"
 db "0-0-0-0-0-0-0-0-0-0-0-0-0"
;    end of vector font
 db "."
wdkey000: dd 000000000h,000000000h
        dd 000002008h,000000d00h
 dd 000000000h,000000000h,01B000000h,000000000h
 dd 0CFD1C920h,0CDC8CBC7h,0000000D0h,000D3D200h
 dd 033323130h,037363534h,000003938h,000000000h
 dd 063626100h,067666564h,06B6A6968h,06F6E6D6Ch
 dd 073727170h,077767574h,0007A7978h,000000000h
 dd 033323130h,037363534h,02B2A3938h,02F2E2D00h
 dd 0BEBDBCBBh,0C2C1C0BFh,00000C4C3h,000000000h
 dd 000000000h,000000000h,000000000h,000000000h
 dd 000000000h,000000000h,000000000h,000000000h
 dd 000000000h,000000000h,000000000h,000000000h
 dd 000000000h,000000000h,03D3B0000h,02F2E2D2Ch
 dd 000000060h,000000000h,000000000h,000000000h
 dd 000000000h,000000000h,05B000000h,000275D5Ch
 dd 000000000h,000000000h,000000000h,000000000h
 dd 000000000h,000000000h,000000000h,000000000h
; xxxxxxxxxxxx
 dd 000000000h,000000000h,000000000h,00000A000h
 dd 000000000h,000000000h,000000000h,000000000h
 dd 000000020h,000000000h,000000000h,000000000h
 dd 023402129h,0265E2524h,00000282Ah,000000000h
 dd 043424100h,047464544h,04B4A4948h,04F4E4D4Ch
 dd 053525150h,057565554h,0005A5958h,000000000h
 dd 000000000h,000000000h,000000000h,000000000h
 dd 000000000h,000000000h,000000000h,000000000h
 dd 000000000h,000000000h,000000000h,000000000h
 dd 000000000h,000000000h,000000000h,000000000h
 dd 000000000h,000000000h,000000000h,000000000h
 dd 000000000h,000000000h,02B3A0000h,03F3E5F3Ch
 dd 00000007Eh,000000000h,000000000h,000000000h
 dd 000000000h,000000000h,07B000000h,000227D7Ch
 dd 000000000h,000000000h,000000000h,000000000h
 dd 000000000h,000000000h,000000000h,000000000h
; xxxxxxxxxxxx
 dd 000000000h,000000000h,000002008h,000000d00h
 dd 000000000h,000000000h,01B000000h,000000000h
 dd 0CFD1C920h,0CDC8CBC7h,0000000D0h,000D3D200h
 dd 033323130h,037363534h,000003938h,000000000h
 dd 003020100h,007060504h,00B0A0908h,00F0E0D0Ch
 dd 013121110h,017161514h,0001A1918h,000000000h
 dd 033323130h,037363534h,02B2A3938h,02F2E2D00h
 dd 0BEBDBCBBh,0C2C1C0BFh,00000C4C3h,000000000h
 dd 000000000h,000000000h,000000000h,000000000h
 dd 000000000h,000000000h,000000000h,000000000h
 dd 000000000h,000000000h,000000000h,000000000h
 dd 000000000h,000000000h,03D3B0000h,02F2E2D2Ch
 dd 000000060h,000000000h,000000000h,000000000h
 dd 000000000h,000000000h,05B000000h,000275D5Ch
 dd 000000000h,000000000h,000000000h,000000000h
 dd 000000000h,000000000h,000000000h,000000000h
; xxxxxxxxxxxx
amkeydown dd 874
amkeyup dd 875
ampaint dd 633
amdestroy dd 620
amcreate dd 619
fstab1864: dd 01,01,01,01
 dd 01,01,01,01
 dd 03,04,11,12
 dd 03,03,03,03
; fstab1864  8 1928    4 1960    2 1896    1 1880
chdelval dd 2050,2142,2142,2142
    dd 2054,2055,2156,2142
    dd 2158,2142,2142,2142
    dd 2142,2142,2142,2142
; insert litharg here 0555
litharg db "000576.."
 db "000000..000008..000016..000024.."
 db "000031..000038..000041..000043..000045.."
 db "000049..000053..000056..000061..000067..000072.."
 db "000078..000086..000088..000093.."
 db "000098..000102..000109..000114..000119..000126.."
 db "000129..000132..000136.."
 db "000141.."
;        000207 is 30th
 db "000207..000267..000327..000387..000447.."
 db "000507..000567..000627..000687..000747.."
 db "000807..000867..000927..000987..001047.."
 db "001107..001167..001227..001287..001347.."
 db "001407..001467.."
;        001608 is 53rd
 db "001527..001608..001648..001688.."
 db "001708..001748..001788..001818.."
 db "001878..001928..001982..002017..002047.."
 db "002115..002138.."
 db "002177..002215..002275.."
;        002177 is 67nth
 db "002344.."
 db "002424.."
; begin actual text at
;(last numbers line number + 1) * 8
; estimated starting offset is 576
 db "unknown command!insertb insert delete af m k tof b"
 db "ot up down input quit print!replace v open save n"
 db "ew change find list inputc uc l"
 db "c gui guiy!"
;    gui guiy is line 27
 db "[eddie4] ....   te"
 db "xt editor made             by Eric Matteson    !"
 db "a.sAve.as...u.Uppercase...j.not.used.....z.Zchangedoccheck.!"
 db "b.Bot............888888888888888888888888888888888888888888!"
 db "c.list.Commands..88888888......8888888.88.....8888.88888888!"
 db "d.set.bkgnD......88888888..88..88...88.88.....8888.88888888!"
 db "e.Exit...........88888888......88.8.88.8888.888888.8888..88!"
 db "f.set.upleFt.....88888888..88..88.8..8.8888.888888.88888888!"
 db "g.set.lowriGht...88888888..88..88.88...8888.888888.88888888!"
 db "h.rigHtmost......888888888888888888888888888888888888888888!"
 db "i.fInd...........888888888888888888888888888888888888888888!"
 db "l.Load...........88...88888......88......88......88.....888!"
 db "m.upleft.Move....88.8...888.888..88..88..88..88888888.88888!"
 db "n.New............88.888.888......88......88.....88888.88888!"
 db "o.Open...........88.8...888.8..8888..88..88..88888888.88888!"
 db "p.upleft.coPy....88...88888.88...88..88..88..88888888.88888!"
 db "q.Quit...........888888888888888888888888888888888888888888!"
 db "r.Return....x.Xmarginset....y.Ylinenumber...k.normalEND....!"
 db "t.Tof............8..EVEN.IF.THERE.IS.A.WAR.NOW.............!"
 db "v................8..VOTE.TO.ABOLISH.THE.US.MILITARY.DRAFT..!"
 db "w................8...AND.ITS..REGISTRATION...NOW...........!"
 db "....................Vote.for.an.all.volunteer.jury.system..!"
 db "line.21....................................................!"
 db "line.22...edmacj02.asm....of...........2017................!"
;    need next lines number 27.52
 db " HOME GETS MENU  ANTI-DRAFT EDMACK.ASM "
 db "  xxx yyyyyyy vv  lllllll  HOME GETS MENU!"
 db "Enter filename to be saved   by save as!"
 db "Enter filename to be saved   by exit  y!"
 db "Save file first y )!"
; save as 53    exit 54
;            55 exit save question
; 56 bkgnd    57 open
;    58 load    59 find
 db "enter   one  character  for  background!"
 db "Enter filename to be opened for reading!"
 db "Enter filename to  be  loaded!"
 db "Enter leftmost portion of li"
 db "ne to find except        blanks!"
 db "Enter   line  number  between  1  and  last  line!"
 db "Vote against the U.S. military draft ev"
 db "en in wartime.!"
 db "Enter line  to be  inserted before!"
 db "Enter  line  to  be  inserted!"
 db "input mode. Press enter twice in a ro"
 db "w (zero length line) when done!"
 db "is to be replaced with!"
 db "is zero length line correct ) (y or n)!"
 db "change leftmost portion except blanks!"
; 67    change
 db "press just enter to continu"
 db "e or        h enter to halt list!"
 db "inputc mode. Press enter twice in a r"
 db "ow (zero length line) when done!"
 db "nznormalend == 1. Press ESC to return to menu.    "
 db "10/20/2011!!!!................!!!!!!!!..........!!"
; end of litharg
qsense: db 080h,040h,020h,010h,008h,004h,002h,001h
jasonsname db "edmackJN"
 dd 0,0
scotsname db "edmackSN"
 dd 0,0,0,0,0,0
; int nampy(int nasl, int nasr)
; 1004 retad    1008 nasl    1012 nasr
; 992 esi        996 edi    1000 ebp
; 980 ecx        984 edx    988 ebx
nampy: push ebp
 mov ebp,esp
 sub ebp,1000
 push edi
 push esi
 push ebx
 push edx
 push ecx
 xor eax,eax
 xor edx,edx
 add edx,1000
 mov ebx,edx
 sub ebx,999
 mov esi,[ebp+1008]
 mov edi,[ebp+1012]
namlop: mov ecx,ebx
 and ecx,edi
 jz namzur
 add eax,esi
namzur: shr edi,1
 add esi,esi
 or edi,edi
 jz nambot
 add edx,ebx
 cmp edx,1032
 js namlop
nambot: pop ecx
 pop edx
 pop ebx
 pop esi
 pop edi
 pop ebp
 ret
; end of nampy
; int smposdiv(int posnu,int posde)
; 2004 retad    2008 posnu      2012 posde
; 1992 esi        1996 edi        2000 ebp
; 1980 ecx        1984 edx        1988 ebx
; 1968 cst32    1972 cst1        1976 frac
smposdiv: push ebp
 mov ebp,esp
 sub ebp,2000
 push edi
 push esi
 push ebx
 push edx
 push ecx
 xor eax,eax
 push eax
 push eax
 push eax
 xor esi,esi
 add esi,1000
 mov ecx,esi
 sub ecx,968
 sub esi,999
 mov [ebp+1972],esi
 mov [ebp+1968],ecx
 mov esi,[ebp+2008]
 xor ecx,ecx
 xor edi,edi
loopdivt: mov edx,[ebp+1976]
 clc
 adc [ebp+1976],edx
 clc
 adc esi,esi
 adc edi,edi
 mov edx,edi
 sub edx,[ebp+2012]
 jb loopdivz
 mov edi,edx
 mov ebx,[ebp+1972]
 add [ebp+1976],ebx
loopdivz: add ecx,[ebp+1972]
 cmp ecx,[ebp+1968]
 js loopdivt
 pop ecx
 pop edx
 pop eax
 pop ecx
 pop edx
 pop ebx
 pop esi
 pop edi
 pop ebp
 ret
; bottom of smposdiv
; int hdigval(char* hdf, int hds)
; 1004 retad    1008 *hdf    1012 hds
; 988 ebx    992 esi    996 edi    1000 ebp
; 972 0    976 eax    980 ecx    984 edx
; 956 4    960 3    964 2    968 1
; 940 8    944 7    948 6    952 5
; 924 12    928 11    932 10    936 9
; 908 16    912 15    916 14    920 13
; 892 20    896 19    900 18    904 17
; 876 24    880 23    884 22    888 21
; 860 28    864 27    868 26    872 25
; 844 32    848 31    852 30    856 29
; 828 36    832 35    836 34    840 33
; 812 40    816 39    820 38    824 37
; 796 44    800 43    804 42    808 41
; 780 48    784 47    788 46    792 45 -
; 764 52    768 51    772 50    776 49
; 748 56    752 55    756 54    760 53
; 732 60    736 59    740 58    744 57
; 716 64    720 63    724 62    728 61
; 700 68 D    704 67 C    708 66 B    712 65 A
; 684 72 H    688 71 G    692 70 F    696 69 E
; 668 76 L    672 75 K    676 74 J    680 73 I
; 652 80 P    656 79 O    660 78 N    664 77 M
; 636 84 T    640 83 S    644 82 R    648 81 Q
; 620 88 X    624 87 W    628 86 V    632 85 U
; 604 92    608 91    612 90 Z    616 89 Y
; 588 96    592 95    596 94        600
; 572 100 d    576 99 c    580 98 b    584 97 a
; 556 104 h    560 103 g    564 102 f    568 101 e
; 540 108 l    544 107 k    548 106 j    552 105 i
; 524 112 p    528 111 o    532 110 n    536 109 m
; 508 116 t    512 115 s    516 114 r    520 113 q
; 492 120 x    496 119 w    500 118 v    504 117 u
; 476 124    480 123    484 122 z  488 121 y
; 460 128    464 127    468 126    472 espfixer
hdigval: push ebp
 mov ebp,esp
 sub ebp,1000
 push edi
 push esi
 push ebx
 push edx
 push ecx
 push eax
 xor esi,esi
 add esi,1130
 mov ecx,esi
 mov edx,esi
 xor edi,edi
 sub ecx,1000
 sub edx,1129
 mov eax,ecx
 add eax,eax
 add eax,eax
hdigvu: push edi
 add edi,edx
 sub ecx,edx
 push edi
 add edi,edx
 sub ecx,edx
 jnz hdigvu
 mov [ebp+472],eax
 mov edi,[ebp+460]
 mov ebx,[ebp+1008]
 sub ebx,2048
 xor edx,edx
 mov esi,[ebp+1012]
 mov dl,[ebx+esi*1+2048]
 cmp edx,[ebp+972]
 js hlowfail
 cmp edx,[ebp+788]
 jns hlowfail
 mov edi,edx
hlowfail: mov ecx,[ebp+780]
 cmp edx,ecx
 js htenfail
 cmp edx,[ebp+740]
 jns htenfail
 mov edi,edx
 sub edi,ecx
htenfail: xor ecx,ecx
 add ecx,[ebp+752]
 cmp edx,[ebp+712]
 js huhexfail
 cmp edx,[ebp+620]
 jns huhexfail
 mov edi,edx
 sub edi,ecx
huhexfail: mov ecx,[ebp+624]
 cmp edx,[ebp+584]
 js hlhexfail
 cmp edx,[ebp+492]
 jns hlhexfail
 mov edi,edx
 sub edi,ecx
hlhexfail: mov [ebp+976],edi
 add esp,[ebp+472]
 pop eax
 pop ecx
 pop edx
 pop ebx
 pop esi
 pop edi
 pop ebp
 ret
; bottom of hdigval
; int rlnvalue(int subd0,char* rlvasewid,char* rlnline)
; 1004 retad    1008 subd0    1012 *rlvasewid    1016 *rlnline
; 988 ebx    992 esi     996 edi      1000 ebp
; 972 0    976 eax    980 ecx    984 edx
; 956 4    960 3    964 2    968 1
; 940 8    944 7    948 6    952 5
; 924 12    928 11    932 10    936 9
; 908 16    912 15    916 14    920 13
; 892 20    896 19    900 18    904 product
; 876 24    880 23    884 22    888
; 860 28    864 27    868 26    872
; 844 32    848 31    852 30    856 width
; 828 36    832 35    836 34    840 base-1
; 812 40    815 39    820 38    824 negind
; 796 44    800 43    804 42    808 espfix
; 780 48    784 47    788 46    792 45 -
rlnvalue: push ebp
 mov ebp,esp
 sub ebp,1000
 push edi
 push esi
 push ebx
 push edx
 push ecx
 push eax
 xor esi,esi
 add esi,1050
 mov edx,esi
 mov ecx,esi
 sub ecx,1000
 sub edx,1049
 mov eax,ecx
 add eax,eax
 add eax,eax
 xor edi,edi
rlnvalpu: push edi
 add edi,edx
 sub ecx,edx
 push edi
 add edi,edx
 sub ecx,edx
 jnz rlnvalpu
 mov [ebp+808],eax
 xor edx,edx
 mov [ebp+904],edx
 xor esi,esi
 mov [ebp+824],esi
 mov ecx,[ebp+928]
 mov edx,[ebp+936]
 xor edi,edi
 mov [ebp+840],edx
 mov [ebp+856],ecx
 mov ebx,[ebp+1012]
 cmp ebx,[ebp+972]
 jz rlnvawnull
rlnvawloop: push esi
 push ebx
 call hdigval
 add esp,[ebp+940]
 mov [ebp+edi*1+840],eax
 add edi,[ebp+908]
 add esi,[ebp+968]
 cmp esi,[ebp+964]
 js rlnvawloop
rlnvawnull: mov edi,[ebp+972]
 mov ebx,[ebp+1016]
rlnearly: mov esi,[ebp+972]
 add esi,edi
 add esi,[ebp+1008]
 cmp edi,[ebp+856]
 jns rlnrloop
 push esi
 push ebx
 call hdigval
 add esp,[ebp+940]
 cmp eax,[ebp+792]
 jnz rlnposone
 mov edx,[ebp+968]
 mov [ebp+824],edx
rlnposone: mov edx,[ebp+840]
 add edx,[ebp+968]
 cmp eax,edx
 js rlnrloop
 add edi,[ebp+968]
 xor edx,edx
 jz rlnearly
rlnrloop: mov esi,[ebp+972]
 add esi,edi
 add esi,[ebp+1008]
 cmp edi,[ebp+856]
 jns rlnrdone
 push esi
 push ebx
 call hdigval
 add esp,[ebp+940]
 mov edx,[ebp+840]
 add edx,[ebp+968]
 cmp eax,edx
 jns rlnrdone
 mov ecx,eax
 mov eax,[ebp+904]
 push edx
 push eax
 call nampy
 add esp,[ebp+940]
 add ecx,eax
 mov [ebp+904],ecx
 add edi,[ebp+968]
 xor edx,edx
 jz rlnrloop
rlnrdone: xor edi,edi
 mov esi,[ebp+904]
 xor edx,edx
 cmp edx,[ebp+824]
 jz rlnpostwo
 sub edi,esi
 mov [ebp+904],edi
rlnpostwo: mov edx,[ebp+904]
 mov [ebp+976],edx
 add esp,[ebp+808]
 pop eax
 pop ecx
 pop edx
 pop ebx
 pop esi
 pop edi
 pop ebp
 ret
; bottom of rlnvalue
; chnvalue(*chwv,subv,inchn,*bwv)
; 1020 *bwv    1016 inchn    1012 subv    1008 *chvw
; 1004 retad    1000 ebpsav    996 edisav    992 esisa
; 988 ebxsav    984 edxsav    980 ecxsav    976 eaxsav
; 960 3    964 2    968 1    972 0
; 944 7    948 6    952 5    956 4
; 928 11    932 10    936 9    940 8
; 912 15    916 14    920 13    924 12
; 896 19    900 fixesp    904 17    908 16
; 880        884 22    888 21    892 20
; 864 27    868 26    872 25    876 24
; 848 31    852 30    856 29    860 28
; 832 35    836 34    840 33    844 32
; 816 39    820        824 37    828 36
; 800        804 42    808 41    812 40
; 784 47    788 46    792 45    796 44
; 768 51    772 50    776 49    780 48
; 752 55    756 54    760 53    764 52
; 736 59    740 58    744 57    748 56
; 720        724 62    728 61    732
; 704 67 C    708 66 B    712 65 A    716
; 688 71 G    692 70 F    696 69 E    700 68 D
; 672 75    676 74    680 73    684
; 656 79    660 78    664 77    668 76
; 640 83    644 82    648 81    652 80
; 624 87    628 86    632 85    636 poschn
; 608 91    612 90 Z    616 89 Y    620
; 592 base-1    596 width    600    604
; 576 94 c    580 98 b    584 97 a    588
; 560 103 g    564 102 f    568 101 e    572 100 d
; 464 - 559 96 character buffer
chnvalue: push ebp
 mov ebp,esp
 sub ebp,1000
 push edi
 push esi
 push ebx
 push edx
 push ecx
 push eax
 xor esi,esi
 add esi,2128
 mov ecx,esi
 mov edx,esi
 sub ecx,2000
 sub edx,2127
 xor edi,edi
 mov eax,ecx
 add eax,eax
 add eax,eax
chnvalpu: push edi
 add edi,edx
 sub ecx,edx
 jnz chnvalpu
 mov [ebp+900],eax
 xor esi,esi
 mov ebx,[ebp+1020]
 cmp ebx,[ebp+972]
 jz wnullbwv
 sub ebx,2048
chnlbwv: xor edx,edx
 mov edi,esi
 mov dl,[ebx+esi*1+2048]
 mov ecx,[ebp+972]
 cmp edx,[ebp+780]
 js keepchnl
 mov ecx,[ebp+780]
 cmp edx,[ebp+712]
 js keepchnl
 mov ecx,[ebp+752]
 cmp edx,[ebp+584]
 js keepchnl
 mov ecx,[ebp+624]
keepchnl: sub edx,ecx
 mov [ebp+edi*4+592],edx
 add esi,[ebp+968]
 cmp esi,[ebp+964]
 js chnlbwv
 xor ecx,ecx
 jz chnwgot
wnullbwv: mov ecx,[ebp+912]
 mov edx,[ebp+940]
 mov [ebp+592],ecx
 mov [ebp+596],edx
 xor ecx,ecx
 jz chnwgot
chnwcrash: jmp chnvpop
chnwgot: mov ecx,[ebp+592]
 mov edx,[ebp+596]
 cmp ecx,[ebp+968]
 js chnwcrash
 cmp edx,[ebp+968]
 js chnwcrash
 cmp ecx,[ebp+844]
 jns chnwcrash
 cmp edx,[ebp+832]
 jns chnwcrash
 mov edi,[ebp+1016]
 mov esi,[ebp+972]
 sub esi,[ebp+968]
 mov edx,esi
 sub edx,edi
 cmp edi,[ebp+972]
 js chnawkneg
 mov edx,edi
chnawkneg: mov [ebp+636],edx
 mov edi,[ebp+596]
chnwdecloop: sub edi,[ebp+968]
 cmp edi,[ebp+972]
 js chnwdecbot
chnwdecvvop: mov edx,[ebp+592]
 add edx,[ebp+968]
 mov esi,[ebp+636]
 push edx
 push esi
 call smposdiv
 add esp,[ebp+940]
 mov [ebp+636],eax
 push eax
 push edx
 call nampy
 add esp,[ebp+940]
 sub esi,eax
 cmp esi,[ebp+972]
 jns chnremok
 add esi,edx
chnremok: mov eax,[ebp+592]
 sub eax,esi
 mov ecx,[ebp+1016]
 cmp ecx,[ebp+972]
 js chnbwkneg
 mov eax,esi
chnbwkneg: add eax,[ebp+780]
 cmp eax,[ebp+740]
 js chndhexw
 add eax,[ebp+944]
chndhexw: mov [ebp+edi*1+464],al
 jmp chnwdecloop
chnwdecbot: mov edx,[ebp+804]
 xor esi,esi
 mov ecx,[ebp+636]
chnforward: mov edi,esi
 add edi,[ebp+1008]
 sub edi,[ebp+968]
 add edi,[ebp+1012]
 sub edi,512
 cmp ecx,[ebp+972]
 jnz skipchnzw
 mov dl,[ebp+esi*1+464]
skipchnzw: mov [edi+512],dl
 add esi,[ebp+968]
 cmp esi,[ebp+596]
 js chnforward
chnvpop: mov esi,[ebp+900]
 add esp,esi
 pop eax
 pop ecx
 pop edx
 pop ebx
 pop esi
 pop edi
 pop ebp
 ret
; bottom of chnvalue
; int getretad()
getretad: push ebp
 mov ebp,esp
 sub ebp,300
 mov eax,[ebp+304]
 pop ebp
 ret
; int getreala(int ofthis)
; 362 ofthis  358 retad  354 ebpsave  350 esisave
getreala: push ebp
 push esi
 mov ebp,esp
 sub ebp,350
 xor eax,eax
 lea esi,[eax+getonea]
 call getretad
getonea: sub eax,esi
 add eax,[ebp+362]
 pop esi
 pop ebp
 ret
; bottom of getreala
; void riedline(struct lnes *rl)
; 1004 retad    1008 *rl
; 992 esi    996 edi    1000 ebpsave
; 980 ecx    984 edx    988 ebx
; 968        972        976 eax
; 956 ctra06    960 ctrd04    964
; 944 rund    948 bund    952 ctrzz
; 932 cst32    936 cst126    940
; 920 cst0    924 cst1    928 cst204
; 908 cst08    912 cst1a    916 cst13
; 896 cst04    900        904 cst0a
; 884        888        892
; 872    876        880 cpa80w
riedline: push ebp
 mov ebp,esp
 sub ebp,1000
 push edi
 push esi
 push ebx
 push edx
 push ecx
 push eax
 xor edi,edi
 xor ecx,ecx
 add ecx,2026
 sub ecx,2000
riedrlpu: push edi
 add ecx,1000
 sub ecx,1001
 jnz riedrlpu
 xor esi,esi
 add esi,1000
 mov ecx,esi
 sub ecx,999
 mov [ebp+924],ecx
 mov ecx,esi
 sub ecx,996
 mov [ebp+896],ecx
 mov ecx,esi
 sub ecx,990
 mov [ebp+904],ecx
 mov ecx,esi
 sub ecx,992
 mov [ebp+908],ecx
 mov ecx,esi
 sub ecx,974
 mov [ebp+912],ecx
 mov ecx,esi
 sub ecx,987
 mov [ebp+916],ecx
 mov ecx,esi
 sub ecx,796
 mov [ebp+928],ecx
 mov ecx,esi
 sub ecx,968
 mov [ebp+932],ecx
 mov ecx,esi
 sub ecx,874
 mov [ebp+936],ecx
 mov ebx,[ebp+1008]
 sub ebx,8192
 mov ecx,[ebx+a80w]
 mov [ebp+880],ecx
 xor esi,esi
 mov [ebp+960],esi
 mov [ebp+956],esi
 mov [ebp+952],esi
reedloop01: mov edx,[ebp+956]
 cmp edx,[ebp+880]
 js chkrep
 xor esi,esi
 jz afterloop01
chkrep: xor esi,esi
 cmp esi,[ebx+rep0]
 jnz crepeat
 mov esi,[ebp+1008]
 push esi
 call riadone
 add esp,[ebp+896]
crepeat: mov ecx,[ebx+one2]
 mov [ebp+948],ecx
 xor esi,esi
 mov [ebx+rep0],esi
 jz cmpxc
afterloop01: xor esi,esi
 jz afterloop02
reedloop02: xor esi,esi
 jz reedloop01
cmpxc: mov ecx,[ebp+948]
 mov [ebp+944],ecx
 cmp ecx,[ebp+928]
 jz cmpxa1
 cmp ecx,[ebp+932]
 jns yreedu
 mov edx,[ebp+932]
 mov [ebp+944],edx
 cmp ecx,[ebp+916]
 jz cmpxd1
 cmp ecx,[ebp+920]
 jz cmpxd1
 cmp ecx,[ebp+904]
 jz cmpxa1
 cmp ecx,[ebp+912]
 jz cmpxa1
 mov esi,[ebp+956]
 mov edx,[ebp+944]
 mov [ebx+esi*1+evrd],dl
 add esi,[ebp+924]
 mov [ebp+956],esi
xreedj1: xor esi,esi
 jz reedloop02
afterloop02: xor esi,esi
 jz afterloop03
cmpxa1: xor esi,esi
 jz cmpxa2
cmpxd1: xor esi,esi
 jz cmpxd2
yreedu: mov edx,[ebp+944]
 mov esi,[ebp+956]
 mov [ebx+esi*1+evrd],dl
 add esi,[ebp+924]
 mov [ebp+956],esi
 xor esi,esi
 jz xreedj1
cmpxd2: xor esi,esi
 jz afterlined
cmpxa2: xor esi,esi
 jz afterlinea
afterloop03: xor esi,esi
 jz afterloop04
reedloop04: xor esi,esi
 jz xreedj1
afterlined: xor esi,esi
 jz afterlinea
aftquit01: xor esi,esi
 jz blanright1
afterlinea: mov edx,[ebp+948]
 cmp edx,[ebp+904]
 jz aftquit01
 cmp edx,[ebp+912]
 jz aftquit01
 cmp edx,[ebp+928]
 jz aftquit01
 xor esi,esi
 jz dseek
afterminea: xor esi,esi
 jz afterlinea
afterloop04: xor esi,esi
 jz afterloop05
reedloop05: xor esi,esi
 jz reedloop04
aftquit02: xor esi,esi
 jz aftquit01
blanright1: xor esi,esi
 jz blanright2
dseek: mov edx,[ebp+948]
 cmp edx,[ebp+916]
 jz dloopp
 cmp edx,[ebp+920]
 jz dloopp
 mov ecx,[ebp+896]
 mov [ebx+rep0],ecx
 xor esi,esi
 jz aftquit02
dloopp: xor esi,esi
 cmp esi,[ebx+eofi]
 jz dloop
aftquit03: xor esi,esi
 jz aftquit02
afterloop05: xor esi,esi
 jz afterloop06
reedloop06: xor esi,esi
 jz reedloop05
blanright2: xor esi,esi
 jz blanright3
aftermineb: xor esi,esi
 jz afterminea
dloop: mov edx,[ebp+1008]
 push edx
 call riadone
 add esp,[ebp+896]
 mov edx,[ebx+one2]
 mov [ebp+948],edx
xtafterlinea: mov edx,[ebp+960]
 add edx,[ebp+924]
 mov [ebp+960],edx
 cmp edx,[ebp+896]
 js atafterlinea
 mov edx,[ebp+948]
 cmp edx,[ebp+920]
 jz reefixdz
 cmp edx,[ebp+916]
 jz reefixdz
 xor esi,esi
 jz atafterlinea
reefixdz: xor esi,esi
 jz aftquit03
afterloop06: xor esi,esi
 jz afterloop07
reedloop07: xor esi,esi
 jz reedloop06
blanright3: xor esi,esi
 jz blanright4
atafterlinea: xor esi,esi
 jz aftermineb
blanright4: mov edx,[ebp+956]
 mov [ebp+952],edx
blanlop: mov ecx,[ebp+956]
 cmp ecx,[ebp+880]
 jns rpopline
 mov edi,[ebp+956]
 mov edx,[ebp+932]
 mov [ebx+edi*1+evrd],dl
 add edi,[ebp+924]
 mov [ebp+956],edi
 xor esi,esi
 jz blanlop
aftquit05: xor esi,esi
 jz reefixdz
afterloop07: xor esi,esi
 jz afterloop08
reedloop08: xor esi,esi
 jz reedloop07
ttafterlinea: xor esi,esi
 jz atafterlinea
rpopline: mov edx,[ebx+rep0]
 mov [ebp+944],edx
 xor esi,esi
 jz reedret
afterloop08: xor esi,esi
 cmp esi,[ebx+eofi]
 jz alproca
aftquit06: xor esi,esi
 jz aftquit05
alproca: xor esi,esi
 jz alprocb
alprocb: mov edx,[ebp+1008]
 push edx
 call riadone
 add esp,[ebp+896]
 mov edx,[ebx+one2]
 mov [ebp+948],edx
 xor esi,esi
 cmp esi,[ebx+eofi]
 jz rtafterlinea
 xor edx,edx
 add edx,1008
 sub edx,1000
 mov [ebp+952],edx
rtafterlinea: xor esi,esi
 jz ttafterlinea
reedret: xor edx,edx
 add edx,2104
 sub edx,2000
 add esp,edx
 pop eax
 pop ecx
 pop edx
 pop ebx
 pop esi
 pop edi
 pop ebp
 ret
; end of riadline
; void riadone.triadone(struct lnes *ro)
; 1000 ebpsave    1004 retad    1008 *ro
; 988 ebx    992 esi    996 edi
; 976 eax    980 ecx    984 edx
; 964 cst20    968    972
; 952 rdhd    956 cst1    960 cst0
; 940 rdha    944 rdhb    948 diskreclen
; 928 honeb    932 cst32    936 cst16
; 916 cphiskwid    920 han20    924 riskrba
; 904 rjunk    908    912
; 892        896    900
riadone: push ebp
 mov ebp,esp
 sub ebp,1000
 push edi
 push esi
 push ebx
 push edx
 push ecx
 push eax
 xor edx,edx
 xor ecx,ecx
 add ecx,3000
 sub ecx,2979
riadabpu: push edx
 add ecx,1000
 sub ecx,1001
 jnz riadabpu
 xor esi,esi
 add esi,1000
 mov ecx,esi
 sub ecx,999
 mov [ebp+956],ecx
 mov ecx,esi
 sub ecx,968
 mov [ebp+932],ecx
 mov ebx,[ebp+1008]
 sub ebx,8192
 mov edi,[ebx+hiskwid]
 mov [ebp+916],edi
 mov ecx,esi
 sub ecx,984
 mov [ebp+936],ecx
 mov ecx,esi
 sub ecx,980
 mov [ebp+964],ecx
 mov ecx,[ebp+956]
 mov [ebp+940],ecx
 mov [ebp+944],ecx
roteof2: mov edi,[ebx+fp04]
 cmp edi,[ebx+fl06]
 js rnoteof
 mov ecx,[ebp+956]
 mov [ebx+eofi],ecx
 mov ecx,[ebp+932]
 mov [ebp+928],ecx
 xor esi,esi
 jz yrnoteol
yreof: mov edi,[ebp+956]
 mov [ebx+eofi],edi
yrnoteof: mov esi,[ebx+pose]
 xor edx,edx
 mov dl,[ebx+esi*1+hiskrba]
 mov [ebp+928],edx
 mov esi,[ebp+956]
 add [ebx+pose],esi
yrnoteol: mov edi,[ebp+928]
 mov [ebx+one2],edi
 xor esi,esi
 jz bbrlnc
breof: xor esi,esi
 jz yreof
brnoteof: xor esi,esi
 jz yrnoteof
rnoteof: mov edi,[ebp+916]
 mov [ebp+948],edi
 mov ecx,[ebx+fl06]
 sub ecx,[ebx+fp04]
 mov [ebp+952],ecx
 cmp ecx,[ebx+hiskwid]
 jg bigleftnoteof
 mov edi,[ebp+952]
 mov [ebp+948],edi
bigleftnoteof: mov ecx,[ebx+pose]
 cmp ecx,[ebx+hiskwid]
 js xlowbnc
 mov edi,[ebp+960]
 mov [ebx+pose],edi
 xor esi,esi
 jz noteof2
bbrlnc: xor esi,esi
 jz ylowbrlnc
crnoteof: xor esi,esi
 jz brnoteof
creof: xor esi,esi
 jz breof
xlowbnc: xor esi,esi
 jz xbnc
ylowbrlnc: xor esi,esi
 jz ylastbrlnc
noteof2: mov ecx,[ebp+948]
 mov [ebp+940],ecx
 lea edi,[ebx+hiskrba]
 mov [ebp+924],edi
 mov ecx,[ebx+edhanb]
 mov [ebp+920],ecx
 lea esi,[ebp+904]
 xor eax,eax
 jz prepread149
upcrnoteof: xor esi,esi
 jz crnoteof
upcreof: xor esi,esi
 jz creof
ylastbrlnc: xor edx,edx
 jz ybrlnc
prepread149: mov edx,[ebp+940]
 push eax
 push esi
 push edx
 push edi
 push ecx
 xor eax,eax
 push eax
 call getreala
 xor ecx,ecx
 add ecx,1304
 sub ecx,1300
 add esp,ecx
 mov esi,eax
 lea edi,[esi+wiored03]
 mov edx,[edi+00800000h]
 lea ecx,[esi+afteroread]
 push ecx
 push edx
 ret
afteroread: xor edi,edi
xbnc: mov edi,[ebx+fp04]
 add edi,[ebp+956]
 mov [ebx+fp04],edi
ylnc: mov ecx,[ebx+fp04]
 cmp ecx,[ebx+fl06]
 js upcrnoteof
yxrlnc: xor esi,esi
 jz upcreof
ybrlnc: xor edx,edx
 add edx,3084
 sub edx,3000
 add esp,edx
 pop eax
 pop ecx
 pop edx
 pop ebx
 pop esi
 pop edi
 pop ebp
 ret
; end of riadone 1705
; int wdoskey(int rawkey,int nzzshift)
; 1004 retad    1008 rawkey    1012 nzzshift
; 992 esi        996 edi       1000 ebpsave
; 980 ecx        984 edx        988 ebx
; 968 1        972 0        976 result
; 956 4        960 3        964 2
; 944 7        948 cst255    952 cst127
; 932 10        936 tableloc    940 8
wdoskey: push ebp
 mov ebp,esp
 sub ebp,1000
 push edi
 push esi
 push ebx
 push edx
 push ecx
 xor eax,eax
 push eax
 xor edx,edx
 add edx,1001
 mov ecx,edx
 sub edx,1000
 sub ecx,990
wdoskepu: push eax
 add eax,edx
 sub ecx,edx
 jnz wdoskepu
 xor edi,edi
 add edi,1255
 mov ecx,edi
 sub ecx,1000
 mov [ebp+948],ecx
 mov ecx,edi
 sub ecx,1128
 mov [ebp+952],ecx
 xor edx,edx
 push edx
 call getreala
 add esp,[ebp+956]
 mov esi,eax
 lea edx,[esi+wdkey000]
 mov [ebp+936],edx
 xor ebx,ebx
 mov ecx,[ebp+960]
 and ecx,[ebp+1012]
 jz wdoskeb
 add ebx,[ebp+968]
 add ebx,[ebp+948]
; 256 = 968 + 948
 mov ecx,[ebp+964]
 and ecx,[ebp+1012]
 jz wdoskeb
 add ebx,ebx
wdoskeb: add ebx,[ebp+936]
 sub ebx,1000
 mov esi,[ebp+1008]
 and esi,[ebp+948]
 xor edx,edx
 mov dl,[ebx+esi*1+1000]
 and edx,[ebp+952]
 mov [ebp+976],edx
; 2+7+6+6+2+2+2+6+6+6
 xor eax,eax
 mov al,[ebx+esi*1+1000]
 mov edx,[ebp+968]
 add edx,[ebp+952]
; 128 = 968 + 952
 and edx,eax
 jz wdosyorm
 xor edx,edx
 add edx,3024
 sub edx,2000
 add [ebp+976],edx
wdosyorm: xor ecx,ecx
 add ecx,1044
 sub ecx,1000
 add esp,ecx
 pop eax
 pop ecx
 pop edx
 pop ebx
 pop esi
 pop edi
 pop ebp
 ret
; bottom of wdoskey
; void amackpixel(lnes* ampx3,int x2,int y1)
; 1008 *ampx3    1012 x2     1016 y1
; 976 eax    980 ecx    984 edx    988 ebx
; 960 3    964 2    968 1    972 0
; 944 7    948 6    952 5    956 4
; 928 11    932 10    936 9    940 8
; 912 15    916 14    920 13    924 12
; 896 19    900 18    904 17    908 16
; 880 23    884 22    888 21    892 pokevalue
; 864 27    868 26    872 25    876 24
; 848 31    852 30    856 29    860 pokebase
; 832 35    836 34    840 33    844 32
; 816 39    820 38    824 37    828 biwidtha
; 800 43    804 42    808 41    812 40
; 784 47    788 46    792 45    796 biheighta
; 768 51    772 50    776 49    780 48
; 752 55    756 54    760 53    764 andyad
; 736 59    740 58    744 57    748 56
; 720 63    724 62    728 61    732 fixesp
amackpixel: push ebp
 mov ebp,esp
 sub ebp,1000
 push edi
 push esi
 push ebx
 push edx
 push ecx
 push eax
 xor esi,esi
 add esi,1064
 mov edx,esi
 mov ecx,esi
 xor edi,edi
 sub ecx,1000
 mov eax,ecx
 add eax,eax
 add eax,eax
 sub edx,1063
amackpixpu: push edi
 add edi,edx
 sub ecx,edx
 jnz amackpixpu
 mov [ebp+732],eax
 xor edx,edx
 push edx
 call getreala
 add esp,[ebp+956]
 lea esi,[eax+aandy]
 mov [ebp+764],esi
 mov ebx,[ebp+1008]
 sub ebx,8192
 lea esi,[ebx+vardib]
 sub esi,3000
 xor eax,eax
 xor edx,edx
 mov al,[esi+3018]
 mov ah,[esi+3019]
 mov dl,[esi+3022]
 mov dh,[esi+3023]
 mov [ebp+796],edx
 mov ecx,[ebp+848]
 and ecx,eax
 jz widok
 mov edi,[ebp+844]
 sub edi,ecx
 add eax,edi
widok: mov [ebp+828],eax
 mov edi,edx
 sub edi,[ebp+968]
 sub edi,[ebp+1016]
 add edi,[ebp+968]
 push eax
 push edi
 call nampy
 add esp,[ebp+940]
 mov edx,[ebp+1012]
 sub edx,[ebp+968]
 add edx,eax
 shr edx,1
 shr edx,1
 shr edx,1
 mov [ebp+860],edx
 mov esi,[ebp+1012]
 sub esi,[ebp+968]
 and esi,[ebp+944]
 add esi,[ebp+764]
 sub esi,512
 xor edx,edx
 mov dl,[esi+512]
 mov [ebp+892],edx
 mov ecx,[ebp+860]
 cmp ecx,[ebp+972]
 js endcmack
 cmp ecx,655360
 jns endcmack
 lea edi,[ebx+vardib]
 add edi,[ebp+860]
 add edi,2062
 sub edi,3000
 mov eax,[ebp+892]
 and [edi+1000],al
endcmack: mov esi,[ebp+732]
 add esp,esi
 pop eax
 pop ecx
 pop edx
 pop ebx
 pop esi
 pop edi
 pop ebp
 ret
; end of amackpixel
; void mackdrawline(lnes* lna261, int dl261xs,
;        int dl261ys, int dl261xd, int dl261yd)
; 1016 dl261ys  1020 dl261xd  1024 dl261yd
; 1004 retad  1008 *lna261  1012 dl261xs
; 992 esi    996 edi    1000 ebp
; 976 eax    980 ecx    984 edx    988 ebx
; 960 3    964 2    968 1    972 0
; 944 7    948 6    952 5    956 4
; 928 11    932 10     936 9    940 8
; 912 15    916 14    920 13    924 12
; 896 19    900 18    904 17    908 16
; 888 dxposneg    892 dx972
; 880 espfixer    884 dy972
; 872    876 minpluctr
; 864    868 rx972
; 856    860 ry972
; 848    852 dractr972
; 840    844 ddy972
; 832    836 ddx972
; 824    828
; 816    820
mackdrawline: push ebp
 mov ebp,esp
 sub ebp,1000
 push edi
 push esi
 push ebx
 push edx
 push ecx
 push eax
 xor esi,esi
 add esi,1020
 mov edx,esi
 mov ecx,esi
 xor edi,edi
 sub edx,1019
 sub ecx,1000
 mov ebx,ecx
 mov eax,ecx
 add eax,eax
 add eax,eax
 add eax,eax
mackdrawupl: push edi
 add edi,edx
 sub ecx,edx
 jnz mackdrawupl
 xor edi,edi
mackdrawdpl: push edi
 sub ebx,edx
 jnz mackdrawdpl
 mov [ebp+880],eax
 mov ecx,[ebp+1020]
 sub ecx,[ebp+1012]
 mov [ebp+892],ecx
 mov edx,[ebp+1024]
 sub edx,[ebp+1016]
 mov [ebp+884],edx
 mov ecx,[ebp+892]
 mov edx,[ebp+884]
 mov [ebp+868],ecx
 mov [ebp+860],edx
 mov edi,ecx
 or edi,edx
 jnz mackanz
 jmp drawinonh
mackanz: cmp ecx,[ebp+972]
 jns mackdxgz
 xor edi,edi
 sub edi,ecx
 mov [ebp+868],edi
 mov ebx,[ebp+968]
 add [ebp+876],ebx
mackdxgz: cmp edx,[ebp+972]
 jns mackdygz
 xor edi,edi
 sub edi,edx
 mov [ebp+860],edi
 mov ebx,[ebp+968]
 add [ebp+876],ebx
mackdygz: mov esi,[ebp+868]
 sub esi,[ebp+860]
 jns keepxbotdaw
 mov ebx,[ebp+956]
 add [ebp+888],ebx
keepxbotdaw: mov esi,[ebp+968]
 mov ebx,[ebp+964]
 and esi,[ebp+876]
 jz keeppozdaw
 add [ebp+888],ebx
keeppozdaw: mov esi,[ebp+956]
 and esi,[ebp+888]
 jz nedzzwfour
 mov ecx,[ebp+884]
 cmp ecx,[ebp+972]
 jns nedposone
 mov ebx,[ebp+968]
 add [ebp+888],ebx
 xor edi,edi
 jz nedposone
nedzzwfour: mov ecx,[ebp+892]
 cmp ecx,[ebp+972]
 jns nedposone
 mov ebx,[ebp+968]
 add [ebp+888],ebx
nedposone: mov edi,[ebp+1008]
 xor esi,esi
;    000
 mov edx,[ebp+972]
 mov ecx,[ebp+924]
 and ecx,[ebp+888]
 cmp edx,ecx
 jnz drawinond
drawiz: mov ebx,[ebp+1012]
 add ebx,esi
 mov ecx,[ebp+968]
 and ecx,[ebp+888]
 jz maceven2
 sub ebx,esi
 sub ebx,esi
maceven2: mov edx,[ebp+1016]
 mov ecx,[ebp+860]
 push esi
 push ecx
 call nampy
 add esp,[ebp+940]
 mov ecx,[ebp+868]
 push ecx
 push eax
 call smposdiv
 add esp,[ebp+940]
 add edx,eax
 mov ecx,[ebp+960]
 and ecx,[ebp+888]
 jz macxnor2
 cmp ecx,[ebp+960]
 jz macxnor2
 sub edx,eax
 sub edx,eax
macxnor2: push edx
 push ebx
 push edi
 call amackpixel
 add esp,[ebp+924]
 add esi,[ebp+968]
 cmp esi,[ebp+868]
 js drawiz
;    004
drawinond: mov edx,[ebp+956]
    mov ecx,[ebp+924]
    and ecx,[ebp+888]
    cmp edx,ecx
 jnz drawinonh
drawie: mov edx,[ebp+1016]
 add edx,esi
 mov ecx,[ebp+968]
 and ecx,[ebp+888]
 jz zaceven6
 sub edx,esi
 sub edx,esi
zaceven6: mov ebx,[ebp+1012]
 mov ecx,[ebp+868]
 push esi
 push ecx
 call nampy
 add esp,[ebp+940]
 mov ecx,[ebp+860]
 push ecx
 push eax
 call smposdiv
 add esp,[ebp+940]
 add ebx,eax
 mov ecx,[ebp+960]
 and ecx,[ebp+888]
 jz zacxnor6
 cmp ecx,[ebp+960]
 jz zacxnor6
 sub ebx,eax
 sub ebx,eax
zacxnor6: push edx
 push ebx
 push edi
 call amackpixel
 add esp,[ebp+924]
 add esi,[ebp+968]
 cmp esi,[ebp+860]
 js drawie
drawinonh: mov edx,[ebp+880]
 add esp,edx
 pop eax
 pop ecx
 pop edx
 pop ebx
 pop esi
 pop edi
 pop ebp
 ret
;    bottom of mackdrawline
; 1 right    2 down    3 lower right    4 upper right
; void bmackdpage(lnes* grpd13,int reqwid,int reqhgt)
; 1008 *grpd13    1012 reqwid    1016 reqhgt
; 992 esi   996 edi    1000 ebp    1004 retad
; 980 ecx   984 edx    988 ebx
; 964 2      968 1      972 0        976 eax
; 948 6      952 5      956 4        960 3
; 932 10    936 9      940 8        944 7
; 916 14    920 13    924 12    928 11
; 900 18    904 17    908 16    912 15
; 884 22    888 taddr    892 20    896 starx
; 868 26    872 25    876 24    880 stary
; 852 ar4    856 tinst    860 28    864 ilctrx
; 836 ar3    840 tleny    844 32    848 olctry
; 820 ar2    824 tlenx    828 36    832 ceilwx
; 804 ar1    808 ty    812 40    816 ceilwy
; 788 46    792 tx    796 44    800 shiftx
; 772 50    776 49    780 48    784 shifty
; 756 54    760 53    764 52    768 wherefont
; 740 58    744 57    748 56    752 denhgty
; 724 62    728 61    732 60    736 denwidx
; 708 66    712 65    716 64    720 fixesp
; 692 realx    696 realy    700 realen    704 realinst
bmackdpage: push ebp
 mov ebp,esp
 sub ebp,1000
 push edi
 push esi
 push ebx
 push edx
 push ecx
 push eax
 xor esi,esi
 add esi,1067
 mov edx,esi
 mov ecx,esi
 xor edi,edi
 sub edx,1066
 sub ecx,996
 mov eax,ecx
 add eax,eax
 add eax,eax
bmackdpapu: push edi
 add edi,edx
 sub ecx,edx
 jnz bmackdpapu
 mov [ebp+720],eax
 mov ebx,[ebp+1008]
 sub ebx,02000h
 xor edi,edi
 push edi
 call getreala
 add esp,[ebp+956]
 lea ecx,[edi+onefontdir]
 add ecx,eax
 mov [ebp+768],ecx
 lea esi,[edi+prebh]
 add esi,eax
 sub esi,1000
 mov ecx,[esi+1012]
 mov edi,[esi+1020]
 mov edx,[esi+1024]
 add edi,[ebp+844]
 add edx,[ebp+756]
 mov [ebp+736],edi
 mov [ebp+752],edx
; denwidx736=biwidth+32+
; denhgty752=biheight+54+
 lea edi,[ebx+vardib]
 sub edi,1000
 xor edx,edx
 mov eax,ecx
loadehdr: mov dl,[esi+1002]
 mov [edi+1000],dl
 add esi,[ebp+968]
 add edi,[ebp+968]
 sub ecx,[ebp+968]
 jnz loadehdr
 mov esi,eax
 mov edx,[ebp+1012]
 add edx,[ebp+944]
 shr edx,1
 shr edx,1
 shr edx,1
; (reqwid + 7) / 8
 mov ecx,[ebp+1016]
 push edx
 push ecx
 call nampy
 add esp,[ebp+940]
 mov ecx,eax
; (((reqwid+7)/8)*reqhgt)-
 xor edx,edx
 sub ecx,edx
 sub edx,[ebp+968]
 mov esi,[ebp+968]
loadchdr: mov [edi+1000],dl
 add edi,esi
 sub ecx,esi
 jnz loadchdr
 mov eax,[ebp+1012]
 mov edx,[ebp+1016]
 lea edi,[ebx+vardib]
 sub edi,3000
 mov [edi+3018],al
 mov [edi+3019],ah
 mov [edi+3022],dl
 mov [edi+3023],dh
 xor eax,eax
 mov [edi+3020],al
 mov [edi+3021],al
 mov [edi+3024],al
 mov [edi+3025],al
 mov edx,[ebp+752]
 mov ecx,[ebp+1016]
 mov eax,ecx
 add ecx,ecx
 add ecx,eax
 add ecx,edx
 mov eax,edx
 add edx,edx
 add edx,eax
 push edx
 push ecx
 call smposdiv
 add esp,[ebp+940]
 mov [ebp+784],eax
; shifty=reqhgt/denhgty
bdpolsy: mov esi,[ebp+784]
 sub esi,[ebp+968]
 mov [ebp+784],esi
 mov edx,[ebp+736]
 mov ecx,[ebp+1012]
 mov eax,ecx
 add ecx,ecx
 add ecx,eax
 add ecx,edx
 mov eax,edx
 add edx,edx
 add edx,eax
 push edx
 push ecx
 call smposdiv
 add esp,[ebp+940]
 mov [ebp+800],eax
; shiftx=reqwid/denwidx
bdpilsx: mov esi,[ebp+800]
 sub esi,[ebp+968]
 mov [ebp+800],esi
 mov edx,[ebp+936]
 add edx,[ebp+968]
 mov ecx,[ebp+1016]
 push edx
 push ecx
 call nampy
 add esp,[ebp+940]
; (9+1)*reqhgt
 mov edx,[ebp+752]
 push edx
 push eax
 call smposdiv
 add esp,[ebp+940]
 mov [ebp+816],eax
; cellwy=((9+1)*reqhgt)/denhgty
 mov edx,[ebp+944]
 mov ecx,[ebp+1012]
 push edx
 push ecx
 call nampy
 add esp,[ebp+940]
; 7*reqwid
 mov edx,[ebp+736]
 push edx
 push eax
 call smposdiv
 add esp,[ebp+940]
 mov [ebp+832],eax
; cellwx=(7*reqwid)/denwidx
 mov edi,[ebp+972]
 mov [ebp+848],edi
bdpolop: mov esi,[ebp+972]
 mov [ebp+864],esi
 mov edx,[ebp+848]
 add edx,[ebp+968]
 mov [ebp+848],edx
bdpmlop: mov ecx,[ebp+864]
 add ecx,[ebp+968]
 mov [ebp+864],ecx
 mov edx,[ebp+832]
 push ecx
 push edx
 call nampy
 add esp,[ebp+940]
; ilctrx*cellwx
 add eax,[ebp+800]
 mov [ebp+896],eax
; starx=(ilctrx*cellwx)+shiftx
 mov edx,[ebp+848]
 sub edx,[ebp+972]
 mov ecx,[ebp+816]
 push edx
 push ecx
 call nampy
 add esp,[ebp+940]
; (olctry-0)*cellwy
 add eax,[ebp+784]
 add eax,[ebp+952]
 mov [ebp+880],eax
; stary=((olctry-0)*cellwy)+shifty+5
 mov edx,[ebp+848]
 sub edx,[ebp+968]
 mov ecx,[ebx+a80w]
 push edx
 push ecx
 call nampy
 add esp,[ebp+940]
; (olctry-1)*a80w
 add eax,[ebp+864]
 sub eax,[ebp+968]
; ((olctry-1)*a80w)+ilctrx-1
 mov esi,eax
 xor edx,edx
 mov dl,[ebx+esi*1+evwr]
 add edx,edx
 mov esi,[ebp+768]
 add esi,edx
 xor edx,edx
 sub esi,512
 mov dl,[esi+512]
 mov dh,[esi+513]
 add edx,[ebp+768]
 sub edx,2000
 mov [ebp+888],edx
bdpilop: mov esi,[ebp+888]
 xor edi,edi
jbdpjlop: xor edx,edx
 mov dl,[esi+2000]
 sub edx,[ebp+780]
 cmp edx,[ebp+940]
 jns jbdzibot
 cmp edx,[ebp+968]
 jns xbrpeep
jbdzibot: jmp bdpibot
xbrpeep: cmp edi,[ebp+940]
 jnz xbpkeep
 sub edx,[ebp+972]
xbpkeep: mov [ebp+edi*1+692],edx
 add esi,[ebp+968]
 add edi,[ebp+956]
 cmp edi,[ebp+908]
 js jbdpjlop
 mov ecx,[ebp+1012]
 mov edx,[ebp+692]
 push edx
 push ecx
 call nampy
 add esp,[ebp+940]
; t0*reqwid
 mov ecx,[ebp+736]
 push ecx
 push eax
 call smposdiv
 add esp,[ebp+940]
; (t0*reqwid)/denwidx
 mov [ebp+792],eax
; tx
 mov eax,[ebp+696]
 mov edx,[ebp+1016]
 push eax
 push edx
 call nampy
 add esp,[ebp+940]
; t1*reqhgt
 mov ecx,[ebp+752]
 push ecx
 push eax
 call smposdiv
 add esp,[ebp+940]
; (t1*reqhgt)/denhgty
 mov [ebp+808],eax
; ty 808
 mov edi,[ebp+700]
 mov ecx,[ebp+1012]
 push edi
 push ecx
 call nampy
 add esp,[ebp+940]
; t2*reqwid
 mov edx,eax
 add eax,eax
 add eax,edx
 mov ecx,[ebp+736]
 mov edx,ecx
 add eax,ecx
 add ecx,ecx
 add ecx,edx
 push ecx
 push eax
 call smposdiv
 add esp,[ebp+940]
 mov [ebp+824],eax
; tlenx824=((3*(t2*reqwid))+denwidx)/(denwidx*3)
 mov ecx,[ebp+1016]
 push edi
 push ecx
 call nampy
 add esp,[ebp+940]
; t2*reqhgt
 add eax,eax
 mov ecx,[ebp+752]
 add eax,ecx
 add ecx,ecx
 push ecx
 push eax
 call smposdiv
 add esp,[ebp+940]
 mov [ebp+840],eax
; tleny840=((2*(t2*reqhgt))+denhgty)/(denhgty*2)
 mov eax,[ebp+704]
 mov [ebp+856],eax
; tinst856=t3-48
 mov edx,[ebp+956]
 add [ebp+888],edx
 mov ecx,[ebp+896]
 mov edx,[ebp+880]
 add ecx,[ebp+792]
 add edx,[ebp+808]
 mov [ebp+804],ecx
 mov [ebp+820],edx
 mov [ebp+836],ecx
 mov [ebp+852],edx
 mov ecx,[ebp+968]
 cmp ecx,[ebp+856]
 jnz bdpnotone
 mov esi,[ebp+804]
 add esi,[ebp+824]
 mov [ebp+836],esi
bdpnotone: mov ecx,[ebp+964]
 cmp ecx,[ebp+856]
 jnz bdpnottwo
 mov edi,[ebp+820]
 add edi,[ebp+840]
 mov [ebp+852],edi
bdpnottwo: mov ecx,[ebp+960]
 cmp ecx,[ebp+856]
 jnz bdpnotree
 mov esi,[ebp+804]
 add esi,[ebp+824]
 mov [ebp+836],esi
 mov edi,[ebp+820]
 add edi,[ebp+840]
 mov [ebp+852],edi
bdpnotree: mov ecx,[ebp+956]
 cmp ecx,[ebp+856]
 jnz bdpnotfor
 mov esi,[ebp+804]
 add esi,[ebp+824]
 mov [ebp+836],esi
 mov edi,[ebp+820]
 mov esi,[ebp+968]
 add esi,edi
 mov [ebp+852],esi
 sub edi,[ebp+840]
 js bdpnotfor
 mov [ebp+852],edi
bdpnotfor: mov edi,[ebp+852]
 mov esi,[ebp+836]
 mov edx,[ebp+820]
 mov ecx,[ebp+804]
 mov eax,[ebp+1008]
 push edi
 push esi
 push edx
 push ecx
 push eax
 call mackdrawline
 add esp,[ebp+892]
 jmp bdpilop
bdpnc: jmp bdpne
bdpibot: mov esi,[ebp+864]
 mov edi,[ebp+848]
 cmp esi,[ebx+onecurwozx]
 jnz bdpnc
 cmp edi,[ebx+onecurwozy]
 jnz bdpnc
 mov ecx,[ebp+968]
 add ecx,[ebp+896]
 mov [ebp+804],ecx
 mov edx,[ebp+940]
 mov eax,[ebp+1016]
 push edx
 push eax
 call nampy
 add esp,[ebp+940]
; 9*reqhgt
 mov edx,[ebp+752]
 push edx
 push eax
 call smposdiv
 add esp,[ebp+940]
; (9*reqhgt)/denhgty
 add eax,[ebp+880]
 add eax,[ebp+968]
 mov [ebp+820],eax
 mov [ebp+852],eax
 mov edx,[ebp+952]
 mov eax,[ebp+1012]
 xor edi,edi
 cmp edi,[ebx+insertype]
 jnz bdpi027
 shr edx,1
bdpi027: push edx
 push eax
 call nampy
 add esp,[ebp+940]
; 5*reqwid
 mov edx,[ebp+736]
 push edx
 push eax
 call smposdiv
 add esp,[ebp+940]
; (5*reqwid)/denwidx
 add eax,ecx
; ar3=((5*reqwid)/denwidx)+ar1
 mov [ebp+836],eax
 mov edi,[ebp+852]
 mov esi,[ebp+836]
 mov edx,[ebp+820]
 mov ecx,[ebp+804]
 mov eax,[ebp+1008]
 push edi
 push esi
 push edx
 push ecx
 push eax
 call mackdrawline
 add esp,[ebp+892]
bdpne: mov ecx,[ebp+864]
 mov esi,[ebp+972]
 add esi,[ebx+a80w]
 cmp ecx,esi
 jns bzaftmlop
 jmp bdpmlop
bzaftmlop: mov edx,[ebp+848]
 mov edi,[ebp+968]
 add edi,[ebx+ypheight]
 cmp edx,edi
 jns bzaftolop
 jmp bdpolop
bzaftolop: mov esi,[ebp+800]
 cmp esi,[ebp+968]
 js bzaftis
 jmp bdpilsx
bzaftis: mov edi,[ebp+784]
 cmp edi,[ebp+968]
 js bzaftoo
 jmp bdpolsy
bzaftoo: mov edx,[ebp+720]
 add esp,edx
 pop eax
 pop ecx
 pop edx
 pop ebx
 pop esi
 pop edi
 pop ebp
 ret
; bottom of bmackdpage
; void pagetodib(struct lnes *pgi)
; 1000 ebpsave    1004 retad    1008 *pgi
; 988 ebx    992 esi    996 edi
; 976 eax    980 ecx    984 edx
; 964 -1    968 -2    972 -3
; 952 2        956 1        960 0
; 940 nineprod    944 4        948 3
; 928 8        932 7        936 6
; 916 ilopct    920 10    924 9
; 904 jlopct    908 olct    912 fromsub
; 892 mlct    896 hgt    900 &fontstart
; 880 20        884 wid    888 bytewid
; 868 addx    872 codeaddr    876 jdesbase
; 856 taddend    860 25     864 24
; 844 size    848 code    852 cst48
; 832 32    836 x    840 y
pagetodib: push ebp
 mov ebp,esp
 sub ebp,1000
 push edi
 push esi
 push ebx
 push edx
 push ecx
 push eax
 xor edi,edi
 add edi,1000
 mov edx,edi
 mov ecx,edi
 sub ecx,964
 sub edx,999
 sub edi,1003
pagedibpu: push edi
 add edi,edx
 sub ecx,edx
 jnz pagedibpu
 xor esi,esi
 add esi,1048
 sub esi,1000
 mov [ebp+852],esi
 xor edx,edx
 push edx
 call getreala
 add esp,[ebp+944]
 mov [ebp+872],eax
 mov ebx,[ebp+872]
 lea esi,[ebx+prebh]
 sub esi,1000
 mov ecx,[esi+1012]
 mov edi,[esi+1020]
 mov edx,[esi+1024]
 mov [ebp+884],edi
 mov [ebp+896],edx
 mov ebx,[ebp+1008]
 sub ebx,8192
 lea edi,[ebx+vardib]
 sub edi,1000
 mov eax,[ebp+956]
 xor edx,edx
loaddhdr: mov dl,[esi+1002]
 mov [edi+1000],dl
 add esi,eax
 add edi,eax
 sub ecx,eax
 jnz loaddhdr
 mov edx,[ebp+884]
 shr edx,1
 shr edx,1
 shr edx,1
 mov [ebp+888],edx
 xor edx,edx
 mov [ebp+912],edx
 mov [ebp+908],edx
olopdib: mov ecx,[ebp+920]
 mov eax,[ebp+908]
 push ecx
 push eax
 call nampy
 add esp,[ebp+928]
 mov edx,[ebp+896]
 sub edx,[ebp+920]
 sub edx,eax
 mov ecx,[ebp+888]
 push edx
 push ecx
 call nampy
 add esp,[ebp+928]
 mov [ebp+940],eax
 xor ecx,ecx
 mov [ebp+892],ecx
mlopdib: mov ecx,[ebp+932]
 mov eax,[ebp+892]
 push ecx
 push eax
 call nampy
 add esp,[ebp+928]
 add eax,[ebp+940]
 add eax,[ebp+956]
 mov [ebp+876],eax
 xor ecx,ecx
 mov [ebp+904],ecx
jlopdib: mov edx,[ebp+904]
 add edx,edx
 mov esi,[ebp+872]
 lea ecx,[esi+chbackground]
 add ecx,edx
 sub ecx,2000
 mov esi,ecx
 xor eax,eax
 xor ecx,ecx
 mov al,[esi+2000]
 mov cl,[esi+2001]
 lea edi,[ebx+vardib]
 add edi,[ebp+904]
 add edi,1062
 sub edi,2001
 add edi,[ebp+876]
 mov esi,[ebp+960]
rounddibc: mov edx,[ebp+944]
 cmp edx,esi
 jnz nondibch
 mov [ebp+832],edi
nondibch: or [edi+1000],al
 or [edi+1001],cl
 xor edx,edx
 sub edx,[ebp+888]
 add edi,edx
 add esi,[ebp+956]
 cmp esi,[ebp+920]
 js rounddibc
 xor ecx,ecx
 mov [ebp+916],ecx
 mov esi,[ebp+912]
 xor eax,eax
 mov al,[ebx+esi*1+evwr]
 add esi,[ebp+956]
 mov [ebp+912],esi
 mov esi,[ebp+872]
 lea ecx,[esi+onefontdir]
 mov esi,ecx
 sub esi,1000
 add esi,eax
 add esi,eax
 xor eax,eax
 mov al,[esi+1000]
 mov ah,[esi+1001]
 add ecx,eax
 mov [ebp+900],ecx
ilopdib: mov esi,[ebp+900]
 sub esi,1000
 add esi,[ebp+916]
 xor edi,edi
 xor ecx,ecx
ilopxib: xor edx,edx
 mov dl,[esi+1000]
 sub edx,[ebp+852]
 cmp edx,[ebp+928]
 jns nokeeilop
 cmp edx,[ebp+956]
 jns yykeeilop
nokeeilop: jmp botilopd
yykeeilop: mov [ebp+edi*1+836],edx
 add edi,[ebp+944]
 add esi,[ebp+956]
 add ecx,[ebp+956]
 cmp ecx,[ebp+944]
 js ilopxib
rykeeilop: mov edx,[ebp+916]
 add edx,[ebp+944]
 mov [ebp+916],edx
 mov edx,[ebp+956]
 cmp edx,[ebp+848]
 jnz notdibone
 xor ecx,ecx
 mov [ebp+856],ecx
 mov ecx,[ebp+928]
 add ecx,ecx
 mov [ebp+868],ecx
notdibone: mov edx,[ebp+952]
 cmp edx,[ebp+848]
 jnz notdibtwo
 xor ecx,ecx
 mov [ebp+868],ecx
 sub ecx,[ebp+888]
 mov [ebp+856],ecx
notdibtwo: mov edx,[ebp+948]
 cmp edx,[ebp+848]
 jnz notdibthree
 xor ecx,ecx
 sub ecx,[ebp+888]
 mov [ebp+856],ecx
 mov ecx,[ebp+928]
 add ecx,ecx
 mov [ebp+868],ecx
notdibthree: mov edx,[ebp+944]
 cmp edx,[ebp+848]
 jnz notdibfour
 xor ecx,ecx
 add ecx,[ebp+888]
 mov [ebp+856],ecx
 mov ecx,[ebp+928]
 add ecx,ecx
 mov [ebp+868],ecx
notdibfour: mov edi,[ebp+872]
 lea ecx,[edi+dotprevcur]
 mov esi,[ebp+904]
 add ecx,esi
 add ecx,esi
 mov esi,[ebp+836]
 add esi,esi
 add esi,esi
 add esi,esi
 add esi,esi
 sub ecx,1000
 add esi,ecx
 mov eax,[ebp+840]
 xor ecx,ecx
 sub ecx,[ebp+888]
 push eax
 push ecx
 call nampy
 add esp,[ebp+928]
 mov edi,[ebp+960]
 sub edi,2001
 add edi,1062
 add edi,eax
 add edi,[ebp+876]
 add edi,[ebp+904]
 lea ecx,[ebx+vardib]
 add edi,ecx
 mov ecx,[ebp+844]
dibdraa: xor eax,eax
 xor edx,edx
 mov al,[esi+1000]
 mov dl,[esi+1001]
 and [edi+1000],al
 and [edi+1001],dl
 mov eax,[ebp+832]
 add esi,[ebp+868]
 add edi,[ebp+856]
 sub ecx,[ebp+956]
 cmp ecx,[ebp+956]
 jns dibdraa
 jmp ilopdib
; insert cursor code next
botilopd: mov edx,[ebp+892]
 add edx,edx
 add edx,edx
 add edx,edx
 add edx,[ebp+904]
 mov ecx,[ebp+908]
 add ecx,[ebp+964]
 add ecx,[ebp+960]
 mov esi,[ebx+onecurwozx]
; get cursor information to compare
 mov edi,[ebx+onecurwozy]
 add esi,[ebp+964]
 add edi,[ebp+964]
; 956 1    960 0    964 -1
 cmp ecx,edi
 jnz bbotilopd
 cmp edx,esi
 jnz bbotilopd
 lea edi,[ebx+vardib]
 mov eax,[ebp+904]
 add edi,eax
 add edi,[ebp+888]
 sub edi,939
 add edi,[ebp+876]
 add eax,eax
 add eax,[ebp+872]
 lea esi,[eax+dotprevcur]
 sub esi,1000
 mov al,[esi+1000]
 mov dl,[esi+1001]
 and al,[esi+1032]
 and dl,[esi+1033]
 xor ecx,ecx
 cmp ecx,[ebx+insertype]
 jz cbotilvpc
 and al,[esi+1064]
 and dl,[esi+1065]
cbotilvpc: and [edi+1000],al
 and [edi+1001],dl
bbotilopd: mov edx,[ebp+904]
 add edx,[ebp+956]
 mov [ebp+904],edx
 cmp edx,[ebp+928]
 jns botjlopd
 jmp jlopdib
botjlopd: mov ecx,[ebp+892]
 add ecx,[ebp+956]
 mov [ebp+892],ecx
 cmp ecx,[ebp+920]
 jns botmlopd
 jmp mlopdib
botmlopd: mov edx,[ebp+908]
 add edx,[ebp+956]
 mov [ebp+908],edx
 cmp edx,[ebp+860]
 jns botolopd
 jmp olopdib
botolopd: xor ecx,ecx
 add ecx,1000
 sub ecx,964
 add ecx,ecx
 add ecx,ecx
 add esp,ecx
 pop eax
 pop ecx
 pop edx
 pop ebx
 pop esi
 pop edi
 pop ebp
 ret
; end of pagetodib
; int fixrect(*rects)
; 1000 ebpsave    1004 retad    1008 *rects
; 988 ebx    992 esi    996 edi
; 976 eax    980 ecx    984 edx
; 964 2    968 1    972 0
; 952 wwcmp    956 4    960 3
; 940 8    944 7    948 6
; 928 whcmp    932 10    936 9
fixrect: push ebp
 mov ebp,esp
 sub ebp,1000
 push edi
 push esi
 push ebx
 push edx
 push ecx
 xor edi,edi
 add edi,1000
 mov edx,edi
 mov ecx,edi
 sub edi,1001
 sub edx,999
 sub ecx,986
fixrecpu: push edi
 add edi,edx
 sub ecx,edx
 jnz fixrecpu
 xor esi,esi
 add esi,2000
 mov ecx,esi
 sub ecx,1950
 mov [ebp+928],ecx
 sub esi,1800
 mov [ebp+952],esi
 mov ebx,[ebp+1008]
 sub ebx,1000
 mov edx,[ebx+1012]
 sub edx,[ebx+1004]
 mov [ebx+1012],edx
 mov edi,[ebx+1008]
 sub edi,[ebx+1000]
 mov [ebx+1008],edi
 xor esi,esi
 mov [ebx+1004],esi
 mov [ebx+1000],esi
 cmp edx,[ebp+928]
 js tinyrect
 cmp edi,[ebp+952]
 js tinyrect
 mov ecx,[ebp+968]
 mov [ebp+976],ecx
tinyrect: xor ecx,ecx
 add ecx,1052
 sub ecx,1000
 add esp,ecx
 pop eax
 pop ecx
 pop edx
 pop ebx
 pop esi
 pop edi
 pop ebp
 ret
; rect.left
; rect.top
; rect.right
; rect.bottom
; bottom of fixrect
; void texcbpage(struct lnes *tep,int texhwnd)
; 3000 ebpsave  3004 retad  3008 *tep   3012 texhwnd
; 2984 edx    2988 ebx    2992 esi    2996 edi
; 2968 1    2972 0    2976 eax    2980 ecx
; 2952 5    2956 4    2960 3    2964 2
; 2936 9    2940 8    2944 7    2948 6
; 2920 13    2924 12    2928 11    2932 10
; 2904 17    2908 16    2912 15    2916 14
; 2888 21    2892 20    2896 19    2900 18
; 2872 25    2876 24    2880 23    2884 22
; 2856 bgphdc 2860 codeadr 2864 texlbase 2868 texlctr
; 2756 linebuffer
; 2572 400    2576 texps180
texcbpage: push ebp
 mov ebp,esp
 sub ebp,3000
 push edi
 push esi
 push ebx
 push edx
 push ecx
 push eax
 xor edi,edi
 xor edx,edx
 add edx,1001
 mov ecx,edx
 sub edx,1000
 sub ecx,900
texcbpugg: push edi
 add edi,edx
 sub ecx,edx
 jnz texcbpugg
 xor ecx,ecx
 push ecx
 call getreala
 add esp,[ebp+2956]
 mov [ebp+2860],eax
 mov edi,[ebp+2860]
 lea esi,[edi+texaftbgp]
 mov ecx,[ebp+3012]
 lea edx,[ebp+2576]
 add edi,0800000h
 mov eax,[edi+lpbeginpaint]
 push edx
 push ecx
 push esi
 push eax
 ret
texaftbgp: mov ebp,esp
 sub ebp,2572
 mov [ebp+2856],eax
 mov ebx,[ebp+3008]
 sub ebx,8192
 mov edi,[ebp+2860]
 lea esi,[edi+texaftgwr]
 mov ecx,[ebp+3012]
 lea edx,[ebx+tevl]
 add edi,0800000h
 mov eax,[edi+lpgwrect]
 push edx
 push ecx
 push esi
 push eax
 ret
texaftgwr: mov ebp,esp
 sub ebp,2572
 mov ebx,[ebp+3008]
 sub ebx,8192
 lea esi,[ebx+tevl]
 push esi
 call fixrect
 add esp,[ebp+2956]
 sub esi,2000
 mov ecx,[esi+2008]
 mov edx,[esi+2012]
; (576+32) * (270+54)
 xor eax,eax
 jnz tixcbpol
; 576 * 270
 cmp ecx,624
 js tixcbpol
 cmp edx,378
 js tixcbpol
 mov eax,ecx
 shr eax,1
 shr eax,1
 shr eax,1
 push eax
 push edx
 call nampy
 add esp,[ebp+2940]
 xor edi,edi
 add edi,1000
 sub edi,1062
 add edi,655422
 cmp edi,eax
 js tixcbpol
 mov eax,[ebp+3008]
 push edx
 push ecx
 push eax
 call bmackdpage
 add esp,[ebp+2924]
 xor edi,edi
 jz tixdonedib
tixcbpol: mov ecx,[ebp+2952]
 mov edx,[ebp+3008]
 push edx
 call pagetodib
 add esp,[ebp+2956]
tixdonedib: xor eax,eax
; lea esi,[ebx+vardib]
; sub esi,2000
; lea ecx,[esi+2014]
; lea edx,[esi+2062]
; push eax
; push ecx
; push edx
; lea esi,[ebx+vardib]
; sub esi,3002
; mov edx,[esi+3020]
; mov ecx,[esi+3024]
; mov ebx,[ebp+2860]
; push ecx
; push eax
; push eax
; push eax
; push ecx
; push edx
; push eax
; push eax
; mov edi,[ebp+2856]
; push edi
; lea ecx,[ebx+aftdrawh]
; add ebx,00800000h
; mov edx,[ebx+lptextout]
; push ecx
; push edx
; ret
; aftdrawh: mov ebp,esp
; sub ebp,2572
 mov ecx,[ebp+2856]
 mov edx,[ebp+3008]
 push ecx
 push edx
 call qlinepage
 add esp,[ebp+2940]
texcc: mov edx,[ebp+3012]
 lea ebx,[ebp+2576]
 mov edi,[ebp+2860]
 lea esi,[edi+afttexep]
 add edi,0800000h
 mov eax,[edi+lpendpaint]
 push ebx
 push edx
 push esi
 push eax
 ret
afttexep: xor ecx,ecx
 add ecx,404
 add esp,ecx
 pop eax
 pop ecx
 pop edx
 pop ebx
 pop esi
 pop edi
 pop ebp
 ret
; end of texcbpage 3275
; clearline(struct lnes* zzc,int cwch)
; cwch 1012    *zzc 1008    retad 1004
; ebp 1000    edi 996    esi 992
; ebx 988    edx 984    ecx 980
; eax 976    972 0    968 1
; 964 2    960 3    956 4
; 952 5    948    944 7    940 8
clearline: push ebp
 mov ebp,esp
 sub ebp,1000
 push edi
 push esi
 push ebx
 push edx
 push ecx
 push eax
 xor esi,esi
 add esi,1000
 mov ecx,esi
 mov edx,esi
 sub edx,999
 sub ecx,991
 xor edi,edi
cleariiu: push edi
 add edi,edx
 sub ecx,edx
 jnz cleariiu
 mov ebx,[ebp+1008]
 sub ebx,8192
 mov eax,[ebp+1012]
 sub eax,[ebp+968]
 mov ecx,[ebx+a80w]
 push eax
 push ecx
 call nampy
 add esp,[ebp+940]
 mov edi,eax
 mov edx,esi
 sub edx,968
 mov eax,[ebp+968]
clearllp: mov [ebx+edi*1+crz0160],dl
 add edi,eax
 sub ecx,eax
 jnz clearllp
 mov ecx,esi
 sub ecx,964
 add esp,ecx
 pop eax
 pop ecx
 pop edx
 pop ebx
 pop esi
 pop edi
 pop ebp
 ret
; bottom of clearline
; rw8056(lnes* zyc,int zrw56,int bwlocal, int wcy)
; wcy 1020
; retad 1004    *zyc 1008    zrw56 1012    bwlocal 1016
; ebx 988    esi 992    edi 996    ebp 1000
; 972 -4     eax 976    ecx 980    edx 984
; 956 0    960 -1    964  -2    968 -3
; 940 4    944 3    948 2    952 1
; 924 8    928 7    932 6    936 5
; 908 12    912 11    916 10    920 9
; 892 16    896 baselocal    900 basey    904
rw8056: push ebp
 mov ebp,esp
 sub ebp,1000
 push edi
 push esi
 push ebx
 push edx
 push ecx
 push eax
 xor esi,esi
 add esi,1000
 mov ecx,esi
 sub ecx,979
 mov edx,esi
 sub edx,999
 mov edi,esi
 sub edi,1004
rwu805: push edi
 add edi,edx
 sub ecx,edx
 jnz rwu805
 mov ebx,[ebp+1008]
 sub ebx,02000h
 mov eax,[ebx+a80w]
 mov ecx,[ebp+1016]
 sub ecx,[ebp+952]
 push eax
 push ecx
 call nampy
 add esp,[ebp+924]
 mov [ebp+896],eax
 mov eax,[ebx+a80w]
 mov ecx,[ebp+1020]
 sub ecx,[ebp+952]
 cmp ecx,[ebp+956]
 js rwfailNE
 push eax
 push ecx
 call nampy
 add esp,[ebp+924]
 mov [ebp+900],eax
 add eax,[ebx+a80w]
 add eax,[ebx+a80w]
 lea ecx,[ebx+0800000h]
 lea edx,[ebx+sandoval]
 sub ecx,edx
 sub ecx,8192
 cmp eax,ecx
 js rw85ok
rw85fail: mov ecx,[ebp+952]
 mov [ebx+nzerror],ecx
rwfailNE: mov ecx,[ebp+1012]
 cmp ecx,[ebp+936]
 jnz rw86fail
 mov eax,[ebp+1016]
 mov ecx,[ebp+1008]
 push eax
 push ecx
 call clearline
 add esp,[ebp+924]
rw86fail: jmp rw805zot
rw85ok: mov ecx,[ebp+1012]
 cmp ecx,[ebp+936]
 jz ron85rex
 jmp non85red
ron85rex: mov edx,[ebp+1020]
 add edx,[ebp+960]
 cmp edx,[ebx+afilelen]
 jns rwfailNE
; insert READ
 lea esi,[ebx+sandoval]
 add esi,[ebp+900]
 lea edi,[ebx+crz0160]
 add edi,[ebp+896]
 sub esi,1024
 sub edi,1024
 mov eax,[ebp+952]
 mov ecx,[ebx+a80w]
rr5053: mov dl,[esi+1024]
 mov [edi+1024],dl
 add esi,eax
 add edi,eax
 sub ecx,eax
 jnz rr5053
 xor esi,esi
 cmp esi,[ebx+uppercase]
 jz a85red
 lea edi,[ebx+crz0160]
 add edi,[ebp+896]
 sub edi,16384
 mov esi,[ebx+a80w]
upca8056u: xor eax,eax
 mov al,[edi+16384]
 xor edx,edx
 add edx,1096
 sub edx,1000
 cmp edx,eax
 jns upcb8056u
 add edx,[ebp+952]
 cmp edx,[ebx+uppercase]
 jnz upcb8056u
 xor edx,edx
 add edx,1123
 sub edx,1000
 cmp edx,eax
 js upcb8056u
 sub eax,[ebp+892]
 sub eax,[ebp+892]
 mov [edi+16384],al
upcb8056u: mov edx,[ebp+952]
 add edi,edx
 sub esi,edx
 jnz upca8056u
a85red: jmp rw86fail
non85red: cmp ecx,[ebp+932]
 jz ron86rex
 jmp rw86fail
ron86rex: lea ecx,[ebx+sandoval]
 mov edx,[ebp+1020]
 add edx,[ebp+960]
 cmp edx,[ebp+956]
 jns ron87ming
 jmp rw85fail
ron87ming: xor esi,esi
 cmp esi,[ebx+uppercase]
 jz rww8066
 lea edi,[ebx+crz0160]
 add edi,[ebp+896]
 sub edi,16384
 mov esi,[ebx+a80w]
upca8056l: xor eax,eax
 mov al,[edi+16384]
 xor edx,edx
 add edx,1096
 sub edx,1000
 cmp edx,eax
 jns upcb8056l
 add edx,[ebp+952]
 cmp edx,[ebx+uppercase]
 jnz upcb8056l
 xor edx,edx
 add edx,1123
 sub edx,1000
 cmp edx,eax
 js upcb8056l
 sub eax,[ebp+892]
 sub eax,[ebp+892]
 mov [edi+16384],al
upcb8056l: mov edx,[ebp+952]
 add edi,edx
 sub esi,edx
 jnz upca8056l
rww8066: lea edi,[ebx+sandoval]
 add edi,[ebp+900]
 sub edi,1024
 lea esi,[ebx+crz0160]
 add esi,[ebp+896]
 sub esi,1024
 mov eax,[ebp+952]
 mov ecx,[ebx+a80w]
ww8068: mov dl,[esi+1024]
 mov [edi+1024],dl
 add esi,eax
 add edi,eax
 sub ecx,eax
 jnz ww8068
rw805zot: xor edx,edx
 add edx,2084
 sub edx,2000
 add esp,edx
 pop eax
 pop ecx
 pop edx
 pop ebx
 pop esi
 pop edi
 pop ebp
 ret
; bottom of rw8056
; lalocal12(struct lnes* zlal)
; retad 1004    *zlal 1008
; ebx 988    esi 992    edi 996    ebp 1000
; 972 0    976 eax    980 ecx    984 edx
; 956 4    960 3    964 2    968 1
; 940 8    944 ycmp    948 6    952 5
lalocal12: push ebp
 mov ebp,esp
 sub ebp,1000
 push edi
 push esi
 push ebx
 push edx
 push ecx
 push eax
 xor esi,esi
 add esi,1000
 mov ecx,esi
 sub ecx,991
 xor edi,edi
 mov edx,esi
 sub edx,999
 xor edi,edi
lalocpu12: push edi
 add edi,edx
 sub ecx,edx
 jnz lalocpu12
 mov ebx,[ebp+1008]
 sub ebx,8192
 mov ecx,[ebx+y]
 add ecx,[ebp+968]
 mov [ebp+944],ecx
 mov edx,[ebx+y]
 cmp edx,[ebp+972]
 js lalcone
 mov ecx,[ebx+afilelen]
 cmp ecx,[ebp+944]
 jns lalctwo
lalcone: mov edx,[ebp+964]
 mov ecx,[ebp+1008]
 push edx
 push ecx
 call clearline
 add esp,[ebp+940]
lalctwo: mov ecx,[ebx+y]
 cmp ecx,[ebp+972]
 js lalcthree
 mov ecx,[ebx+afilelen]
 cmp ecx,[ebp+944]
 js lalcthree
 mov edi,[ebp+944]
 mov edx,[ebp+964]
 mov ecx,[ebp+952]
 mov eax,[ebp+1008]
 push edi
 push edx
 push ecx
 push eax
 call rw8056
 mov edx,[ebp+940]
 add edx,edx
 add esp,edx
lalcthree: mov edx,[ebx+y]
 cmp edx,[ebp+968]
 js lalcfour
 mov ecx,[ebx+afilelen]
 cmp ecx,[ebx+y]
 jns lalcfive
lalcfour: mov edx,[ebp+968]
 mov ecx,[ebp+1008]
 push edx
 push ecx
 call clearline
 add esp,[ebp+940]
lalcfive: mov ecx,[ebx+y]
 cmp ecx,[ebp+968]
 js lalcsix
 mov edx,[ebx+afilelen]
 cmp edx,[ebx+y]
 js lalcsix
 mov edi,[ebx+y]
 mov edx,[ebp+968]
 mov ecx,[ebp+952]
 mov eax,[ebp+1008]
 push edi
 push edx
 push ecx
 push eax
 call rw8056
 mov edx,[ebp+940]
 add edx,edx
 add esp,edx
lalcsix: mov edx,esi
 sub edx,964
 add esp,edx
 pop eax
 pop ecx
 pop edx
 pop ebx
 pop esi
 pop edi
 pop ebp
 ret
; bottom of lalocal12
; laput12(lnes* lput)
; 1000 ebp    1004 retad    1008 *lput
; 988 ebx    992 esi       996 edi
; 976 eax    980 ecx       984 edx
; 964 2    968 1     972 0
; 952 5    956 4    960 putae
; 940 8    944        948 6
; 928        932           936
; 916        920           924 12
laput12: push ebp
 mov ebp,esp
 sub ebp,1000
 push edi
 push esi
 push ebx
 push edx
 push ecx
 push eax
 xor esi,esi
 add esi,1000
 mov ecx,esi
 mov edx,esi
 xor edi,edi
 sub ecx,985
 sub edx,999
laww12pu: push edi
 add edi,edx
 sub ecx,edx
 jnz laww12pu
 mov ebx,[ebp+1008]
 sub ebx,8192
 mov edi,[ebx+y]
 add edi,[ebp+968]
 mov [ebp+960],edi
 cmp edi,[ebp+964]
 jns laput13
 jmp nonput48
laput13: mov ecx,[ebx+chnext]
 cmp ecx,[ebp+972]
 jz nonput36
laput15: mov edi,[ebp+960]
 mov edx,[ebp+964]
 mov ecx,[ebp+948]
 mov eax,[ebp+1008]
 push edi
 push edx
 push ecx
 push eax
 call rw8056
 mov ecx,[ebp+940]
 add ecx,ecx
 add esp,ecx
 mov ecx,[ebx+afilelen]
 mov edx,[ebp+960]
 cmp ecx,edx
 jns nonput36
 mov [ebx+afilelen],edx
nonput36: mov edi,[ebx+y]
 mov edx,[ebp+968]
 mov ecx,[ebp+948]
 mov eax,[ebp+1008]
 push edi
 push edx
 push ecx
 push eax
 call rw8056
 mov edi,[ebp+940]
 add edi,edi
 add esp,edi
 mov edi,[ebx+y]
 mov edx,[ebx+afilelen]
 cmp edx,edi
 jns nonput48
 mov [ebx+afilelen],edi
nonput48: mov edi,[ebp+972]
 mov [ebx+chnext],edi
 mov [ebx+chzerv],edi
 mov ecx,esi
 sub ecx,940
 add esp,ecx
 pop eax
 pop ecx
 pop edx
 pop ebx
 pop esi
 pop edi
 pop ebp
 ret
; bottom of laput12
; int dlenval(lnes *den,int leub)
; 1004 retad    1008 *den    1012 leub
; 992 esi    996 edi    1000 ebp
; 980 ecx    984 edx    988 ebx
; 968 1        972 0        976 eax
; 956 4        960 3        964 2
; 944 7        948 6        952 5
; 932 cst32    936        940 8
; 920 13        924 12       928 spfixlast
dlenval: push ebp
 mov ebp,esp
 sub ebp,1000
 push edi
 push esi
 push ebx
 push edx
 push ecx
 xor edi,edi
 add edi,1000
 mov ecx,edi
 mov edx,edi
 xor ebx,ebx
 push ebx
 sub ecx,986
 sub edx,999
 mov eax,ecx
 add eax,eax
 add eax,eax
dlenpu: push ebx
 add ebx,edx
 sub ecx,edx
 jnz dlenpu
 mov [ebp+928],eax
 mov ecx,edi
 sub ecx,968
 mov [ebp+932],ecx
 mov edi,[ebp+1008]
 sub edi,8192
 lea ebx,[edi+crz0160]
 sub ebx,2048
 mov ecx,[edi+a80w]
 mov edx,[ebp+1012]
 sub edx,[ebp+968]
 jns dlen18
dlen16: xor edi,edi
 jz dlenbot
dlen18: mov edi,ecx
 push edx
 push ecx
 call nampy
 add esp,[ebp+940]
 add ebx,eax
 mov eax,[ebp+968]
dlenloop: mov esi,edi
 sub esi,eax
 js dlenbot
 xor edx,edx
 mov dl,[ebx+esi*1+2048]
 mov ecx,[ebp+932]
 cmp ecx,edx
 js dlenbot
 mov edi,esi
 xor esi,esi
 jz dlenloop
dlenbot: mov [ebp+976],edi
 add esp,[ebp+928]
 pop eax
 pop ecx
 pop edx
 pop ebx
 pop esi
 pop edi
 pop ebp
 ret
; bottom of dlenval
; aptinsert(*lnes seratwo,int inserfromd)
; 1004 retad    1008 *seratwo    1012 inserfromd
; 992 esi    996 edi    1000 ebp
; 976 eax    980 ecx    984 edx    988 ebx
; 960 3    964 2    968 1    972 0
; 944 7    948 6    952 5    956 4
; 928 flnext    932 espsave    936    940 8
; 912        916        920 yl    924 yh
; 896 delwid    900 yelctrl    904 delmanytemp    908 16
; 880 23    884 dhowmany    888 limdel    892 20
; inserfromd >= 0 for where to get insertable line
; inserfromd < 0 for - how many lines to delete
aptinsert: push ebp
 mov ebp,esp
 sub ebp,1000
 push edi
 push esi
 push ebx
 push edx
 push ecx
 push eax
 xor esi,esi
 add esi,1023
 mov edx,esi
 mov ecx,esi
 sub edx,1022
 sub ecx,999
 mov eax,ecx
 add eax,eax
 add eax,eax
 xor ebx,ebx
aptintpu: push ebx
 add ebx,edx
 sub ecx,edx
 jnz aptintpu
 mov [ebp+932],eax
 mov edi,[ebp+1008]
 mov ebx,edi
 sub ebx,8192
 mov ecx,[ebx+y]
 cmp ecx,[ebp+968]
 js aptfaila
 mov ecx,[ebp+1012]
 cmp ecx,[ebp+972]
 jns aptinsertop
 xor eax,eax
 jz aptdeletea
aptfaila: xor eax,eax
 jz aptfailb
aptinsertop: mov esi,[ebx+afilelen]
aptinsshove: mov edx,[ebp+956]
 mov ecx,[ebp+952]
 cmp esi,[ebx+y]
 js aptinsowrt
 push esi
 push edx
 push ecx
 push edi
 call rw8056
 add esp,[ebp+908]
 mov eax,[ebp+968]
 add ecx,eax
 add eax,esi
 push eax
 push edx
 push ecx
 push edi
 call rw8056
 add esp,[ebp+908]
 sub esi,[ebp+968]
 xor eax,eax
 jz aptinsshove
aptfailb: xor eax,eax
 jz aptfailc
aptdeletea: xor eax,eax
 jz aptdeleteb
aptinsowrt: mov esi,[ebx+y]
 mov eax,[ebp+1012]
 mov ecx,[ebp+948]
 mov edx,[ebp+968]
; ecx tempdelwid   esi yelctrl  edx templimdel
 add [ebx+afilelen],edx
 push esi
 push eax
 push ecx
 push edi
 call rw8056
 add esp,[ebp+908]
 add [ebx+y],edx
aptfailc: xor eax,eax
 jz aptfaild
aptdeleteb: xor ecx,ecx
 sub ecx,[ebp+1012]
 mov esi,[ebx+y]
 mov edx,[ebp+968]
 add edx,[ebx+afilelen]
 sub edx,[ebx+y]
 js aptfailc
 mov eax,ecx
 sub eax,edx
 js delwidmake
 mov ecx,edx
delwidmake: mov [ebp+896],ecx
 xor eax,eax
 jz aptdeltoop
aptfaild: xor eax,eax
 jz aptfaile
aptdeltoop: mov eax,esi
 add eax,[ebp+896]
 cmp eax,[ebx+afilelen]
 jg aptdelshrfl
 mov ecx,[ebp+960]
 mov edx,[ebp+952]
 push eax
 push ecx
 push edx
 push edi
 call rw8056
 add esp,[ebp+908]
 mov edx,[ebp+948]
 push esi
 push ecx
 push edx
 push edi
 call rw8056
 add esp,[ebp+908]
 add esi,[ebp+968]
 xor eax,eax
 jz aptdeltoop
aptfaile: xor eax,eax
 jz aptfailf
aptdelshrfl: mov edx,[ebx+afilelen]
 sub edx,[ebp+896]
 mov [ebx+afilelen],edx
aptfailf: add esp,[ebp+932]
 pop eax
 pop ecx
 pop edx
 pop ebx
 pop esi
 pop edi
 pop ebp
 ret
; end of summer 2011 aptinsert
; void ikx1864(lnes* rayloc5,int keychr1,int alselone)
; 1004 retad    1008 *rayloc5    1012 keychr1    1016 alselone
; 988 ebx    992 esi    996 edi    1000 ebp
; 972 -1     976 eax    980 ecx    984 edx
; 956 3    960 2    964 1    968 0
; 940 7    944 6    948 5    952 4
; 924 11    928 10     932 9      936 8
; 908 15    912 albase1    916 fixespikx    920 12
; 892 19    896 lval1    900 iisubc    904 16
; 876 23    880 cc1      884 filtkeychr    888 20
; 860 ikxchoose    864 ikxcontinue    868 oneikxj    872 24
; 844 31    848 ikxdex    852 raylocwhere    856 28
; 828 35    832 ikxcode    836 fstabrez    840 32
; 812    816    820    824 36
; 796    800    804    808 40
; 780 47    784    788    792 44
ikx1864: push ebp
 mov ebp,esp
 sub ebp,1000
 push edi
 push esi
 push ebx
 push edx
 push ecx
 push eax
 xor esi,esi
 add esi,1049
 mov edx,esi
 mov ecx,esi
 mov edi,esi
 sub edi,1050
 sub edx,1048
 sub ecx,1000
 mov eax,ecx
 add eax,eax
 add eax,eax
ikx186pu: push edi
 add edi,edx
 sub ecx,edx
 jnz ikx186pu
 mov [ebp+916],eax
 mov esi,[ebp+1008]
 sub esi,8192
 lea edx,[esi+crz0160]
 sub edx,1024
 mov [ebp+852],edx
 mov ecx,[ebp+1016]
 mov [esi+alsel],ecx
 xor edx,edx
 mov [ebp+848],edx
 mov edx,[esi+alsel]
 mov ecx,[ebp+1008]
 push edx
 push ecx
 call dlenval
 add esp,[ebp+936]
 mov [ebp+896],eax
 mov edx,[esi+insertype]
 cmp edx,[ebp+968]
 jz ikxnon8
 mov ecx,[ebp+936]
 add [ebp+848],ecx
ikxnon8: mov edx,[ebp+948]
 cmp edx,[esi+alsel]
 jns ikxnon4
 mov ecx,[ebp+952]
 add [ebp+848],ecx
ikxnon4: mov edx,[esi+a80w]
 sub edx,[ebp+964]
 cmp edx,[ebp+896]
 jns ikxnon2
 mov ecx,[ebp+960]
 add [ebp+848],ecx
ikxnon2: mov edx,[esi+a80w]
 sub edx,[ebp+964]
 cmp edx,[esi+x]
 jns ikxnon1
 mov ecx,[ebp+964]
 add [ebp+848],ecx
ikxnon1: xor edx,edx
 push edx
 call getreala
 add esp,[ebp+952]
 mov [ebp+832],eax
 xor edi,edi
 lea ebx,[edi+fstab1864]
 add ebx,[ebp+832]
 sub ebx,3000
 mov edi,[ebp+848]
 mov ecx,[ebx+edi*4+3000]
 mov [ebp+836],ecx
 mov edx,[esi+alsel]
 cmp edx,[ebp+964]
 jnz notikx1408
 mov edx,[ebp+960]
 mov ecx,[ebp+1008]
 push edx
 push ecx
 call clearline
 add esp,[ebp+936]
 mov ecx,[ebp+964]
 mov [esi+chdoc],ecx
notikx1408: xor edi,edi
 mov [esi+inspg],edi
 mov edx,[esi+alsel]
 mov ecx,[ebp+948]
 cmp ecx,edx
 jns nonikx1409
 sub edx,[ebp+964]
 mov ecx,[esi+a80w]
 push edx
 push ecx
 call nampy
 add esp,[ebp+936]
 add edi,eax
nonikx1409: mov [ebp+912],edi
 add edi,[esi+x]
 sub edi,[ebp+964]
 mov [ebp+900],edi
 mov ecx,[ebp+964]
 mov [esi+chzerv],ecx
 mov edx,[ebp+968]
 mov [esi+chnext],edx
 mov ecx,[ebp+836]
 and ecx,[ebp+936]
 jz ikxvot8
 xor edx,edx
 add edx,3255
 sub edx,3000
 mov ecx,[ebp+1008]
 push edx
 push ecx
 call iek2000
 add esp,[ebp+936]
 mov edx,[ebp+964]
 mov [esi+inspg],edx
ikxvot8: mov ecx,[ebp+836]
 and ecx,[ebp+952]
 jnz ikxisfour
ikxrot4: jmp ikxvot4
ikxisfour: mov edx,[esi+x]
 cmp edx,[esi+a80w]
 js ikxrot4
 mov ecx,[ebp+840]
 mov edx,[ebp+1012]
; xxxxxxxxxxxx
 mov [ebp+884],ecx
 cmp edx,ecx
 js ikxorange
 xor ecx,ecx
 add ecx,1127
 sub ecx,1000
 cmp edx,ecx
 jns ikxorange
 mov [ebp+884],edx
ikxorange: mov ebx,[ebp+852]
 mov edi,[ebp+900]
 mov edx,[ebp+884]
 mov [ebx+edi*1+1024],dl
 mov edx,[ebp+960]
 mov ecx,[ebp+1008]
 push edx
 push ecx
 call gek2040
 add esp,[ebp+936]
 mov ecx,[ebp+964]
 mov [esi+insel],ecx
 mov edx,[ebp+964]
 mov ecx,[ebp+1008]
 push edx
 push ecx
 call clearline
 add esp,[ebp+936]
 mov edx,[esi+insel]
 mov ecx,[ebp+1008]
 push edx
 push ecx
 call aptinsert
 add esp,[ebp+936]
 mov ecx,[esi+y]
 sub ecx,[ebp+964]
 mov [esi+y],ecx
 mov edx,[ebp+964]
 mov [esi+inspg],edx
ikxvot4: mov ecx,[ebp+836]
 and ecx,[ebp+960]
 jz ikxvot2
 mov ecx,[ebp+896]
 mov [ebp+880],ecx
ikxloop4: mov edx,[ebp+880]
 cmp edx,[esi+x]
 js ikxvot2
 mov edi,[ebp+912]
 add edi,[ebp+880]
 sub edi,[ebp+964]
 mov ebx,[ebp+852]
 xor edx,edx
 mov dl,[ebx+edi*1+1024]
 add edi,[ebp+964]
 mov [ebx+edi*1+1024],dl
 mov ecx,[ebp+880]
 sub ecx,[ebp+964]
 mov [ebp+880],ecx
 xor edx,edx
 jz ikxloop4
ikxvot2: mov ecx,[ebp+836]
 and ecx,[ebp+964]
; jnz ikxvoot93
 jz ikxvot1
ikxvoot93: mov ecx,[ebp+840]
 mov edx,[ebp+1012]
 mov [ebp+884],ecx
 cmp edx,ecx
 js ikxgreen
 xor ecx,ecx
 add ecx,1127
 sub ecx,1000
 cmp edx,ecx
 jns ikxgreen
 mov [ebp+884],edx
ikxgreen: mov ebx,[ebp+852]
 mov edi,[ebp+900]
 mov edx,[ebp+884]
 mov [ebx+edi*1+1024],dl
 mov ecx,[ebp+964]
 add [esi+x],ecx
 mov edx,[ebp+948]
 cmp edx,[esi+alsel]
 js ikxvot1
 mov ecx,[ebp+1008]
 push ecx
 call laput12
 add esp,[ebp+952]
ikxvot1: xor edi,edi
 add esp,[ebp+916]
 pop eax
 pop ecx
 pop edx
 pop ebx
 pop esi
 pop edi
 pop ebp
 ret
; bottom of ikx1864
; iek2000(lnes* rayloc2, int nzkey)
; 1004 retad    1008 *rayloc2    1012 nzkey
; 992 esi    996 edi    1000 ebp
; 980 ecx    984 edx    988 ebx
; 968 1    972 0    976 eax
; 956 4    960 3    964 2
; 944 7    948 6    952 5
; 932 10    936 9    940 8
; 920 erxsub    924 12    928 erd
; 908 16    912 ercmp    916 erchk
; 896 fixspiek    900 raywhere    904 albase2
; 884 22    888 21    892 20
iek2000: push ebp
 mov ebp,esp
 sub ebp,1000
 push edi
 push esi
 push ebx
 push edx
 push ecx
 push eax
 xor esi,esi
 add esi,1023
 mov ecx,esi
 mov edx,esi
 xor ebx,ebx
 sub ecx,1000
 sub edx,1022
 mov eax,ecx
 add eax,eax
 add eax,eax
iek20pu: push ebx
 add ebx,edx
 sub ecx,edx
 jnz iek20pu
 mov [ebp+896],eax
 mov esi,[ebp+1008]
 sub esi,8192
 lea ecx,[esi+crz0160]
 sub ecx,2048
 mov [ebp+900],ecx
 xor edx,edx
 mov [ebp+904],edx
 mov ecx,[esi+a80w]
 mov [ebp+928],ecx
 mov edx,[esi+x]
 sub edx,[ebp+968]
 mov [ebp+920],edx
 mov edx,[ebp+964]
 mov ecx,[ebp+1008]
 push edx
 push ecx
 call clearline
 add esp,[ebp+940]
 mov edx,[ebp+968]
 mov [esi+alsel],edx
 xor ecx,ecx
 mov [ebp+916],ecx
iek22loop: mov edx,[ebp+920]
 cmp edx,[esi+a80w]
 jns iek22bot
 xor edx,edx
 mov ebx,[ebp+900]
 mov edi,[ebp+920]
 mov dl,[ebx+edi*1+2048]
 mov [ebp+912],edx
 mov ecx,[ebp+932]
 add ecx,[ebp+884]
 cmp ecx,[ebp+912]
 jz iek21bot
 mov ecx,[ebp+968]
 mov [ebp+916],ecx
 xor ecx,ecx
 jz iek21bot
iek4304: xor edx,edx
 jz iek22loop
iek22bot: xor ecx,ecx
 jz iek23bot
iek21bot: mov edx,[ebp+912]
 mov edi,[ebp+928]
 mov ebx,[ebp+900]
 mov [ebx+edi*1+2048],dl
 mov edi,[ebp+920]
 mov edx,[ebp+932]
 add edx,[ebp+884]
 mov [ebx+edi*1+2048],dl
 mov ecx,[ebp+968]
 mov edx,ecx
 add [ebp+928],ecx
 add [ebp+920],edx
 xor edx,edx
 jz iek4304
iek23bot: mov edx,[ebp+1012]
 cmp edx,[ebp+972]
 jz iek25top
 mov edx,[ebp+916]
 cmp edx,[ebp+972]
 jnz iek25top
 jmp iek30bot
iek25top: mov edx,[ebp+968]
 add [esi+y],edx
 mov ecx,[ebp+964]
 mov [esi+insel],ecx
 mov edx,[esi+insel]
 mov ecx,[ebp+1008]
 push edx
 push ecx
 call aptinsert
 add esp,[ebp+940]
 mov edx,[esi+insel]
 mov ecx,[ebp+1008]
 push edx
 push ecx
 call dlenval
 add esp,[ebp+940]
 cmp eax,[ebp+972]
 jz iek27
 mov ecx,[ebp+968]
 mov [esi+marginselect],ecx
iek27: mov edx,[ebp+964]
 mov ecx,[ebp+1008]
 push edx
 push ecx
 call clearline
 add esp,[ebp+940]
 mov edx,[esi+y]
 sub edx,[ebp+964]
 mov [esi+y],edx
 mov ecx,[ebp+968]
 mov [esi+alsel],ecx
iek30bot: xor edi,edi
 add esp,[ebp+896]
 pop eax
 pop ecx
 pop edx
 pop ebx
 pop esi
 pop edi
 pop ebp
 ret
; bottom of iek2000
; gek2040(lnes* rayloc4,int zurtwo)
; 1004 retad    1008 *rayloc4    1012 zurtwo
; 992 esi    996 edi    1000 ebp
; 980 ecx    984 edx    988 ebx
; 968 1    972 0    976 eax
; 956 4    960 3    964 2
; 944 7    948 gekspfix    952 5
; 932 10    936 rr2040    940 8
gek2040: push ebp
 mov ebp,esp
 sub ebp,1000
 push edi
 push esi
 push ebx
 push edx
 push ecx
 push eax
 xor esi,esi
 add esi,1000
 mov ecx,esi
 mov edx,esi
 xor edi,edi
 sub ecx,989
 mov eax,ecx
 add eax,eax
 add eax,eax
; mov [ebp+948],eax
 sub edx,999
gek204pu: push edi
 add edi,edx
 sub ecx,edx
 jnz gek204pu
 mov [ebp+948],eax
 mov ebx,[ebp+1008]
 sub ebx,8192
 mov ecx,[ebp+1012]
 cmp ecx,[ebp+972]
 jnz noniek2041
 mov edx,[ebp+972]
 mov ecx,[ebp+1008]
 push edx
 push ecx
 call iek2000
 add esp,[ebp+940]
noniek2041: mov edx,[ebp+972]
 mov [ebx+chnext],edx
 mov ecx,[ebp+1008]
 push ecx
 call laput12
 add esp,[ebp+956]
 mov ecx,[ebx+marginselect]
 mov edx,[ebp+968]
; ecx marginselect    or    edx 1    for x
 mov [ebx+x],ecx
 mov ecx,[ebx+y]
 add ecx,[ebp+968]
 mov [ebx+y],ecx
 add esp,[ebp+948]
 pop eax
 pop ecx
 pop edx
 pop ebx
 pop esi
 pop edi
 pop ebp
 ret
; bottom of gek2040
; dkx2050(lnes *rayloc4, int deltype44)
; 1004 retad    1008 *rayloc4    1012 deltype44
; 988 ebx    992 esi    996 edi    1000 ebp
; 972 0    976 eax    980 ecx    984 edx
; 956 4    960 3    964 2    968 1
; 940 8    944 7    948 6    952 5
; 924 12   928 11    932 10    936 9
; 908 16   912 15    916 14    920 13
; 892 20    896 ix4    900 lval4    904 fixdkxsp
; 876 24    880 deldisp    884 cc4    888 tnydeltype
; 860 28    864 dd4    868 26    872 deltype
; 844 32    848 delgcm    852 30    856 delgtl
; 828 36    832 albase4    836 isi4    840 iisub4
; 812 40    816 39    820 38    824 whereray4
; 796 44    800 43    804 42    808 41
; 780 48    784 47    788 46    792 45
dkx2050: push ebp
 mov ebp,esp
 sub ebp,1000
 push edi
 push esi
 push ebx
 push edx
 push ecx
 push eax
 xor esi,esi
 add esi,1049
 mov ecx,esi
 mov edx,esi
 xor edi,edi
 sub ecx,1000
 mov eax,ecx
 add eax,eax
 add eax,eax
 sub edx,1048
dkx205pu: push edi
 add edi,edx
 sub ecx,edx
 jnz dkx205pu
 mov [ebp+904],eax
 mov esi,[ebp+1012]
 mov [ebp+872],esi
 mov ebx,[ebp+908]
 push ebx
 push esi
 call smposdiv
 add esp,[ebp+940]
 push eax
 push ebx
 call nampy
 add esp,[ebp+940]
 sub esi,eax
 mov [ebp+888],esi
 xor esi,esi
 lea ebx,[esi+chdelval]
 xor ecx,ecx
 push ecx
 call getreala
 add esp,[ebp+956]
 add ebx,eax
 sub ebx,512
 mov edi,[ebp+888]
 mov ecx,[ebx+edi*4+512]
 mov [ebp+856],ecx
 mov esi,[ebp+1008]
 sub esi,8192
 lea ecx,[esi+crz0160]
 sub ecx,2048
 mov [ebp+824],ecx
 mov edx,[ebp+856]
 cmp edx,2156
 jnz non2156
 mov ecx,[ebp+968]
 mov [esi+alsel],ecx
 mov [esi+chdoc],ecx
 xor edi,edi
 add edi,2142
 mov [ebp+856],edi
 mov ecx,[ebp+968]
 cmp ecx,[esi+x]
 js isdkxe2158
 cmp ecx,[esi+y]
 jns non2156
isdkxe2158: xor edi,edi
 add edi,2158
 mov [ebp+856],edi
non2156: mov edx,[ebp+856]
 cmp edx,2158
 jnz non2158
 mov edi,[esi+x]
 sub edi,[ebp+968]
 mov [esi+x],edi
 xor ebx,ebx
 mov [esi+inspg],ebx
 mov [ebp+832],ebx
 add ebx,2054
 mov [ebp+856],ebx
 mov ecx,[esi+x]
 cmp ecx,[ebp+968]
 jns non2158
 xor edx,edx
 add edx,2162
 mov [ebp+856],edx
 mov ecx,[ebp+968]
 mov [esi+x],ecx
non2158: mov edx,[ebp+856]
 cmp edx,2162
 jnz non2162
 mov edi,[ebp+968]
 mov [esi+inspg],edi
 xor ecx,ecx
 add ecx,2167
 mov [ebp+856],ecx
 cmp edi,[esi+y]
 js non2162
 mov [esi+x],edi
 mov [esi+y],edi
 xor ecx,ecx
 add ecx,2055
 mov [ebp+856],ecx
non2162: mov edx,[ebp+856]
 cmp edx,2167
 jnz non2167
 mov ecx,[esi+y]
 mov edi,[ebp+968]
 sub ecx,edi
 mov [esi+y],ecx
 mov ebx,[ebp+1008]
 push ebx
 call lalocal12
 add esp,[ebp+956]
 mov edx,[esi+alsel]
 push edx
 push ebx
 call dlenval
 add esp,[ebp+940]
 mov [ebp+900],eax
 add eax,edi
 mov [esi+x],eax
 mov ecx,[ebp+888]
 mov [ebp+872],ecx
 xor edx,edx
 add edx,2055
 mov [ebp+856],edx
 mov ecx,[esi+a80w]
 cmp ecx,[esi+x]
 jns non2167
 mov [esi+x],ecx
non2167: mov edx,[ebp+856]
 cmp edx,2050
 jnz non2050
 mov edx,[ebp+968]
 mov [esi+alsel],edx
 xor ecx,ecx
 add ecx,2054
 mov [ebp+856],ecx
non2050: mov edx,[ebp+856]
 cmp edx,2054
 jnz non2054
 xor ebx,ebx
 mov [esi+inspg],ebx
 xor ecx,ecx
 add ecx,2055
 mov [ebp+856],ecx
non2054: mov edx,[ebp+856]
 cmp edx,2055
 jz isdk2055
 jmp non2055
isdk2055: mov edi,[ebp+968]
 mov [esi+chzerv],edi
 xor ebx,ebx
 mov [ebp+832],ebx
 mov [esi+chnext],ebx
 mov ecx,[ebp+832]
 add ecx,[esi+x]
 sub ecx,edi
 mov [ebp+840],ecx
 xor ecx,ecx
 add ecx,2067
 mov [ebp+856],ecx
 mov edx,[ebp+952]
 cmp edx,[esi+alsel]
 js setdk2070
 cmp ebx,[esi+insertype]
 jz skipkx2070
setdk2070: xor edx,edx
 add edx,2070
 mov [ebp+856],edx
skipkx2070: mov ecx,[ebp+856]
 cmp ecx,2067
 jnz non2055
 mov ebx,[ebp+824]
 mov edx,[ebp+844]
 mov edi,[ebp+840]
 mov [ebx+edi*1+2048],dl
non2055: mov edx,[ebp+856]
 cmp edx,2070
 jz isdk2070
 jmp non2070
isdk2070: mov edx,[esi+alsel]
 mov ecx,[ebp+1008]
 push edx
 push ecx
 call dlenval
 add esp,[ebp+940]
 mov [ebp+900],eax
 xor ecx,ecx
 add ecx,2075
 mov [ebp+856],ecx
 mov edx,[ebp+952]
 mov ecx,[ebp+780]
 add ecx,[ebp+912]
 cmp edx,[esi+alsel]
 js setdk2076
 cmp ecx,[ebp+872]
 jns skipkx2076
setdk2076: xor edx,edx
 add edx,2076
 mov [ebp+856],edx
skipkx2076: mov ecx,[ebp+856]
 cmp ecx,2075
 jnz skipkx2096
 mov edx,[ebp+900]
 cmp edx,[esi+x]
 jns skipkx2096
 xor ecx,ecx
 add ecx,2096
 mov [ebp+856],ecx
skipkx2096: mov edx,[ebp+856]
 cmp edx,2095
 jns skipkx2084
 xor ecx,ecx
 add ecx,2084
 mov [ebp+856],ecx
skipkx2084: mov edx,[ebp+856]
 cmp edx,2084
 jz startik2084
ron2084: jmp non2084
startik2084: mov ecx,[esi+x]
 mov [ebp+896],ecx
loop2084top: mov ecx,[ebp+856]
 cmp ecx,2084
 jnz ron2084
 mov edx,[ebp+832]
 add edx,[ebp+896]
 sub edx,[ebp+968]
 mov [ebp+836],edx
 mov ecx,[ebp+896]
 cmp ecx,[ebp+900]
 js skipkx2090
 xor edx,edx
 add edx,2090
 mov [ebp+856],edx
skipkx2090: mov edx,[ebp+856]
 cmp edx,2084
 jnz ron2084
 mov ebx,[ebp+824]
 xor edx,edx
 mov edi,[ebp+836]
 mov ecx,[ebp+968]
 add edi,ecx
 mov dl,[ebx+edi*1+2048]
 sub edi,ecx
 mov [ebx+edi*1+2048],dl
 add [ebp+896],ecx
 xor ecx,ecx
 jz loop2084top
non2084: mov edx,[ebp+856]
 cmp edx,2090
 jnz non2070
 mov ebx,[ebp+824]
 mov edx,[ebp+844]
 mov edi,[ebp+836]
 mov [ebx+edi*1+2048],dl
 xor ecx,ecx
 add ecx,2067
 mov [ebp+856],ecx
non2070: mov edx,[ebp+856]
 cmp edx,2096
 jz isk2096
 jmp non2096
isk2096: mov ecx,[ebp+968]
 add ecx,[esi+a80w]
 sub ecx,[esi+x]
 mov [ebp+880],ecx
 mov edx,[ebp+968]
 mov [esi+alsel],edx
 xor ebx,ebx
 mov [ebp+832],ebx
 mov edx,[esi+x]
 mov [ebp+896],edx
 xor ecx,ecx
 add ecx,2106
 mov [ebp+856],ecx
loop2106: mov edx,[ebp+856]
 cmp edx,2106
 jz isdk2106
ron2106: jmp non2106
isdk2106: mov ecx,[ebp+896]
 sub ecx,[ebp+968]
 mov [ebp+884],ecx
 add ecx,[ebp+880]
 mov [ebp+864],ecx
 xor ecx,ecx
 add ecx,2112
 mov [ebp+856],ecx
 mov edx,[ebp+884]
 cmp edx,[esi+a80w]
 jns check22106
 xor ecx,ecx
 add ecx,2106
 mov [ebp+856],ecx
check22106: mov edx,[ebp+856]
 cmp edx,2106
 jnz ron2106
 mov ecx,[ebp+832]
 add ecx,[ebp+864]
 mov [ebp+836],ecx
 xor edx,edx
 mov ebx,[ebp+824]
 mov edi,[ebp+836]
 mov dl,[ebx+edi*1+2048]
 mov edi,[ebp+832]
 add edi,[ebp+884]
 mov [ebx+edi*1+2048],dl
 mov ecx,[ebp+968]
 add [ebp+896],ecx
 jmp loop2106
non2106: mov ecx,[ebp+880]
 mov [ebp+896],ecx
loop2107: mov ecx,[ebp+896]
 cmp ecx,[ebp+972]
 jz bot2107
 mov edx,[ebp+832]
 add edx,[ebp+884]
 mov [ebp+836],edx
 mov eax,[ebp+844]
 mov ebx,[ebp+824]
 mov edi,[ebp+836]
 mov [ebx+edi*1+2048],al
 mov ecx,[ebp+968]
 add [ebp+884],ecx
 mov edx,[ebp+896]
 sub edx,[ebp+968]
 mov [ebp+896],edx
 xor ecx,ecx
 jz loop2107
bot2107: xor edx,edx
 mov [ebp+896],edx
 add edx,2122
 mov [ebp+856],edx
loop2122: mov edx,[ebp+856]
 cmp edx,2122
 jz isdk2122
 jmp non2122
isdk2122: mov ecx,[esi+a80w]
 add ecx,[ebp+896]
 mov [ebp+884],ecx
 add ecx,[ebp+832]
 mov [ebp+836],ecx
 xor edx,edx
 add edx,2130
 mov [ebp+856],edx
 xor edx,edx
 mov ebx,[ebp+824]
 mov edi,[ebp+836]
 mov dl,[ebx+edi*1+2048]
 mov [ebp+848],edx
 cmp edx,[ebp+844]
 jz skip2108
 mov ecx,[ebp+968]
 mov [esi+inspg],ecx
 mov [esi+chnext],ecx
 xor edx,edx
 add edx,2067
 mov [ebp+856],edx
skip2108: mov edx,[ebp+856]
 cmp edx,2130
 jnz non2130
 mov edx,[ebp+896]
 add edx,[ebp+968]
 mov [ebp+896],edx
 xor ecx,ecx
 add ecx,2135
 mov [ebp+856],ecx
 mov edx,[ebp+896]
 cmp edx,[esi+a80w]
 jns non2130
 xor ecx,ecx
 add ecx,2122
 mov [ebp+856],ecx
non2130: jmp loop2122
non2122: mov edx,[ebp+856]
 cmp edx,2135
 jnz non2096
 mov edi,[esi+y]
 add edi,[ebp+968]
 mov [esi+y],edi
 xor edx,edx
 sub edx,[ebp+968]
 mov ecx,[ebp+1008]
 push edx
 push ecx
 call aptinsert
 add esp,[ebp+940]
 mov edi,[ebp+968]
 mov [esi+inspg],edi
 mov ecx,[esi+y]
 sub ecx,edi
 mov [esi+y],ecx
 xor edx,edx
 add edx,2067
 mov [ebp+856],edx
non2096: mov ecx,[ebp+856]
 cmp ecx,2067
 jnz non2067
 mov edx,[ebp+952]
 cmp edx,[esi+alsel]
;    value of alsel
 js non2067
 mov ecx,[ebp+1008]
 push ecx
 call laput12
 add esp,[ebp+956]
non2067: xor ebx,ebx
 add esp,[ebp+904]
 pop eax
 pop ecx
 pop edx
 pop ebx
 pop esi
 pop edi
 pop ebp
 ret
; end of dkx2050
; pairprline(lnes* tinyroy,int tinyboy, int rprlnumber,
;                        int curposone, int curpostwo);
; 1012 rprlnumber    1016 curposone    1020 curpostwo
; 1000 ebp    1004 *tinyroy    1008 tinyboy
; *** ERROR *** Forgot to insert retad at [ebp+1004]
; 1024 curpostwo
; 1012 tinyboy   1016 rprlnumber    1020 curposone
; 1000 ebp    1004 retad       1008 * tinyroy
; 984 edx    988 ebx    992 esi    996 edi
; 968 1    972 0    976 eax    980 ecx
; 952 5    956 4    960 3    964 2
; 936 9    940 8    944    948 rprtargline
; 920 13    924 12    928    932 rprtargad
; 904 17    908 16    912 wherecrz   916 rprsrcad
; 888 21    892 20    896 19    900 whereevwr
pairprline: push ebp
 mov ebp,esp
 sub ebp,1000
 push edi
 push esi
 push ebx
 push edx
 push ecx
 push eax
 xor esi,esi
 add esi,1022
 mov edx,esi
 mov ecx,esi
 sub edx,1021
 sub ecx,1000
 xor edi,edi
pairprpuli: push edi
 add edi,edx
 sub ecx,edx
 jnz pairprpuli
 mov ebx,[ebp+1008]
 sub ebx,8192
 lea ecx,[ebx+crz0160]
 lea edx,[ebx+evwr]
 mov [ebp+912],ecx
 mov [ebp+900],edx
 mov edi,[ebp+1012]
 add edi,[ebp+892]
 sub edi,[ebp+888]
 add edi,[ebp+972]
 mov [ebp+948],edi
 mov edx,[ebp+948]
 mov ecx,[ebx+a80w]
 push edx
 push ecx
 call nampy
 add esp,[ebp+940]
 mov [ebp+932],eax
 mov edx,[ebp+1016]
 sub edx,[ebp+968]
 mov ecx,[ebx+a80w]
 push edx
 push ecx
 call nampy
 add esp,[ebp+940]
 mov [ebp+916],eax
 mov esi,[ebp+916]
 mov edi,[ebp+932]
 sub esi,500
 sub edi,500
 add esi,[ebp+912]
 add edi,[ebp+900]
 mov ecx,[ebx+a80w]
 xor edx,edx
 mov eax,[ebp+968]
pairprloop: mov dl,[esi+500]
 mov [edi+500],dl
 add esi,eax
 add edi,eax
 sub ecx,eax
 jnz pairprloop
 mov ecx,[ebp+1016]
 cmp ecx,[ebp+952]
 jnz norpcursor
 mov edx,[ebp+972]
 cmp edx,[ebp+1020]
 jns norpcursor
 mov edi,[ebp+1012]
 mov ecx,[ebp+1020]
 mov [ebx+onecurwozx],ecx
 mov [ebx+onecurwozy],edi
 mov ecx,[ebp+972]
 cmp ecx,[ebx+moualglobal]
 jz norpcursor
 cmp ecx,[ebx+mouallocal]
 jz norpcursor
 mov edx,[ebp+1024]
 mov [ebx+twocurwozx],edx
 mov [ebx+twocurwozy],edi
norpcursor: xor edi,edi
 add edi,1088
 sub edi,1000
 add esp,edi
 pop eax
 pop ecx
 pop edx
 pop ebx
 pop esi
 pop edi
 pop ebp
 ret
; bottom of pairprline
; paicvgcline(lnes* icvgcine, int sslselfive,
;                int sposboy, int howmany);
; 1012 sslselfive    1016 sposboy   1020 howmany
; 1000 ebp        1004 retad    1008 *icvgcine
; 984 edx    988 ebx    992 esi    996 edi
; 968 1    972 0    976 eax    980 ecx
; 952 5    956 4    960 3    964 2
; 936 9    940 8    944 7    948 6
; 920 13    924 12    928 mcp    932 moucursorpos
; 904 17    908 16    912 shift    916 z80widthx
; 888 21    892 20    896 yzz    900 ypplh
; 872 25    876 24    880 xzz    884 concolor
; 856 29    860 28    864    868 cvgcpen
; 840 33    844 32    848 fixesp4919    852
paicvgcline: push ebp
 mov ebp,esp
 sub ebp,1000
 push edi
 push esi
 push ebx
 push edx
 push ecx
 push eax
 xor esi,esi
 add esi,1034
 mov edx,esi
 sub edx,1033
 mov ecx,esi
 sub ecx,1000
 xor edi,edi
 mov eax,ecx
 add eax,eax
 add eax,eax
pcicvgliu: push edi
 add edi,edx
 sub ecx,edx
 jnz pcicvgliu
 mov [ebp+848],eax
 xor ecx,ecx
 mov [ebp+932],ecx
 mov [ebp+928],ecx
 mov edx,[ebp+1016]
 mov [ebp+912],edx
 mov [ebp+868],ecx
 mov [ebp+884],ecx
 mov ebx,[ebp+1008]
 sub ebx,8192
 mov edx,[ebp+1012]
 cmp edx,[ebp+952]
 jz gclistart
 jmp gcliskipone
gclistart: mov edx,[ebx+prindiff]
 xor edi,edi
 cmp edx,edi
 jns cvglin11
 mov [ebx+prindiff],edi
cvglin11: mov edx,[ebx+y]
 sub edx,[ebx+prindiff]
 mov [ebx+prinjill],edx
 mov edx,[ebx+ypheight]
 sub edx,[ebx+nznormalend]
 cmp edx,[ebx+prinjill]
 jns cvglin14
 mov edx,[ebx+y]
 add edx,[ebx+nznormalend]
 sub edx,[ebx+ypheight]
 mov [ebx+prindiff],edx
cvglin14: mov edx,[ebx+prinjill]
 cmp edx,[ebp+968]
 jns cvglin16
 mov edx,[ebx+y]
 sub edx,[ebp+968]
 mov [ebx+prindiff],edx
cvglin16: mov edx,[ebx+prindiff]
 add edx,[ebp+1016]
 mov [ebp+900],edx
 mov edx,[ebp+1020]
 cmp edx,[ebp+968]
 js cvglin20
 cmp edx,[ebp+960]
 jns cvglin20
 mov edx,[ebx+y]
 cmp edx,[ebp+900]
 jnz cvglin20
 mov edx,[ebp+968]
 mov [ebp+868],edx
 mov edx,[ebx+x]
 mov [ebp+928],edx
cvglin20: mov edi,[ebp+968]
 cmp edi,[ebp+1020]
 jns cvglin26
 mov [ebp+868],edi
cvglin26: mov edi,[ebp+972]
 cmp edi,[ebp+868]
 jnz cvglin28
cvglin27: jmp gcliskipone
cvglin28: mov edi,[ebp+900]
 mov edx,[ebp+952]
 mov ecx,[ebp+952]
 mov eax,[ebp+1008]
 push edi
 push edx
 push ecx
 push eax
 call rw8056
 add esp,[ebp+908]
 mov edx,[ebp+1020]
 cmp edx,[ebp+960]
 jns cvglin27
 xor edi,edi
 cmp edi,[ebx+moualglobal]
 jz cvglin27
 mov edi,[ebx+prindiff]
 sub edi,[ebx+prindiffprv]
 add edi,[ebx+mouy]
 mov [ebx+mouy],edi
 mov edx,[ebx+prindiff]
 mov [ebx+prindiffprv],edx
 mov ecx,[ebx+mouy]
 sub ecx,[ebp+900]
 cmp ecx,[ebp+972]
 jnz gcliskipone
 mov edx,[ebx+moux]
 cmp edx,[ebp+968]
 js gcliskipone
 mov edx,[ebx+moux]
 mov [ebp+932],edx
gcliskipone: mov edx,[ebp+1012]
 sub edx,[ebp+968]
 cmp edx,[ebp+936]
 jns cvglin40
 cmp edx,[ebp+952]
 js cvglin40
 mov edx,[ebp+968]
 mov [ebp+868],edx
cvglin40: mov ecx,[ebp+868]
 cmp ecx,[ebp+972]
 jz cvgclin70
bvgclin70: mov edx,[ebp+1012]
 cmp edx,[ebp+936]
 jns cvgclin50
 cmp edx,[ebp+948]
 js cvgclin50
 mov ecx,[ebx+x]
 mov [ebp+928],ecx
cvgclin50: mov edi,[ebp+932]
 xor edx,edx
 cmp edx,[ebx+insertype]
 jnz cvgclin53
 xor edi,edi
cvgclin53: mov edx,[ebp+928]
 mov ecx,[ebp+1012]
 mov eax,[ebp+912]
 mov esi,[ebp+1008]
 push edi
 push edx
 push ecx
 push eax
 push esi
 call pairprline
 add esp,[ebp+892]
cvgclin70: add esp,[ebp+848]
 pop eax
 pop ecx
 pop edx
 pop ebx
 pop esi
 pop edi
 pop ebp
 ret
; bottom of paicvgcline
; pachrvgapage(lnes* ghowage, int ghowmany);
; 1000 ebp    1004 ret    1008 *ghowage    1012 ghowmany
; 984 edx    988 ebx    992 esi         996 edi
; 968 1    972 0    976 eax     980 ecx
; 952 5    956 4    960 3    964 2
; 936 9    940 8    944 7    948 6
; 920 13    924 12    928 fixesp5090    932 10
; 904 17    908 16    912 15    916 pavpagectr
pachrvgapage: push ebp
 mov ebp,esp
 sub ebp,1000
 push edi
 push esi
 push ebx
 push edx
 push ecx
 push eax
 xor esi,esi
 add esi,1018
 mov edx,esi
 sub edx,1017
 mov ecx,esi
 sub ecx,1000
 mov eax,ecx
 add eax,eax
 add eax,eax
 xor edi,edi
pachrvgapgu: push edi
 add edi,edx
 sub ecx,edx
 jnz pachrvgapgu
 mov [ebp+928],eax
 mov ebx,[ebp+1008]
 sub ebx,8192
 mov ecx,[ebp+968]
 mov [ebp+916],ecx
pachvploop: mov edi,[ebx+ypheight]
 sub edi,[ebx+nznormalend]
 cmp edi,[ebp+916]
 js pachvpbot
 mov esi,[ebp+1012]
 mov edx,[ebp+916]
 mov ecx,[ebp+952]
 mov eax,[ebp+1008]
 push esi
 push edx
 push ecx
 push eax
 call paicvgcline
 add esp,[ebp+908]
 mov ecx,[ebp+916]
 add ecx,[ebp+968]
 mov [ebp+916],ecx
 xor edi,edi
 jz pachvploop
pachvpbot: xor edi,edi
 add esp,[ebp+928]
 pop eax
 pop ecx
 pop edx
 pop ebx
 pop esi
 pop edi
 pop ebp
 ret
; bottom of pachrvgapage
; udregkey2176(lnes* udbpoint, int udbkeychr)
; 1004 retad    1008 *udbpoint    1012 udbkeychr
; 988 ebx    992 esi    996 edi    1000 ebp
; 972 0    976 eax    980 ecx     984 edx
; 956 4    960 3    964 2    968 1
; 940 8    944 7    948 6    952 5
; 924 12    928 11    932 10    936 9
; 908 16    912 15    916 fixesp    920 peter8max
; 892 20    896 19    900 *bwv2176    904 pete8len
; 876 24    880 23    884 22   888 petro8ctr
; 860 28    864 27    868    872 udregkeyjmp
; 844 32    848 31    852    856 udrkeytype
; 828 36    832 35    836    840 udrkeychr
; 812 40    816 39    820    824 rlkey
; 796 44    800 43    804    808 crzwhere-2048
; 780 48    784 47    788    792 ninewhere
udregkey2176: push ebp
 mov ebp,esp
 sub ebp,1000
 push edi
 push esi
 push ebx
 push edx
 push ecx
 push eax
 xor esi,esi
 add esi,1049
 mov edx,esi
 sub edx,1048
 mov ecx,esi
 sub ecx,1000
 xor edi,edi
 mov eax,ecx
 add eax,eax
 add eax,eax
udregpu2176: push edi
 add edi,edx
 sub ecx,edx
 jnz udregpu2176
 mov [ebp+916],eax
 mov ecx,[ebp+780]
 mov [ebp+856],ecx
 xor edi,edi
 add edi,53098
 mov esi,[ebp+1008]
 sub esi,8192
 lea edx,[esi+crz0160]
 sub edx,2048
 mov [ebp+808],edx
 mov [esi+dagrajmpnow],edi
 xor edi,edi
 add edi,52645
 mov [esi+freddynext],edi
 xor ecx,ecx
 cmp ecx,[esi+nznormalend]
 jnz usr000
 jmp udr009
usr000: mov ecx,[ebp+964]
 add ecx,[ebp+908]
 cmp ecx,[ebp+1012]
 jnz udr000
; ctrl R
 xor edi,edi
 add edi,52733
 mov ecx,[ebp+940]
 mov eax,[ebp+1008]
 push ecx
 push eax
 call dlenval
 add esp,[ebp+940]
 cmp eax,[ebp+968]
 js udvr00
 add edi,[ebp+960]
udvr00: mov [esi+freddynext],edi
udr000: mov ecx,[ebp+876]
 cmp ecx,[ebp+1012]
 jnz udr001
; ctrl X
 xor edi,edi
 add edi,52782
 mov [esi+freddynext],edi
udr001: mov ecx,[ebp+968]
 add ecx,[ebp+876]
 cmp ecx,[ebp+1012]
; ctrl Y
 jnz udr002
 xor edi,edi
 add edi,53072
 mov [esi+freddynext],edi
udr002: mov ecx,[ebp+876]
 sub ecx,[ebp+968]
 cmp ecx,[ebp+1012]
 jnz udr003
; ctrl W Whereis
 xor edi,edi
 add edi,52860
 mov [esi+freddynext],edi
udr003: xor edi,edi
 add edi,52645
 cmp edi,[esi+freddynext]
 jz udr009
 mov ecx,[esi+freddynext]
 mov [esi+dagrajmpnow],ecx
 mov ecx,[esi+y]
 mov [esi+yre],ecx
 xor ecx,ecx
 mov [esi+onecurwozx],ecx
 mov [esi+onecurwozy],ecx
 jmp udrnot2190
udr009: xor ecx,ecx
 add ecx,2176
 mov [ebp+872],ecx
 xor edi,edi
 add edi,3255
 sub edi,3000
 mov ecx,[ebp+1012]
 mov eax,ecx
 and eax,edi
 mov [ebp+840],eax
 cmp edi,ecx
 js udr012
 mov eax,[ebp+968]
 add eax,[ebp+780]
 mov [ebp+856],eax
udr012: xor edx,edx
 add edx,1024
 and edx,ecx
 jz udr014
 mov eax,[ebp+964]
 add eax,[ebp+780]
 mov [ebp+856],eax
udr014: mov eax,[ebp+780]
 cmp eax,[ebp+856]
 jns udr016
 xor edx,edx
 add edx,2192
 mov [ebp+872],edx
udr016: mov edx,[ebp+800]
 mov ecx,[ebp+796]
 cmp edx,ecx
 jnz udr018
 mov edx,[ebp+1008]
 push edx
 call lalocal12
 add esp,[ebp+956]
udr018: mov edx,[ebp+872]
 sub edx,2192
 jnz udrnodel30
 mov edx,[ebp+840]
 cmp edx,[ebp+940]
 jnz udrnodel30
 mov edx,[ebp+844]
 add edx,[ebp+844]
 add edx,[ebp+948]
 mov eax,[ebp+1008]
 push edx
 push eax
 call dkx2050
 add esp,[ebp+940]
 mov edx,[ebp+968]
 mov [esi+chdoc],edx
 add edx,2175
 mov [ebp+872],edx
 xor ecx,ecx
 cmp ecx,[esi+inspg]
 jnz udrnodel30
 mov eax,[ebp+944]
 add edx,eax
 add edx,eax
 mov [ebp+872],edx
udrnodel30: mov edx,[ebp+840]
 mov eax,[ebp+948]
 add eax,[ebp+944]
 cmp edx,eax
 jz udr029
 cmp edx,[ebp+864]
 jnz udr028a
 mov edi,edx
 jmp udr14g
udr028a: cmp edx,[ebp+932]
 jnz udrnoent40
udr029: mov edx,[ebp+872]
 sub edx,2192
 jnz udrnoent40
 xor edx,edx
 mov ecx,[ebp+1008]
 push edx
 push ecx
 call gek2040
 add esp,[ebp+940]
 mov ecx,[ebp+968]
 mov [esi+chdoc],ecx
 mov edx,[esi+marginselect]
 mov [esi+x],edx
 xor ecx,ecx
 add ecx,2176
 mov [ebp+872],ecx
udrnoent40: mov edx,[ebp+872]
 cmp edx,2192
 jnz udr037
 mov edx,[ebp+840]
 cmp edx,[ebp+864]
 jnz udr037
 xor ecx,ecx
 add ecx,2190
 mov [ebp+872],ecx
udr037: mov edx,[ebp+872]
 cmp edx,2192
 jnz udr039
 mov ecx,[ebp+968]
 add ecx,[ebp+780]
 cmp ecx,[ebp+856]
 jz udr040
udr039: jmp noudr1864
udr040: mov edi,[ebp+840]
 mov [ebp+824],edi
 mov ebx,[ebp+844]
 xor edx,edx
 add edx,1127
 sub edx,1000
 cmp edi,ebx
 js udr045
 cmp edi,edx
 jns udr045
 xor eax,eax
 jz udr046
udr045: mov [ebp+824],ebx
udr046: mov eax,[ebp+968]
 mov edx,[ebp+824]
 mov ecx,[ebp+1008]
 push eax
 push edx
 push ecx
 call ikx1864
 add esp,[ebp+924]
 mov ecx,[esi+afilelen]
 cmp ecx,[esi+y]
 jns udr051
 mov edx,[ebp+968]
 mov ecx,[ebp+1008]
 push edx
 push ecx
 call dlenval
 add esp,[ebp+940]
 xor edx,edx
 cmp edx,eax
 jns udr051
 mov ecx,[esi+afilelen]
 add ecx,[ebp+968]
 mov [esi+afilelen],ecx
udr051: xor edx,edx
 add edx,2176
 mov [ebp+872],edx
 xor ecx,ecx
 cmp ecx,[esi+inspg]
 jnz noudr1864
 sub edx,[ebp+932]
 add edx,[ebp+876]
 mov [ebp+872],edx
noudr1864: mov ecx,[ebp+856]
 mov edx,[ebp+780]
 add edx,[ebp+964]
 cmp ecx,edx
 jnz udr056
 mov ecx,[ebp+872]
 cmp ecx,2192
 jz udr057
udr056: jmp noudrjumps
udr057: xor ebx,ebx
 add ebx,2192
 mov edi,[ebp+840]
 add edi,2000
 cmp edi,2080
 jnz udr060
 xor ebx,ebx
 add ebx,2231
udr060: cmp edi,2072
 jnz udr062
 xor ebx,ebx
 add ebx,2234
udr062: cmp edi,2073
 jnz udr064
 xor ebx,ebx
 add ebx,2238
udr064: cmp edi,2081
 jnz udr066
 xor ebx,ebx
 add ebx,2242
udr066: cmp edi,2077
 jnz udr068
 xor ebx,ebx
 add ebx,2246
udr068: cmp edi,2075
 jnz udr070
 xor ebx,ebx
 add ebx,2252
udr070: cmp edi,2079
; 79 is O end key
 jnz udr072
 xor edx,edx
 cmp edx,[esi+nznormalend]
 jz urr071
 xor ebx,ebx
 add ebx,2261
 xor edx,edx
 jz udr072
urr071: xor ebx,ebx
 add ebx,2263
udr072: cmp edi,2082
 jnz udr074
 xor ebx,ebx
 add ebx,2274
udr074: cmp edi,2083
 jnz udd075
 xor ebx,ebx
 add ebx,2290
udd075: cmp edi,2071
 jnz udr080
udr076: xor edx,edx
 cmp edx,[esi+nznormalend]
 jz udr14g
 xor ebx,ebx
 add ebx,2265
 xor edx,edx
 jz udr080
udr14g: xor ebx,ebx
 add ebx,2176
 xor edx,edx
 add edx,52646
 mov [esi+dagrajmpnow],edx
 xor edx,edx
 add edx,52645
 mov [esi+freddynext],edx
udr080: cmp edi,2060
 jnz udr082
 xor ebx,ebx
 add ebx,2176
udr082: mov [ebp+872],ebx
 cmp ebx,2192
 jnz noudrjumps
 xor ebx,ebx
 add ebx,2176
 mov [ebp+872],ebx
noudrjumps: mov ebx,[ebp+872]
 cmp ebx,2231
 jnz udr088
; 2231 downarrow P
 mov ecx,[esi+y]
 add ecx,[ebp+968]
 mov [esi+y],ecx
 xor ebx,ebx
 add ebx,2176
 mov [ebp+872],ebx
udr088: cmp ebx,2234
 jnz udr091
; 2234 uparrow H
 mov ecx,[esi+y]
 sub ecx,[ebp+968]
 mov [esi+y],ecx
 xor ebx,ebx
 add ebx,2176
 mov [ebp+872],ebx
udr091: cmp ebx,2238
 jnz udr093
; 2238 pageup I
 mov edx,[ebp+956]
 add edx,[esi+y]
 add edx,[esi+nznormalend]
 sub edx,[esi+ypheight]
 mov [esi+y],edx
 xor ebx,ebx
 add ebx,2176
 mov [ebp+872],ebx
udr093: cmp ebx,2242
 jnz udr096
; 2242 page down Q
 mov edx,[esi+y]
 add edx,[esi+ypheight]
 sub edx,[esi+nznormalend]
 sub edx,[ebp+956]
 mov [esi+y],edx
 xor ebx,ebx
 add ebx,2176
 mov [ebp+872],ebx
udr096: cmp ebx,2246
 jnz udr101
; 2246 rightarrow M
 mov ecx,[ebp+968]
 add [esi+x],ecx
 xor ebx,ebx
 add ebx,2190
 mov [ebp+872],ebx
 mov ecx,[esi+a80w]
 cmp ecx,[esi+x]
 jns udr101
 mov edx,[ebp+968]
 mov [esi+x],edx
 mov ecx,[esi+y]
 add ecx,edx
 mov [esi+y],ecx
 xor ebx,ebx
 add ebx,2176
 mov [ebp+872],ebx
udr101: cmp ebx,2252
 jz udr103
; 2252 leftarrow K
udr102: jmp udrnot2252
udr103: mov edx,[esi+x]
 mov edi,[ebp+968]
 sub edx,edi
 mov [esi+x],edx
 xor ebx,ebx
 add ebx,2190
 mov [ebp+872],ebx
 cmp edx,edi
 jns udr102
 cmp edi,[esi+y]
 jns udr108
 mov ecx,[esi+y]
 sub ecx,edi
 mov [esi+y],ecx
udr108: mov ecx,[ebp+1008]
 push ecx
 call lalocal12
 add esp,[ebp+956]
 push edi
 push ecx
 call dlenval
 add esp,[ebp+940]
 add eax,edi
 mov [esi+x],eax
 mov ecx,[esi+a80w]
 cmp ecx,[esi+x]
 jns udr112
 mov edx,[esi+a80w]
 mov [esi+x],edx
udr112: xor ebx,ebx
 add ebx,2176
 mov [ebp+872],ebx
udrnot2252: cmp ebx,2261
 jnz udrnot2261
 mov ecx,[ebp+1008]
 push ecx
 call lalocal12
 add esp,[ebp+956]
 mov edi,[ebp+968]
 push edi
 push ecx
 call dlenval
 add esp,[ebp+940]
 mov [esi+x],edi
 add edi,eax
 mov edx,[esi+a80w]
 cmp edx,edi
 js udrbot2260
 mov [esi+x],edi
udrbot2260: xor ebx,ebx
 add ebx,2190
 mov [ebp+872],ebx
udrnot2261: cmp ebx,2263
 jnz udr116
; 2263 endkey O
 mov edi,[ebp+968]
 cmp edi,[esi+x]
 jns udr116
 mov [esi+x],edi
 xor ebx,ebx
 add ebx,2190
 mov [ebp+872],ebx
udr116: cmp ebx,2263
 jnz udr120
 mov edi,[ebp+968]
 cmp edi,[esi+x]
 jnz udr120
 mov ecx,[esi+y]
 add edi,[esi+afilelen]
 cmp ecx,edi
 jns udr119
 mov [esi+y],edi
 xor ebx,ebx
 add ebx,2176
 mov [ebp+872],ebx
 xor eax,eax
 jz udr120
udr119: mov edx,[ebp+968]
 mov [esi+y],edx
 xor ebx,ebx
 add ebx,2176
 mov [ebp+872],ebx
udr120: cmp ebx,2265
 jnz udr121
 mov edx,[ebp+968]
 mov [esi+x],edx
 xor ebx,ebx
 add ebx,2190
 mov [ebp+872],ebx
udr121: cmp ebx,2274
 jnz udr124
; 2274 insertkey R
 mov edx,[ebp+968]
 sub edx,[esi+insertype]
 mov [esi+insertype],edx
 xor ebx,ebx
 add ebx,2190
 mov [ebp+872],ebx
udr124: cmp ebx,2290
 jnz udr130
; 2290 deletekey S
 xor edi,edi
 mov edx,[ebp+1008]
 push edi
 push edx
 call dkx2050
 add esp,[ebp+940]
 mov edx,[ebp+968]
 mov [esi+chdoc],edx
 xor ebx,ebx
 add ebx,2176
 mov [ebp+872],ebx
 cmp edi,[esi+inspg]
 jnz udr130
 xor ebx,ebx
 add ebx,2190
 mov [ebp+872],ebx
udr130: cmp ebx,2176
 jz udr132
; 2176 repaint page
 jmp udrnot2176
udr132: mov edi,[ebp+968]
 mov edx,[esi+afilelen]
 mov ecx,[esi+y]
 cmp edx,ecx
 jns udr135
 add edx,edi
 mov [esi+y],edx
 mov ecx,edx
udr135: cmp ecx,edi
 jns udr137
 mov [esi+y],edi
udr137: mov ecx,[esi+x]
 mov edx,[esi+a80w]
 cmp edx,ecx
 jns udr139
 mov ecx,edx
 mov [esi+x],ecx
udr139: cmp ecx,edi
 jns udr141
 mov [esi+x],edi
udr141: mov ecx,[ebp+1008]
 push ecx
 call lalocal12
 add esp,[ebp+956]
 mov edx,[ebp+964]
 push edx
 push ecx
 call pachrvgapage
 add esp,[ebp+940]
 xor ebx,ebx
 add ebx,2190
 mov [ebp+872],ebx
udrnot2176: cmp ebx,2190
 jz udr146
; 2190 repaint line
 jmp udrnot2190
udr146: mov edi,[ebp+968]
 mov edx,[esi+afilelen]
 mov ecx,[esi+y]
 cmp edx,ecx
 jns udr155
 add edx,edi
 mov [esi+y],edx
 mov ecx,edx
udr155: cmp ecx,edi
 jns udr157
 mov [esi+y],edi
udr157: mov ecx,[esi+x]
 mov edx,[esi+a80w]
 cmp edx,ecx
 jns udr159
 mov ecx,edx
 mov [esi+x],ecx
udr159: cmp ecx,edi
 jns udr161
 mov [esi+x],edi
udr161: mov ecx,[ebp+1008]
 push ecx
 call lalocal12
 add esp,[ebp+956]
 xor edi,edi
 mov edx,[esi+y]
 sub edx,[esi+prindiff]
 mov eax,[ebp+952]
 push edi
 push edx
 push eax
 push ecx
 call paicvgcline
 add esp,[ebp+908]
 mov edx,[ebp+960]
 add edx,[ebp+780]
 xor ecx,ecx
 cmp ecx,[esi+nznormalend]
 jz udv162
 and edx,[ebp+972]
udv162: add edx,[ebp+968]
 mov ecx,[ebp+1008]
 push edx
 push ecx
 call litrlsput
 add esp,[ebp+940]
; uses chnvalue(*chwvEBX subvEDI inchnEDX *bwv96ECX)
 mov edx,[ebp+936]
 sub edx,[ebp+968]
 mov ecx,[esi+a80w]
 push edx
 push ecx
 call nampy
 add esp,[ebp+940]
 sub eax,[ebp+972]
 add eax,[ebp+808]
 mov [ebp+792],eax
 mov edx,[ebp+936]
 add edx,[ebp+780]
 mov [ebp+900],edx
 mov edi,[ebp+812]
 add edi,[ebp+964]
 mov ebx,[ebp+792]
 add ebx,2048
 lea ecx,[ebp+900]
 mov edx,[ebp+960]
 add edx,[ebp+780]
 mov [ebp+901],dl
 mov edx,[esi+x]
 push ecx
 push edx
 push edi
 push ebx
 call chnvalue
 add esp,[ebp+908]
 mov edx,[ebp+944]
 add edx,[ebp+780]
 mov [ebp+901],dl
 add edi,[ebp+956]
 mov edx,[esi+y]
 push ecx
 push edx
 push edi
 push ebx
 call chnvalue
 add esp,[ebp+908]
 mov edx,[ebp+964]
 add edx,[ebp+780]
 mov [ebp+901],dl
 mov edx,[esi+y]
 sub edx,[esi+prindiff]
 add edi,[ebp+940]
 push ecx
 push edx
 push edi
 push ebx
 call chnvalue
 add esp,[ebp+908]
 mov edx,[ebp+944]
 add edx,[ebp+780]
 mov [ebp+901],dl
 add edi,[ebp+956]
 mov edx,[esi+afilelen]
 push ecx
 push edx
 push edi
 push ebx
 call chnvalue
 add esp,[ebp+908]
 mov edx,[ebp+884]
 add edx,[ebp+780]
 mov [ebp+900],edx
 mov edx,[ebp+780]
 add edx,[ebp+940]
 mov [ebp+901],dl
 mov edi,ebx
 sub edi,5500
 xor edx,edx
 mov dl,[edi+5500]
 cmp edx,[ebp+844]
 jnz skipleft2176
 mov edi,[ebp+964]
 mov edx,[esi+leftdebugger]
 or dh,dl
 jz skipleft2176
 mov edx,[esi+leftdebugger]
 push ecx
 push edx
 push edi
 push ebx
 call chnvalue
 add esp,[ebp+908]
skipleft2176: mov edx,[esi+keysdebugger]
 or dh,dh
 jz skiplebb2177
 mov edx,[esi+keysdebugger]
 mov edi,[ebp+780]
 add edi,[ebp+892]
 push ecx
 push edx
 push edi
 push ebx
 call chnvalue
 add esp,[ebp+908]
skiplebb2177: mov ebx,[ebp+1008]
 mov edi,[ebp+956]
 mov edx,[esi+ypheight]
 sub edx,[esi+nznormalend]
 add edx,[ebp+968]
 mov ecx,[ebp+936]
 push edi
 push edx
 push ecx
 push ebx
 call paicvgcline
 add esp,[ebp+908]
; 9 to ypheight+1
 mov edx,[ebp+940]
 mov ecx,[ebp+1008]
 push edx
 push ecx
 call dlenval
 add esp,[ebp+940]
 mov [ebp+904],eax
 mov ecx,[ebp+908]
 sub ecx,[ebp+972]
 mov [ebp+920],ecx
 mov ebx,[ebp+792]
 sub ebx,[esi+a80w]
 cmp eax,[ebp+920]
 jns udr090
 cmp eax,[ebp+952]
 js udr090
 xor ecx,ecx
 xor edx,edx
udr085: mov edi,ecx
 mov dl,[ebx+edi*1+2048]
 add edi,[esi+a80w]
 mov [ebx+edi*1+2048],dl
 add ecx,[ebp+968]
 cmp ecx,[ebp+904]
 js udr085
 add ebx,[esi+a80w]
 mov edx,[ebp+844]
udr087: mov edi,ecx
 mov [ebx+edi*1+2048],dl
 add ecx,[ebp+968]
 cmp ecx,[ebp+920]
 js udr087
udr090: mov ebx,[ebp+1008]
 mov edi,[ebp+956]
 mov edx,[esi+ypheight]
 sub edx,[esi+nznormalend]
 add edx,[ebp+968]
 mov ecx,[ebp+936]
 push edi
 push edx
 push ecx
 push ebx
 call paicvgcline
 add esp,[ebp+908]
; 9 ypheight+1
 xor edi,edi
 cmp edi,[esi+nznormalend]
 jz udr092
 xor edx,edx
 add edx,2070
 sub edx,2000
 push edx
 push ebx
 call litrlsput
 add esp,[ebp+940]
 mov edi,[ebp+956]
 mov edx,[esi+ypheight]
 sub edx,[esi+nznormalend]
 add edx,[ebp+964]
 mov ecx,[ebp+936]
 push edi
 push edx
 push ecx
 push ebx
 call paicvgcline
 add esp,[ebp+908]
; 9 ypheight+2
udr092: mov edi,[ebp+964]
 mov edx,[esi+y]
 sub edx,[esi+prindiff]
 mov ecx,[ebp+952]
 push edi
 push edx
 push ecx
 push ebx
 call paicvgcline
 add esp,[ebp+908]
; 5  y-prindiff
udrnot2190: xor edi,edi
 add esp,[ebp+916]
 pop eax
 pop ecx
 pop edx
 pop ebx
 pop esi
 pop edi
 pop ebp
 ret
; bottom of udregkey2176
; litrlsput(lnes* rlslinal, int rlsindex)
; rlsindex >= 1 && rlsindex < 6000 for normal litharg line
; rlsindex == -11 send from crz0160(11);
; rlsindex is 52 for send to crz0160(9)
; rlsindex is > 6000 to put (rlsindex - 6000) to
;                            crz0160(3)
; if evwr is destination then scroll and put
; new line at ypheight+1
; unless rlsindex is 70.
; 1004 retad    1008 *rlslinal    1012 rlsindex
; 988 ebx     992 esi     996 edi     1000 ebp
; 972 0    976 eax    980 ecx     984 edx
; 956 4    960 3    964 2    968 1
; 940 8    944 7    948 6    952 5
; 924 12    928 11    932 10    936 9
; 908 16    912 15    916 cst96    920
; 892 20    896 19    900    904 scrollsize
; 876 24    880 23    884    888 wherecrz0160-512
; 860 28    864 27    868    872 whereevwr-512
; 844 32    848 31    852    856 evwrset
; 828 36    832 35    836 highl    840 33
; 812 40    816 39    820 fixesp    824 wherelit
; 164 = 41 * 4
; 300 512 = 128 * 4  300 - 808 line of text
litrlsput: push ebp
 mov ebp,esp
 sub ebp,1000
 push edi
 push esi
 push ebx
 push edx
 push ecx
 push eax
 xor esi,esi
 xor edi,edi
 add esi,1041
 mov edx,esi
 sub edx,1040
 mov ecx,esi
 sub ecx,1000
 mov ebx,ecx
 add ebx,ebx
 add ebx,ebx
litrlsdpu: push edi
 add edi,edx
 sub ecx,edx
 jnz litrlsdpu
 xor eax,eax
 mov ecx,[ebp+956]
 mov edx,esi
 sub edx,785
litmpylop: push edx
 push eax
 call nampy
 add esp,[ebp+940]
 add eax,[ebp+844]
 sub ecx,[ebp+968]
 jnz litmpylop
 mov ecx,esi
 sub ecx,913
litrlsepu: push eax
 add ebx,[ebp+956]
 sub ecx,[ebp+968]
 jnz litrlsepu
 mov [ebp+820],ebx
 xor esi,esi
 push esi
 call getreala
 add esp,[ebp+956]
 lea ecx,[esi+litharg]
 add ecx,eax
 mov [ebp+824],ecx
 mov ebx,[ebp+1008]
 sub ebx,8192
 mov ecx,[ebx+ypheight]
 sub ecx,[ebx+nznormalend]
 add ecx,[ebp+968]
 mov [ebp+836],ecx
 lea edx,[ebx+evwr]
 sub edx,512
 mov [ebp+872],edx
 lea ecx,[ebx+crz0160]
 sub ecx,512
 mov [ebp+888],ecx
 mov ecx,[ebx+a80w]
 mov edx,[ebp+836]
 add edx,[ebp+864]
 sub edx,[ebp+860]
 push edx
 push ecx
 call nampy
 add esp,[ebp+940]
 mov [ebp+856],eax
 xor esi,esi
 add esi,13881
 mov [ebp+916],esi
 xor ecx,ecx
 add ecx,[ebp+972]
 lea edx,[ebp+916]
 mov esi,[ebp+824]
 push esi
 push edx
 push ecx
 call rlnvalue
 add esp,[ebp+924]
 mov edi,eax
 mov edx,[ebp+1012]
 xor ecx,ecx
 add ecx,6000
 cmp edx,ecx
 js litr017
 sub edx,ecx
litr017: cmp edx,[ebp+968]
 jns litr020
 jmp skiprlsget
litr020: sub edx,[ebp+972]
 mov ecx,[ebp+940]
 push edx
 push ecx
 call nampy
 add esp,[ebp+940]
 mov esi,[ebp+824]
 lea ecx,[ebp+916]
 push esi
 push ecx
 push eax
 call rlnvalue
 add esp,[ebp+924]
 mov esi,eax
 add esi,edi
 add esi,[ebp+824]
 sub esi,4096
 xor edi,edi
 xor ecx,ecx
litr024: xor edx,edx
 mov dl,[esi+4096]
 cmp edx,[ebp+840]
 jz skiprlsget
 mov [ebp+edi*1+300],dl
 add esi,[ebp+968]
 add edi,[ebp+968]
 add ecx,[ebp+968]
 cmp ecx,[ebx+a80w]
 js litr024
skiprlsget: mov edx,[ebp+928]
 sub edx,[ebp+968]
 mov ecx,[ebx+a80w]
 push edx
 push ecx
 call nampy
 add esp,[ebp+940]
 mov esi,eax
 add esi,[ebp+888]
 mov ecx,[ebx+a80w]
 mov eax,[ebp+968]
 xor edi,edi
 xor edx,edx
 sub edx,[ebp+928]
 cmp edx,[ebp+1012]
 jnz skiprlsm11
litr031: xor edx,edx
 mov dl,[esi+512]
 mov [ebp+edi*1+300],dl
 add esi,eax
 add edi,eax
 sub ecx,eax
 jnz litr031
skiprlsm11: mov edx,[ebp+936]
 sub edx,[ebp+968]
 mov ecx,[ebx+a80w]
 push edx
 push ecx
 call nampy
 add esp,[ebp+940]
 mov edi,eax
 add edi,[ebp+888]
 xor esi,esi
 mov edx,[ebp+1012]
 xor ecx,ecx
 cmp ecx,[ebx+nznormalend]
 jz litr035
 mov ecx,[ebp+968]
 cmp ecx,edx
 jz litr037
 xor ecx,ecx
 add ecx,2070
 sub ecx,2000
 cmp ecx,edx
 jz litr037
 mov ecx,[ebp+964]
 cmp ecx,edx
 jz litr037
; xxxxxxxxxxxx litr035 )
litr035: xor ecx,ecx
 add ecx,1027
; ecx is location of line for nine 27+25
 sub ecx,975
 cmp edx,ecx
 jnz skiprlsnine
litr037: xor edx,edx
 mov dl,[ebp+esi*1+300]
 mov [edi+512],dl
 add esi,[ebp+968]
 add edi,[ebp+968]
 cmp esi,[ebx+a80w]
 js litr037
 jmp litrlsend
skiprlsnine: xor ecx,ecx
 add ecx,6000
 mov edx,[ebp+1012]
 cmp edx,ecx
 js skiprlsrine
 mov edx,[ebp+960]
 sub edx,[ebp+968]
 mov ecx,[ebx+a80w]
 push edx
 push ecx
 call nampy
 add esp,[ebp+940]
 mov edi,eax
 add edi,[ebp+888]
 xor esi,esi
 mov eax,[ebp+968]
 xor edx,edx
 jz litr045
; top of shifter
skiprlsrine: mov edx,[ebx+ypheight]
 sub edx,[ebx+nznormalend]
 mov ecx,[ebx+a80w]
 push edx
 push ecx
 call nampy
 add esp,[ebp+940]
 mov [ebp+904],eax
 mov edi,[ebp+872]
 mov esi,edi
 add esi,[ebx+a80w]
 mov eax,[ebp+968]
 mov ecx,[ebp+904]
litr043: xor edx,edx
 mov dl,[esi+512]
 mov [edi+512],dl
 add esi,eax
 add edi,eax
 sub ecx,eax
 jnz litr043
; bottom of shifter
 mov edi,[ebp+856]
 add edi,[ebp+872]
 xor esi,esi
 mov eax,[ebp+968]
litr045: xor edx,edx
 mov dl,[ebp+esi*1+300]
 mov [edi+512],dl
 add edi,eax
 add esi,eax
 cmp esi,[ebx+a80w]
 js litr045
litrlsend: xor edi,edi
 add esp,[ebp+820]
 pop eax
 pop ecx
 pop edx
 pop ebx
 pop esi
 pop edi
 pop ebp
 ret
; bottom of litrlsput
; int tinylenval(lnes* dent, int teub)
; 1004 retad    1008 *dent    1012 teub
; 988 ebx    992 esi    996 edi    1000 ebp
; 972 0    976 eax    980 ecx    984 edx
; 956 4    960 3    964 2    968 1
; 940 8    944 7    948 6    952 5
; 924 12    928 11    932 10    936 9
; 908 16    912 15    916    920
; 892 20    896 19    900    904 fixesp
; 876 24    880 23    884    888
; 860 28    864 27    868    872
; 844 32    848    852    856
tinylenval: push ebp
 mov ebp,esp
 sub ebp,1000
 push edi
 push esi
 push ebx
 push edx
 push ecx
 push eax
 xor ebx,ebx
 xor edi,edi
 add edi,1033
 mov edx,edi
 sub edx,1032
 mov ecx,edi
 sub ecx,1000
 mov eax,ecx
 add eax,eax
 add eax,eax
tinylenpuv: push ebx
 add ebx,edx
 sub ecx,edx
 jnz tinylenpuv
 mov [ebp+904],eax
 mov edi,[ebp+1008]
 sub edi,8192
 lea ebx,[edi+crz0160]
 xor esi,esi
 mov edx,[ebp+1012]
 sub edx,[ebp+968]
 js skiptinylen
 mov ecx,[edi+a80w]
 push edx
 push ecx
 call nampy
 add esp,[ebp+940]
 add ebx,eax
 sub ebx,4096
 mov eax,[ebp+968]
tinylen09: xor edx,edx
 mov dl,[ebx+esi*1+4096]
 cmp edx,[ebp+844]
 jz skiptinylen
 add esi,eax
 cmp esi,ecx
 js tinylen09
skiptinylen: mov [ebp+976],esi
 add esp,[ebp+904]
 pop eax
 pop ecx
 pop edx
 pop ebx
 pop esi
 pop edi
 pop ebp
 ret
; bottom of tinylenval
; int cmdjavcurz(lnes* nzcjes, int nzcjrepeat)
; 1004 retad    1008 *nzcjes    1012 nzcjrepeat
; 988 ebx    992 esi     996 edi     1000 ebp
; 972 0    976 eax    980 ecx    984 edx
; 956 4    960 3    964 2    968 1
; 940 8    944 7    948 6    952 5
; 924 12    928 11    932 10    936 9
; 908 16    912 15    916        920 13
; 892 20    896 19    900 elevbase    904 lenleven
; 876 24    880 23    884 stepbase    888 lbigleven
; 860 28    864 27    868 lenthree    872 lenstep
; 844 32    848 31    852 tinyhctr    856 threectr
; 828 36    832 35    836 cjcznzres    840 hdmoffset
; 812 40    816 39    820 9w        824 threebase
; 796 44    800 43    804 where160    808 jurcommand
; 780 48    784 47    788 3set     792 dowmanycmd
; 764 52    768 51    772 fixesp    776 javallowcmd
; 748 56    752 55    756 levset    760
cmdjavcurz: push ebp
 mov ebp,esp
 sub ebp,1000
 push edi
 push esi
 push ebx
 push edx
 push ecx
 push eax
 xor esi,esi
 add esi,1057
 mov edx,esi
 sub edx,1056
 mov ecx,esi
 sub ecx,1000
 xor edi,edi
 mov eax,ecx
 add eax,eax
 add eax,eax
cmdjavpuz: push edi
 add edi,edx
 sub ecx,edx
 jnz cmdjavpuz
 mov [ebp+772],eax
 mov ebx,[ebp+1008]
 sub ebx,8192
 lea ecx,[ebx+crz0160]
 mov [ebp+804],ecx
 mov edx,[ebp+928]
 sub edx,[ebp+968]
 mov ecx,[ebx+a80w]
 push edx
 push ecx
 call nampy
 add esp,[ebp+940]
 mov [ebp+756],eax
 mov edx,[ebp+960]
 sub edx,[ebp+968]
 mov ecx,[ebx+a80w]
 push edx
 push ecx
 call nampy
 add esp,[ebp+940]
 mov [ebp+788],eax
 xor ecx,ecx
 mov [ebp+808],ecx
 add ecx,1300
 mov [ebp+852],ecx
 xor edx,edx
 mov [ebp+836],edx
 mov [ebp+856],edx
 mov edx,[ebp+968]
 mov [ebp+792],edx
 mov [ebp+776],edx
 mov esi,[ebp+756]
 add esi,[ebp+804]
 sub esi,512
 mov [ebp+900],esi
 mov edi,[ebp+788]
 add edi,[ebp+804]
 sub edi,512
 mov [ebp+824],edi
 mov edx,[ebp+928]
 mov ecx,[ebp+1008]
 push edx
 push ecx
 call dlenval
 add esp,[ebp+940]
 mov [ebp+888],eax
 push edx
 push ecx
 call tinylenval
 add esp,[ebp+940]
 mov [ebp+904],eax
 mov ecx,[ebp+904]
 cmp ecx,[ebp+968]
 jns cmdjav019
 xor edx,edx
 mov [ebp+776],edx
cmdjav019: mov ecx,[ebp+936]
 add ecx,[ebp+780]
 mov [ebp+820],ecx
 mov ecx,[ebp+888]
 sub ecx,[ebp+904]
 sub ecx,[ebp+964]
 jns cmdjav021
cmdjav020: xor esi,esi
 jz cmdjav028
cmdjav021: mov ecx,[ebp+972]
 cmp ecx,[ebp+776]
 jns cmdjav020
 mov edx,[ebp+904]
 add edx,[ebp+964]
 mov [ebp+840],edx
 mov edx,[ebp+888]
 sub edx,[ebp+840]
 add edx,[ebp+968]
 add edx,[ebp+780]
 mov [ebp+821],dl
 mov edi,[ebp+900]
 lea edx,[ebp+820]
 add edi,512
 mov ecx,[ebp+840]
 sub ecx,[ebp+968]
 push edi
 push edx
 push ecx
 call rlnvalue
 add esp,[ebp+924]
 mov [ebp+792],eax
cmdjav028: mov esi,[ebp+972]
 cmp esi,[ebp+776]
 js cmdjav030
cmdjav029: jmp cmdjavclr3
cmdjav030: mov ecx,[ebp+960]
 mov [ebp+856],ecx
cmdjavolop: mov ecx,[ebp+860]
 cmp ecx,[ebp+856]
 js cmdjav029
 mov edx,[ebp+776]
 cmp edx,[ebp+972]
 jz cmdjav029
 mov ecx,[ebp+856]
 add ecx,6000
 mov eax,[ebp+1008]
 push ecx
 push eax
 call litrlsput
 add esp,[ebp+940]
 mov edx,[ebp+960]
 mov ecx,[ebp+1008]
 push edx
 push ecx
 call tinylenval
 add esp,[ebp+940]
 mov [ebp+868],eax
 mov ecx,[ebp+868]
 cmp ecx,[ebp+904]
 jz cmdjav038
 jmp cmdjavobot
cmdjav038: mov edi,[ebp+972]
 mov [ebp+852],edi
 mov edx,[ebp+968]
 mov [ebp+836],edx
cmdjavilop: mov ecx,[ebp+852]
 cmp ecx,[ebp+904]
 jns cmdjavafti
cmdjav041: xor eax,eax
 xor edx,edx
 mov esi,[ebp+852]
 mov edi,esi
 add esi,[ebp+900]
 add edi,[ebp+824]
 mov al,[esi+512]
 mov dl,[edi+512]
 cmp eax,edx
 jz cmdjav045
 mov ecx,[ebp+972]
 mov [ebp+836],ecx
cmdjav045: mov edx,[ebp+852]
 add edx,[ebp+968]
 mov [ebp+852],edx
 xor ecx,ecx
 jz cmdjavilop
cmdjavafti: mov ecx,[ebp+972]
 cmp ecx,[ebp+836]
 jz cmdjavobot
 mov eax,[ebp+856]
 mov [ebp+808],eax
 xor ecx,ecx
 mov [ebp+776],ecx
cmdjavobot: mov ecx,[ebp+856]
 add ecx,[ebp+968]
 mov [ebp+856],ecx
 jmp cmdjavolop
cmdjavclr3: mov edx,[ebp+960]
 mov ecx,[ebp+1008]
 push edx
 push ecx
 call clearline
 add esp,[ebp+940]
 mov ecx,[ebp+808]
 mov [ebp+836],ecx
 xor edi,edi
 cmp edi,[ebp+1012]
 jz cmdjav060
 mov esi,[ebp+792]
 mov [ebp+836],esi
cmdjav060: mov edi,[ebp+836]
 mov [ebp+976],edi
 add esp,[ebp+772]
 pop eax
 pop ecx
 pop edx
 pop ebx
 pop esi
 pop edi
 pop ebp
 ret
; bottom of cmdjavcurz
; void clearpage(lnes* cpgenes, int nzalsorz)
; 1004 retad    1008 *cpgenes    1012 nzalsorz
; 988 ebx    992 esi    996 edi    1000 ebp
; 972 0    976 eax    980 ecx    984 edx
; 956 4    960 3    964 2    968 1
; 940 8    944 7    948 6    952 hardlim
; 924 12    928 11    932 fixesp    936
; 908 16    912 15    916 14    920 13
clearpage: push ebp
 mov ebp,esp
 sub ebp,1000
 push edi
 push esi
 push ebx
 push edx
 push ecx
 push eax
 xor esi,esi
 add esi,1017
 mov edx,esi
 xor edi,edi
 sub edx,1016
 mov ecx,esi
 sub ecx,1000
 mov eax,ecx
 add eax,eax
 add eax,eax
clearpapu: push edi
 add edi,edx
 sub ecx,edx
 jnz clearpapu
 mov [ebp+932],eax
 mov ebx,[ebp+1008]
 sub ebx,8192
 xor esi,esi
 mov eax,[ebx+ypheight]
 add eax,[ebp+956]
 mov [ebp+952],eax
clearpaol: xor edi,edi
 mov edx,[ebp+1008]
 push edi
 push edx
 call litrlsput
 add esp,[ebp+940]
 add esi,[ebp+968]
 cmp esi,[ebp+952]
 js clearpaol
 xor esi,esi
 mov ecx,[ebp+972]
 cmp ecx,[ebp+1012]
 jz botclrpage
clearpail: mov edx,[ebp+1008]
 mov ecx,esi
 add ecx,[ebp+968]
 cmp ecx,[ebp+940]
 jz clear6596
 push ecx
 push edx
 call clearline
 add esp,[ebp+940]
clear6596: mov esi,ecx
 cmp esi,[ebp+928]
 js clearpail
botclrpage: xor edi,edi
 add esp,[ebp+932]
 pop eax
 pop ecx
 pop edx
 pop ebx
 pop esi
 pop edi
 pop ebp
 ret
; bottom of clearpage
; void readhex(lnes* rhes)
; 1000 ebp    1004 retad    1008 *rhes
; 988 ebx     992 esi       996 edi
; 972 0    976 eax    980 ecx    984 edx
; 956 4    960 3    964 2    968 1
; 940 8    944 7    948 6    952 5
; 924 12    928 11    932 10    936 9
; 908 16    912 15    916 fixesp    920
; 892 20    896 19    900 11where   904
; 876 24    880 23    884    888 hexeightctr
; 860 28    864 27    868    872 hextchr
; 844 32    848 31    852 cst92    856
; 828 36    832 35    836 34    840
; 812 40    816 39    820     824
; 796 44    800 43    804 42    808
; 780 48    784 47    788 46    792 45
readhex: push ebp
 mov ebp,esp
 sub ebp,1000
 push edi
 push esi
 push ebx
 push edx
 push ecx
 push eax
 xor edi,edi
 xor esi,esi
 add esi,1049
 mov edx,esi
 sub edx,1048
 mov ecx,esi
 sub ecx,1000
 mov eax,ecx
 add eax,eax
 add eax,eax
readhexu: push edi
 add edi,edx
 sub ecx,edx
 jnz readhexu
 mov [ebp+916],eax
 mov ebx,[ebp+1008]
 sub ebx,8192
 mov edx,[ebp+928]
 sub edx,[ebp+968]
 mov ecx,[ebx+a80w]
 push edx
 push ecx
 call nampy
 add esp,[ebp+940]
 lea ecx,[ebx+crz0160]
 add ecx,eax
 mov [ebp+900],ecx
 mov esi,[ebp+928]
 mov edx,[ebp+1008]
 push esi
 push edx
 call clearline
 add esp,[ebp+940]
 xor edi,edi
 add edi,3892322
 mov [ebp+852],edi
 mov edi,[ebp+900]
 sub edi,3000
 mov al,[ebp+852]
 mov dl,[ebp+853]
 mov [edi+3001],dl
 mov [edi+3002],al
 mov al,[ebp+854]
 mov [edi+3056],al
 mov edi,[ebp+972]
 mov [ebp+888],edi
readhexol: mov ecx,[ebp+888]
 cmp ecx,[ebp+940]
 js readh014
 jmp readhex916
readh014: xor esi,esi
 mov [ebp+872],esi
 cmp esi,[ebx+eofi]
 jnz readh020
 mov edi,[ebp+1008]
 push edi
 call riadone
 add esp,[ebp+956]
 xor edx,edx
 mov dl,[ebx+one2]
 mov [ebp+872],edx
readh020: xor ecx,ecx
 add ecx,742929222
 mov [ebp+852],ecx
 lea edi,[ebp+852]
 mov esi,[ebp+872]
 mov edx,[ebp+888]
 mov ecx,[ebp+948]
 push edx
 push ecx
 call nampy
 add esp,[ebp+940]
 add eax,[ebp+944]
 add eax,[ebp+972]
 mov edx,[ebp+900]
 push edi
 push esi
 push eax
 push edx
 call chnvalue
 add esp,[ebp+908]
 mov edi,edx
 add edi,eax
 add edi,[ebp+964]
 sub edi,3000
 mov dl,[ebp+854]
 mov [edi+3000],dl
 mov dl,[ebp+855]
 mov ecx,[ebp+948]
 cmp ecx,[ebp+888]
 js rhex6741
 mov [edi+3001],dl
rhex6741: mov ecx,[ebp+972]
 add ecx,[ebp+788]
 mov edi,[ebp+872]
 mov edx,[ebp+968]
 add edx,[ebp+844]
 cmp edi,edx
 js readh030
 mov edx,[ebp+968]
 add edx,[ebp+892]
 add edx,[ebp+832]
 add edx,[ebp+832]
 add edx,[ebp+832]
 cmp edx,edi
 js readh030
 mov ecx,[ebp+872]
readh030: mov edx,ecx
 mov edi,[ebp+888]
 add edi,[ebp+900]
 add edi,[ebp+844]
 add edi,[ebp+832]
 sub edi,512
 mov [edi+512],dl
 mov esi,[ebp+888]
 add esi,[ebp+968]
 mov [ebp+888],esi
 jmp readhexol
readhex916: add esp,[ebp+916]
 pop eax
 pop ecx
 pop edx
 pop ebx
 pop esi
 pop edi
 pop ebp
 ret
; bottom of readhex
; int readol(lnes* rolfes,int rolfnwhere,int nzhex)
; 1008 *rolfes    1012 rolfnwhere    1016 nzhex
; 992 esi    996 edi    1000 ebp    1004 retad
; 976 eax    980 ecx     984 edx    988 ebx
; 960 2    964 1    968 0    972 -1
; 944 6    948 5    952 4    956 3
; 928 10    932 9    936 8    940 7
; 912 14    916 13    920 12    924 readolres
; 896 18    900 wherecode    904 16    908 elevwhere
; 880 22    884 fixesp    888 20    892 readolallow
; 864 26    868 25      872 24      876
; 764 - 863    25 number buffer
readol: push ebp
 mov ebp,esp
 sub ebp,1000
 push edi
 push esi
 push ebx
 push edx
 push ecx
 push eax
 xor esi,esi
 add esi,1028
 mov edx,esi
 sub edx,1027
 mov ecx,esi
 sub ecx,1000
 mov edi,esi
 sub edi,1029
 mov eax,ecx
 add eax,eax
 add eax,eax
readou: push edi
 add edi,edx
 sub ecx,edx
 jnz readou
 xor edi,edi
 mov ecx,esi
 sub ecx,1003
readzu: push edi
 sub ecx,edx
 jnz readzu
 mov ecx,esi
 sub ecx,928
 add eax,ecx
 mov [ebp+884],eax
 mov ebx,[ebp+1008]
 sub ebx,8192
 xor edi,edi
 push edi
 call getreala
 add esp,[ebp+952]
 mov [ebp+900],eax
 mov edx,[ebp+920]
 sub edx,[ebp+960]
 mov ecx,[ebx+a80w]
 push edx
 push ecx
 call nampy
 add esp,[ebp+936]
 lea esi,[ebx+crz0160]
 add esi,eax
 sub esi,2048
 mov [ebp+908],esi
 xor edi,edi
 mov [ebp+924],edi
 mov [ebp+892],edi
 mov [ebx+fp04],edi
 mov [ebx+fl06],edi
 mov [ebx+eofi],edi
 mov [ebx+eofdelay],edi
 mov [ebx+rep0],edi
 mov esi,[ebp+904]
 mov [ebx+hiskwid],esi
 mov [ebx+pose],esi
 mov edi,[ebp+1012]
 add edi,[ebp+972]
 mov esi,[ebx+a80w]
 push edi
 push esi
 call nampy
 add esp,[ebp+936]
 lea esi,[ebx+crz0160]
 add esi,eax
 mov edx,[ebp+1012]
 mov ecx,[ebp+1008]
 push edx
 push ecx
 call dlenval
 add esp,[ebp+936]
 xor edi,edi
 sub esi,1024
 mov ecx,[ebp+964]
 cmp eax,ecx
 js readj026
readl017: xor edx,edx
 mov dl,[esi+1024]
 mov [ebp+edi*1+764],dl
 add esi,ecx
 add edi,ecx
 sub eax,ecx
 jnz readl017
 xor eax,eax
 jz readl026
readj026: jmp notreadol
readl026: xor edi,edi
 mov esi,[ebp+956]
 mov edx,[ebp+964]
 xor ecx,ecx
 add ecx,40000000h
 add ecx,40000000h
 lea eax,[ebp+764]
 push edi
 push edi
 push esi
 push edi
 push edx
 push ecx
 push eax
 mov edi,[ebp+900]
 lea edx,[edi+readl040]
 add edi,00800000h
 mov ecx,[edi+wiocrn85]
 push edx
 push ecx
 ret
readl040: mov [ebx+edhanb],eax
 or eax,eax
 jnz readl042
readl041: jmp notreadol
readl042: cmp eax,[ebp+964]
 js readl041
 mov edi,[ebp+900]
 xor eax,eax
 mov esi,[ebx+edhanb]
 lea edx,[edi+readl050]
 add edi,00800000h
 mov ecx,[edi+wiosfp19]
 mov edi,[ebp+960]
 push edi
 push eax
 push eax
 push esi
 push edx
 push ecx
 ret
readl050: mov [ebx+fl06],eax
 mov edi,[ebp+900]
 mov esi,[ebx+edhanb]
 lea edx,[edi+readl061]
 add edi,00800000h
 mov ecx,[edi+wiosfp19]
 xor edi,edi
 push edi
 push edi
 push edi
 push esi
 push edx
 push ecx
 ret
readl061: xor edi,edi
 cmp edi,[ebx+fl06]
 jns readl063
 mov edx,[ebp+964]
 mov [ebp+892],edx
readl063: mov ecx,[ebp+940]
 cmp ecx,[ebp+1012]
 jns readl070wh
 mov esi,[ebx+afilelen]
 add esi,[ebp+964]
 mov [ebx+y],esi
readl070wh: mov ecx,[ebp+892]
 cmp ecx,[ebp+968]
 jz readl075wb
 mov edx,[ebx+eofdelay]
 cmp edx,[ebp+968]
 jz readl076
readl075wb: jmp readl101wb
readl076: mov eax,[ebx+eofi]
 mov [ebx+eofdelay],eax
 mov ecx,[ebp+968]
 cmp ecx,[ebp+1016]
 jnz readl083
readl077: mov ecx,[ebp+1008]
 push ecx
 call riedline
 add esp,[ebp+952]
 xor edx,edx
 cmp edx,[ebx+rep0]
 jnz readl079
 mov edi,[ebx+eofi]
 mov [ebx+eofdelay],edi
readl079: mov ecx,[ebx+a80w]
 lea esi,[ebx+evrd]
 sub esi,512
 mov edi,[ebp+908]
 mov eax,[ebp+964]
readl080: xor edx,edx
 mov dl,[esi+512]
 mov [edi+2048],dl
 add esi,eax
 add edi,eax
 sub ecx,eax
 jnz readl080
 xor edx,edx
 jz readl090
readl083: mov ecx,[ebp+1008]
 push ecx
 call readhex
 add esp,[ebp+952]
readl090: mov edx,[ebp+920]
 add edx,[ebp+972]
 mov ecx,[ebp+1008]
 push edx
 push ecx
 call aptinsert
 add esp,[ebp+936]
 mov eax,[ebp+964]
 mov [ebp+924],eax
 jmp readl070wh
readl101wb: mov esi,[ebx+edhanb]
 mov edi,[ebp+900]
 lea edx,[edi+readl150]
 add edi,00800000h
 mov ecx,[edi+wiocls06]
 push esi
 push edx
 push ecx
 ret
readl150: mov ecx,[ebp+1012]
 cmp ecx,[ebp+936]
 js readl155
 mov edx,[ebp+1016]
 cmp edx,[ebp+968]
 jz readl158
readl155: mov esi,[ebp+1008]
 push ecx
 push esi
 call clearline
 add esp,[ebp+936]
readl158: mov esi,[ebp+1012]
 cmp esi,[ebp+940]
 js notreadol
 cmp esi,[ebp+932]
 jns notreadol
 xor edi,edi
 add edi,1084
 mov ecx,[ebp+1008]
 push edi
 push ecx
 call udregkey2176
 add esp,[ebp+936]
notreadol: mov esi,[ebp+924]
 mov [ebp+976],esi
 add esp,[ebp+884]
 pop eax
 pop ecx
 pop edx
 pop ebx
 pop esi
 pop edi
 pop ebp
 ret
; bottom of readol
; void eightsaveas(lnes* eisavls)
; 1000 ebp    1004 retad     1008 *eisavls
; 984 edx     988 ebx     992 esi     996 edi
; 968 1       972 0       976 eax     980 ecx
; 952 5       956 4       960 3       964 2
; 936 9       940 8       944 7       948 6
; 920 13    924 12    928 11    932 10
; 904 17    908 16    912 15    916 14
; 888 21    892 20    896 19    900 18
; 872 25    876 24    880 23    884 wrone
; 856 29    860 28    864 27    868 savedhr
; 840 33    844 32    848 shan    852 savewid
; 824 37    828 36    832 prdex    836 saveinner
; 808 41    812 40    816 codeloc    820 saveasctr
;                    800 fixesp    804 5where
; 792 outrashl    796 outrashh
; 776 49    780 48      784 fnlen    788 8where
; 676 - 775    width 100    fn    676
; 576 - 675    width 100    obuffer 576
eightsaveas: push ebp
 mov ebp,esp
 sub ebp,1000
 push edi
 push esi
 push ebx
 push edx
 push ecx
 push eax
 xor esi,esi
 add esi,1050
 mov edx,esi
 sub edx,1049
 mov ecx,esi
 sub ecx,1000
 mov ebx,ecx
 mov eax,ebx
 add eax,eax
 xor edi,edi
 add eax,eax
eightsaveru: push edi
 add edi,edx
 sub ecx,edx
 jnz eightsaveru
 xor edi,edi
eightsavepu: push edi
 sub ebx,edx
 jnz eightsavepu
 mov [ebp+800],eax
 xor edi,edi
 push edi
 call getreala
 add esp,[ebp+956]
 mov [ebp+816],eax
 mov ebx,[ebp+1008]
 sub ebx,8192
 mov edx,[ebp+940]
 sub edx,[ebp+968]
 mov edi,[ebx+a80w]
 push edx
 push edi
 call nampy
 add esp,[ebp+940]
 mov [ebp+788],eax
 mov ecx,[ebp+952]
 mov [ebp+832],ecx
 mov edx,[ebp+832]
 sub edx,[ebp+968]
 push edx
 push edi
 call nampy
 add esp,[ebp+940]
 mov [ebp+804],eax
 lea esi,[ebx+crz0160]
 add [ebp+788],esi
 add [ebp+804],esi
 mov edx,[ebp+940]
 mov ecx,[ebp+1008]
 push edx
 push ecx
 call dlenval
 add esp,[ebp+940]
 mov [ebp+784],eax
 cmp eax,[ebp+968]
 jns eigsa016
eigsa015: jmp eightsavnot
eigsa016: xor edi,edi
 mov esi,[ebp+788]
 sub esi,1024
 mov ecx,[ebp+968]
eigsa017: xor edx,edx
 mov dl,[esi+1024]
 mov [ebp+edi*1+676],dl
 add esi,ecx
 add edi,ecx
 sub eax,ecx
 jnz eigsa017
 xor edi,edi
 cmp edi,[ebx+afilelen]
 jns eigsa015
 xor esi,esi
 add esi,1128
 sub esi,1000
 mov edx,[ebp+964]
 xor ecx,ecx
 add ecx,40000000h
 lea eax,[ebp+676]
 push edi
 push esi
 push edx
 push edi
 push edi
 push ecx
 push eax
 mov edi,[ebp+816]
 lea edx,[edi+eigsa030]
 add edi,00800000h
 mov ecx,[edi+wiocrn85]
 push edx
 push ecx
 ret
eigsa030: mov [ebp+848],eax
 xor edi,edi
 mov [ebp+820],edi
eigsaolop: mov edx,[ebp+820]
 cmp edx,[ebx+afilelen]
 js eigsa033
 jmp eightsavclo
eigsa033: add edx,[ebp+968]
 mov [ebp+820],edx
 mov edi,[ebp+820]
 mov esi,[ebp+832]
 mov edx,[ebp+952]
 mov ecx,[ebp+1008]
 push edi
 push esi
 push edx
 push ecx
 call rw8056
 add esp,[ebp+908]
 mov edx,[ebp+832]
 mov ecx,[ebp+1008]
 push edx
 push ecx
 call dlenval
 add esp,[ebp+940]
 mov [ebp+852],eax
 xor edi,edi
 mov ecx,[ebp+968]
 mov esi,[ebp+804]
 sub esi,4096
eigsa038: cmp edi,[ebp+852]
 jns eigsa045
 mov dl,[esi+4096]
 mov [ebp+edi*1+576],dl
 add esi,ecx
 add edi,ecx
 xor edx,edx
 jz eigsa038
eigsa045: mov eax,[ebp+920]
 mov edx,[ebp+932]
 mov [ebp+edi*1+576],al
 mov [ebp+edi*1+577],dl
 xor eax,eax
 mov [ebp+836],eax
 cmp eax,[ebx+nzsaveskipod]
 jz eigsailop
 mov [ebp+edi*1+576],dl
eigsailop: mov esi,[ebp+836]
 xor edx,edx
 mov dl,[ebp+esi*1+576]
 mov [ebp+884],edx
 xor edi,edi
 lea esi,[ebp+792]
 mov edx,[ebp+968]
 lea ecx,[ebp+884]
 mov eax,[ebp+848]
 push edi
 push esi
 push edx
 push ecx
 push eax
 mov edi,[ebp+816]
 lea edx,[edi+eigsa060]
 add edi,00800000h
 mov ecx,[edi+wiowrt04]
 xor edi,edi
 push edx
 push ecx
 ret
eigsa060: mov edx,[ebp+836]
 mov ecx,[ebp+964]
 sub ecx,[ebx+nzsaveskipod]
 add ecx,[ebp+852]
 add edx,[ebp+968]
 mov [ebp+836],edx
 cmp edx,ecx
 js eigsailop
eigsa070: jmp eigsaolop
eightsavclo: mov edi,[ebp+816]
 mov esi,[ebp+848]
 lea edx,[edi+eightsavrot]
 add edi,00800000h
 mov ecx,[edi+wiocls06]
 push esi
 push edx
 push ecx
 ret
eightsavrot: mov edx,[ebp+832]
 mov ecx,[ebp+1008]
 push edx
 push ecx
 call clearline
 add esp,[ebp+940]
eightsavnot: xor esi,esi
 add esp,[ebp+800]
 add esp,[ebp+800]
 pop eax
 pop ecx
 pop edx
 pop ebx
 pop esi
 pop edi
 pop ebp
 ret
; bottom of eightsaveas
; boolean findtwoeq(lnes* ftqs, int isix11,
;            int 11skip, int zfa, int idiy)
; 1016 11skip    1020 zfa    1024 idiy
; 1004 retad    1008 *ftqs    1012 isix11
; 988 ebx    992 esi    996 edi    1000 ebp
; 972 0    976 eax    980 ecx    984 edx
; 956 4    960 3    964 2      968 1
; 940 8    944 7    948 6      952 5
; 924 12    928 11    932 10    936 9
; 908 16    912 15    916 14    920 13
; 892 20    896 19    900        904
; 876 24    880 23    884 olimit    888 bigsixskipzur
; 860 28    864 27    868    872 checkftw
; 844 32    848 31    852    856 checkfdw
; 828 36    832 35    836 fdilop    840 fdile
; 812 40    816 39    820 fdolop    824 fdices
; 796 44    800 43    804    808 six80wid
; 780 48    784 47    788 bisix    792 skipzur
; 764 52    768 51    772 6where    776 fdiri
; 748 56    752 55    756 3where    760 where160
; 732 60    736 59    740 fixesp    744 findonebr
findtwoeq: push ebp
 mov ebp,esp
 sub ebp,1000
 push edi
 push esi
 push ebx
 push edx
 push ecx
 xor esi,esi
 push esi
 add esi,1061
 mov edx,esi
 sub edx,1060
 mov ecx,esi
 sub ecx,1000
 mov eax,ecx
 add eax,eax
 add eax,eax
 xor edi,edi
findtwopu: push edi
 add edi,edx
 sub ecx,edx
 jnz findtwopu
 mov [ebp+740],eax
 mov ebx,[ebp+1008]
 sub ebx,8192
 lea esi,[ebx+crz0160]
 xor edi,edi
 mov edx,[ebp+928]
 cmp edx,[ebp+1012]
 jnz findne009
 mov edi,[ebp+1016]
findne009: mov [ebp+888],edi
 mov edx,[ebp+1012]
 mov edi,[ebp+1008]
 push edx
 push edi
 call dlenval
 add esp,[ebp+940]
 sub eax,[ebp+888]
 mov [ebp+856],eax
 mov eax,[ebp+1024]
 mov ecx,[ebp+960]
 mov esi,[ebp+952]
 push eax
 push ecx
 push esi
 push edi
 call rw8056
 add esp,[ebp+908]
 push ecx
 push edi
 call dlenval
 add esp,[ebp+940]
 sub eax,[ebp+888]
 mov [ebp+856],eax
 xor esi,esi
 cmp esi,[ebp+1020]
 jnz findnefast
 mov eax,[ebp+968]
findnefast: mov [ebp+884],eax
 mov esi,[ebp+968]
 sub edx,esi
 sub ecx,esi
 mov edi,[ebx+a80w]
 lea esi,[ebx+crz0160]
 push edx
 push edi
 call nampy
 add esp,[ebp+940]
 mov edx,eax
 add edx,esi
 add edx,[ebp+888]
 sub edx,4096
 mov [ebp+772],edx
 push ecx
 push edi
 call nampy
 add esp,[ebp+940]
 add esi,eax
 sub esi,4096
 mov [ebp+756],esi
 xor edi,edi
 cmp edi,[ebp+884]
 js findne005
findfail71: xor edi,edi
 jz findfail72
findne005: cmp edi,[ebp+856]
 jns findfail71
; free ebx from data addressing
 xor ebx,ebx
findtwjolop: mov esi,[ebp+756]
 mov edi,[ebp+772]
 mov eax,[ebp+968]
 cmp ebx,[ebp+884]
 jns findfail71
 xor ecx,ecx
findtwjilop: mov dl,[edi+4096]
 cmp dl,[ebx+esi*1+4096]
 jz findtwxcand
 cmp dl,[ebp+844]
 jz findtwxcand
 add ebx,eax
 xor edi,edi
 jz findtwjolop
findtwxcand: add edi,eax
 add esi,eax
 add ecx,eax
 cmp ecx,[ebp+856]
 js findtwjilop
 mov [ebp+976],eax
findfail72: add esp,[ebp+740]
 pop eax
 pop ecx
 pop edx
 pop ebx
 pop esi
 pop edi
 pop ebp
 ret
; bottom of findtwoeq
; void john2880(lnes* wy2880, int aysrc,
;                int aydest, int aywidth)
; 1012 aysrc    1016 aydest    1020 aywidth
; 1000 ebp    1004 retad    1008 *wy2880
; 984 edx    988 ebx    992 esi    996 edi
; 968 1    972 0    976 eax    980 ecx
; 952 5    956 4    960 3    964 2
; 936 9    940 8    944 7    948 6
; 920 13    924 12    928 11    932 10
; 904 17    908 16    912 15    916
; 888 21    892 20    896 19    900
; 872 25    876 24    880 23    884
; 856 29    860 28    864 27    868
; 840 33    844 32    848 31    852 hxctr
; 824 37    828 36    832 35    836 hxright
; 808 41    812 40    816 39    820 hqsuba
; 792 45    796 44    800 43    804 one2880
; 776 49    780 48    784 47    788 fixesp
; 576 - 772    576 rindtemp
john2880: push ebp
 mov ebp,esp
 sub ebp,1000
 push edi
 push esi
 push ebx
 push edx
 push ecx
 push eax
 xor esi,esi
 add esi,1050
 mov edx,esi
 sub edx,1049
 mov ecx,esi
 sub ecx,1000
 mov eax,ecx
 add eax,eax
 add eax,eax
 add eax,eax
 xor edi,edi
john288pu: push edi
 add edi,edx
 sub ecx,edx
 jnz john288pu
 mov [ebp+788],eax
 mov ecx,esi
 sub ecx,1046
 mov edi,esi
 sub edi,794
 xor eax,eax
john288tu: push edi
 push eax
 call nampy
 add esp,[ebp+940]
 add eax,[ebp+844]
 sub ecx,edx
 jnz john288tu
 mov ecx,esi
 sub ecx,1000
john288ru: push eax
 sub ecx,edx
 jnz john288ru
 mov ebx,[ebp+1008]
 sub ebx,8192
 lea ecx,[ebx+crz0160]
 mov [ebp+804],ecx
 mov edx,[ebp+968]
 mov [ebx+alsel],edx
 mov edi,[ebp+1012]
 mov esi,[ebx+alsel]
 mov edx,[ebp+952]
 mov ecx,[ebp+1008]
 push edi
 push esi
 push edx
 push ecx
 call rw8056
 add esp,[ebp+908]
 xor edi,edi
 mov [ebp+852],edi
john2815: mov edi,[ebp+852]
 cmp edi,[ebp+1020]
 jns john2820
 mov esi,[ebp+852]
 add esi,[ebx+lowleftx]
 sub esi,[ebp+968]
 add esi,[ebp+804]
 sub esi,512
 xor edx,edx
 mov dl,[esi+512]
 mov [ebp+edi*1+576],dl
 mov ecx,[ebp+852]
 add ecx,[ebp+968]
 mov [ebp+852],ecx
 xor edi,edi
 jz john2815
john2820: mov edi,[ebp+1016]
 mov esi,[ebx+alsel]
 mov edx,[ebp+952]
 mov ecx,[ebp+1008]
 push edi
 push esi
 push edx
 push ecx
 call rw8056
 add esp,[ebp+908]
 xor esi,esi
 mov [ebp+852],esi
john2823: mov esi,[ebp+852]
 cmp esi,[ebp+1020]
 jns john2830
 mov edi,[ebp+852]
 add edi,[ebx+lowleftb]
 sub edi,[ebp+968]
 add edi,[ebp+804]
 sub edi,512
 xor edx,edx
 mov dl,[ebp+esi*1+576]
 mov [edi+512],dl
 mov ecx,[ebp+852]
 add ecx,[ebp+968]
 mov [ebp+852],ecx
 xor esi,esi
 jz john2823
john2830: mov edi,[ebp+1016]
 mov esi,[ebx+alsel]
 mov edx,[ebp+948]
 mov ecx,[ebp+1008]
 push edi
 push esi
 push edx
 push ecx
 call rw8056
 add esp,[ebp+908]
 add esp,[ebp+788]
 pop eax
 pop ecx
 pop edx
 pop ebx
 pop esi
 pop edi
 pop ebp
 ret
; bottom of john2880
; john2938(lnes* xy2938)
; 1000 ebp          1004 retad     1008 *xy2938
; 988 ebx           992 esi        996 edi
; 972 0    976 eax     980 ecx       984 edx
; 956 4    960 3    964 2    968 1
; 940 8    944 7    948 6    952 5
; 924 12    928 11    932       936 nextcalen
; 908 16    912 15    916 fixesp    920 johnjump
john2938: push ebp
 mov ebp,esp
 sub ebp,1000
 push edi
 push esi
 push ebx
 push edx
 push ecx
 push eax
 xor esi,esi
 add esi,3017
 mov edx,esi
 sub edx,3016
 mov ecx,esi
 sub ecx,3000
 mov eax,ecx
 add eax,eax
 add eax,eax
 xor edi,edi
john293pu: push edi
 add edi,edx
 sub ecx,edx
 jnz john293pu
 mov [ebp+916],eax
 mov ebx,[ebp+1008]
 sub ebx,8192
 xor edi,edi
 add edi,[ebx+uprightx]
 sub edi,[ebx+lowleftx]
 mov [ebx+jxwidth],edi
 mov edx,[ebx+afilelen]
 mov [ebp+936],edx
 mov edx,[ebx+y]
 mov [ebx+lowleftc],edx
 xor edi,edi
 add edi,[ebx+uprighty]
 sub edi,[ebx+lowlefty]
 mov [ebx+jyheight],edi
 mov edx,[ebx+lowleftc]
 add edx,[ebx+jyheight]
 mov [ebx+jynext],edx
 mov edx,[ebx+lowleftc]
 sub edx,[ebx+lowlefty]
 mov [ebx+jydiff],edx
; 2943 rem if jydiff < 0 then start small decrease
; rem if jydiff >= 0 then start big increase
; copy animation rectangle
 mov edx,[ebx+x]
 mov [ebx+lowleftb],edx
 mov edx,[ebx+lowleftb]
 sub edx,[ebx+lowleftx]
 mov [ebx+jxdiff],edx
 xor edx,edx
 add edx,2953
 mov [ebp+920],edx
 mov ecx,[ebx+jyheight]
 mov edx,[ebx+jyheight]
 cmp ecx,[ebp+972]
 js john29fai
 cmp edx,[ebp+972]
 jns john29sta
john29fai: xor edi,edi
 add edi,2984
 mov [ebp+920],edi
john29sta: mov ecx,[ebp+920]
 cmp ecx,2953
 jnz john29r21
 mov edx,[ebx+jxwidth]
 add edx,[ebp+968]
 mov [ebx+jxwidth],edx
 xor edx,edx
 add edx,2956
 mov [ebp+920],edx
 mov edx,[ebx+jyheight]
 add edx,[ebp+968]
 mov [ebx+jyheight],edx
 mov ecx,[ebx+jydiff]
 cmp ecx,[ebp+972]
 jns john29r21
 xor ecx,ecx
 add ecx,2972
 mov [ebp+920],ecx
john29r21: mov ecx,[ebp+920]
 cmp ecx,2956
 jnz john29r32
 mov edx,[ebx+uprighty]
 mov [ebx+jysrc],edx
 xor ecx,ecx
 sub ecx,[ebp+968]
 mov [ebx+yjn],ecx
 mov edx,[ebx+jynext]
 mov [ebx+jydest],edx
 xor ecx,ecx
 add ecx,2976
 mov [ebp+920],ecx
john29r32: mov edx,[ebp+920]
 cmp edx,2972
 jnz john29r40
 mov edx,[ebx+lowlefty]
 mov [ebx+jysrc],edx
 mov edx,[ebp+968]
 mov [ebx+yjn],edx
 mov edx,[ebx+lowleftc]
 mov [ebx+jydest],edx
 xor edx,edx
 add edx,2976
 mov [ebp+920],edx
john29r40: mov edi,[ebp+920]
 cmp edi,2976
 jz john29r42
 jmp john29r60
john29r42: mov edi,[ebp+972]
 mov [ebx+jyctr],edi
john29r43: mov edi,[ebx+jyctr]
 cmp edi,[ebx+jyheight]
 jns john29r57
john29r45: add edi,[ebp+968]
 mov [ebx+jyctr],edi
 mov edi,[ebx+jxwidth]
 mov esi,[ebx+jydest]
 mov edx,[ebx+jysrc]
 mov ecx,[ebp+1008]
 push edi
 push esi
 push edx
 push ecx
 call john2880
 add esp,[ebp+908]
 mov ecx,[ebp+936]
 cmp ecx,[ebx+jydest]
 jns john29r49
 mov edx,[ebx+jydest]
 mov [ebp+936],edx
john29r49: mov ecx,[ebx+jysrc]
 add ecx,[ebx+yjn]
 mov [ebx+jysrc],ecx
 mov edx,[ebx+jydest]
 add edx,[ebx+yjn]
 mov [ebx+jydest],edx
 jmp john29r43
john29r57: xor ecx,ecx
 add ecx,2984
 mov [ebp+920],ecx
john29r60: mov ecx,[ebp+920]
 cmp ecx,2984
 jnz john29r63
 mov edi,[ebp+936]
 mov [ebx+afilelen],edi
john29r63: xor edi,edi
 add esp,[ebp+916]
 pop eax
 pop ecx
 pop edx
 pop ebx
 pop esi
 pop edi
 pop ebp
 ret
; bottom of john2938
; int iscommandarg(lnes* cmavn)
; 1000 ebp      1004 retad      1008 *cmavn
; 984 edx      988 ebx     992 esi     996 edi
; 968 1        972 0       976 eax     980 ecx
; 952 5        956 4       960 3       964 2
; 936 9        940 8       944 7       948 6
; 920 13    924 12    928 11    932 10
; 904 17    908 16    912        916 iscgjmp
; 888 21    892 20    896 iscgctr    900 iscgtiny
; 872 25    876 24    880 11where    884 iscgboores
; 856 29    860 28    864 iscgbig    868 iscgdiff
; 840 33    844 32    848 fixesp    852 newleng
iscommandarg: push ebp
 mov ebp,esp
 sub ebp,1000
 push edi
 push esi
 push ebx
 push edx
 push ecx
 push eax
 xor esi,esi
 add esi,2034
 mov ecx,esi
 xor edi,edi
 sub ecx,2000
 mov edx,esi
 sub edx,2033
 mov eax,ecx
 add eax,eax
 add eax,eax
iscommandpua: push edi
 add edi,edx
 sub ecx,edx
 jnz iscommandpua
 mov ebx,[ebp+1008]
 sub ebx,8192
 mov [ebp+848],eax
 mov edx,[ebp+928]
 sub edx,[ebp+968]
 mov ecx,[ebx+a80w]
 push edx
 push ecx
 call nampy
 add esp,[ebp+940]
 lea edi,[ebx+crz0160]
 add edi,eax
 mov [ebp+880],edi
 mov ecx,[ebp+972]
 mov [ebp+868],ecx
 xor edx,edx
 add edx,11019
 mov [ebp+916],edx
 mov [ebp+884],ecx
 mov edi,[ebp+928]
 mov esi,[ebp+1008]
 push edi
 push esi
 call dlenval
 add esp,[ebp+940]
 mov [ebp+864],eax
 push edi
 push esi
 call tinylenval
 add esp,[ebp+940]
 mov [ebp+900],eax
 xor ecx,ecx
 cmp ecx,[ebp+900]
 jns iscg014
 mov edx,[ebp+864]
 sub edx,[ebp+900]
 sub edx,[ebp+968]
 mov [ebp+868],edx
iscg014: mov edi,[ebp+972]
 cmp edi,[ebp+868]
 jns iscg018
 mov ecx,[ebp+900]
 add ecx,[ebp+968]
 cmp ecx,[ebp+864]
 jns iscg018
 xor edx,edx
 add edx,2047
 mov [ebp+916],edx
iscg018: mov ecx,[ebp+916]
 cmp ecx,2047
 jz iscg020
 jmp iscg098
iscg020: mov ecx,[ebp+864]
 sub ecx,[ebp+868]
 mov [ebp+852],ecx
 mov ecx,[ebp+968]
 mov [ebp+896],ecx
iscg023: mov edx,[ebp+968]
 add edx,[ebp+868]
 mov ecx,[ebp+896]
 cmp ecx,edx
 jns iscg030
 mov edi,[ebp+880]
 sub edi,4096
 add edi,[ebp+896]
 sub edi,[ebp+968]
 mov esi,edi
 add esi,[ebp+852]
 xor edx,edx
 mov dl,[esi+4096]
 mov [edi+4096],dl
 mov edx,[ebp+896]
 add edx,[ebp+968]
 mov [ebp+896],edx
 xor edx,edx
 jz iscg023
iscg030: mov edx,[ebp+968]
 add edx,[ebp+868]
 mov [ebp+896],edx
iscg033: mov edx,[ebx+a80w]
 add edx,[ebp+968]
 mov ecx,[ebp+896]
 cmp ecx,edx
 jns iscg039
 mov edi,[ebp+880]
 add edi,[ebp+896]
 sub edi,[ebp+968]
 mov edx,[ebp+844]
 sub edi,2048
 mov [edi+2048],dl
 mov edx,[ebp+896]
 add edx,[ebp+968]
 mov [ebp+896],edx
 xor edx,edx
 jz iscg033
iscg039: mov ecx,[ebp+968]
 mov [ebp+884],ecx
iscg098: mov ecx,[ebp+884]
 mov [ebp+976],ecx
 add esp,[ebp+848]
 pop eax
 pop ecx
 pop edx
 pop ebx
 pop esi
 pop edi
 pop ebp
 ret
; bottom of iscommandarg
; printconst(lnes* firstponst, int firstconst,
;                            int howmanyconst)
; 1008 *firstponst    1012 firstconst    1016 howmanyconst
; 996 edi        1000 ebp        1004 retad
; 980 ecx    984 edx    988 ebx    992 esi
; 964 2    968 1    972 0        976 eax
; 948 6    952 fixesp   956 4        960 3
; 932 10    936 rconstpos   940 8    944 7
; 916 ll    920 hconstctr   924 12    928 11
printconst: push ebp
 mov ebp,esp
 sub ebp,1000
 push edi
 push esi
 push ebx
 push edx
 push ecx
 push eax
 xor esi,esi
 add esi,915
 xor edi,edi
 mov edx,esi
 sub edx,914
 mov ecx,esi
 sub ecx,900
 mov eax,ecx
 add eax,eax
 add eax,eax
printconstpu: push edi
 add edi,edx
 sub ecx,edx
 jnz printconstpu
 mov [ebp+952],eax
 mov ebx,[ebp+1008]
 sub ebx,8192
 mov eax,[ebx+a80w]
 mov ecx,[ebx+afilelen]
 add ecx,[ebp+972]
;         margin
 push eax
 push ecx
 call nampy
 add esp,[ebp+940]
 mov ecx,[ebx+a80w]
 add ecx,ecx
 add eax,ecx
 lea ecx,[ebx+0800000h]
 lea edx,[ebx+sandoval]
 sub ecx,edx
 sub ecx,8192
 sub ecx,eax
 mov eax,[ebx+a80w]
 push eax
 push ecx
 call smposdiv
 add esp,[ebp+940]
 mov [ebp+916],eax
 xor ecx,ecx
 mov edx,[ebp+1012]
 mov [ebp+936],edx
 mov [ebp+920],ecx
printc07: mov edi,[ebp+920]
 cmp edi,[ebp+1016]
 jns printc18
 mov edx,[ebp+936]
 mov ecx,[ebp+1008]
 push edx
 push ecx
 call litrlsput
 add esp,[ebp+940]
 xor ecx,ecx
 jz printc16
printc16: mov edi,[ebp+968]
 add [ebp+920],edi
 add [ebp+936],edi
 xor edi,edi
 jz printc07
printc18: mov edi,[ebp+1016]
 cmp edi,[ebp+940]
 jns printc19
 jmp printc20
printc19: mov ebx,[ebp+1008]
 sub ebx,8192
 xor edi,edi
 add edi,14649
 mov [ebp+920],edi
 mov edx,[ebp+932]
 mov ecx,[ebx+a80w]
 push edx
 push ecx
 call nampy
 add esp,[ebp+940]
 lea ecx,[ebx+crz0160]
 add ecx,eax
 lea edi,[ebp+920]
; printconst debugger 7948 916 ll
 mov esi,[ebp+916]
 mov edx,[ebp+964]
 push edi
 push esi
 push edx
 push ecx
 call chnvalue
 mov edx,[ebp+940]
 add edx,edx
 add esp,edx
 xor edx,edx
 sub edx,[ebp+928]
 mov ecx,[ebp+1008]
 push edx
 push ecx
 call litrlsput
 add esp,[ebp+940]
printc20: xor edi,edi
 add esp,[ebp+952]
 pop eax
 pop ecx
 pop edx
 pop ebx
 pop esi
 pop edi
 pop ebp
 ret
; bottom of printconst
; int nzendkeyline(lnes* ceeeln, int cdeeln,
;                 int ddkey, int kdinitreqnz)
; 1012 cdeeln   1016 kkdey   1020 kdinitreqnz
; 1000 ebp   1004 retad   1008 *ceeeln
; 984 edx   988 ebx   992 esi   996 edi
; 968 1     972 0     976 eax   980 ecx
; 952 5     956 4     960 3     964 2
; 936 9     940 8     944 7     948 6
; 920 13    924 12    928 11    932 10
; 904 17    908 16    912 a80wpl1   916 14
; 888 21    892 20    896 19    900 nzendkres
; 872 25    876 24    880 23    884 dckey
; 856 29    860 28    864 27    868 dtkey
; 840 33    844 32    848 31    852 dfkey
; 824 37    828 36    832 35    836 dfallow
; 808 41    812 40    816 whereELN    820
; 792 45    796 44    800 fixesp    804
; 776 49    780 48    784 47    788
; 760 53    764 52    768 51    772 50
; 744 57    748 56    752 55    756 54
; 728 61    732 60    736 59    740 58
; 712 65A    716 64    720 63    724 11where
; 696 69E    700 68D    704 67C    708 66B
; 680 73I    684 72H    688 71G    692 70F
; 664 77M    668 76L    672 75K    676 74J
; 648 81Q    652 80P    656 79O    660 78N
; 632 85U    636 84T    640 83S    644 82R
; 616 89Y    620 88X    624 87W    628 86V
; 600 93    604 92    608 91    612 90Z
nzendkeyline: push ebp
 mov ebp,esp
 sub ebp,1000
 push edi
 push esi
 push ebx
 push edx
 push ecx
 push eax
 xor esi,esi
 add esi,994
 xor edi,edi
 mov edx,esi
 sub edx,993
 mov ecx,esi
 sub ecx,900
 mov eax,ecx
 add eax,eax
 add eax,eax
nzendkeylipu: push edi
 add edi,edx
 sub ecx,edx
 jnz nzendkeylipu
 mov [ebp+800],eax
 mov ebx,[ebp+1008]
 sub ebx,8192
 mov edi,[ebp+1012]
 sub edi,[ebp+968]
 mov esi,[ebx+a80w]
 mov edx,esi
 add edx,[ebp+968]
 mov [ebp+912],edx
 push edi
 push esi
 call nampy
 add esp,[ebp+940]
 lea edi,[ebx+crz0160]
 add eax,edi
 mov [ebp+816],eax
 mov edx,[ebp+928]
 sub edx,[ebp+968]
 push edx
 push esi
 call nampy
 add esp,[ebp+940]
 add eax,edi
 mov [ebp+724],eax
 mov ecx,[ebp+1012]
 mov [ebx+alsel],ecx
 xor edx,edx
 mov [ebp+900],edx
 xor edx,edx
 cmp edx,[ebp+1020]
 jz nzendk020
 mov ecx,[ebp+968]
 mov [ebx+cmdkeyxctr],ecx
 mov ecx,[ebp+1012]
 cmp ecx,[ebp+940]
 jz nzend014
 mov esi,[ebp+1008]
 push ecx
 push esi
 call clearline
 add esp,[ebp+940]
 xor edx,edx
 jz nzendk020
nzend014: mov edx,[ebp+1008]
 push ecx
 push edx
 call dlenval
 add esp,[ebp+940]
 add eax,[ebp+968]
 mov [ebx+cmdkeyxctr],eax
nzendk020: xor edi,edi
 add edi,1255
 sub edi,1000
 and edi,[ebp+1016]
 mov [ebp+884],edi
 xor edi,edi
 add edi,1512
 sub edi,1000
 mov edx,[ebp+1016]
 push edi
 push edx
 call smposdiv
 add esp,[ebp+940]
 mov [ebp+868],eax
 mov ecx,[ebp+928]
 cmp ecx,[ebp+1012]
 jnz nzendk025
 mov edx,[ebp+968]
 mov [ebp+868],edx
nzendk025: mov ecx,[ebp+844]
 mov [ebp+852],ecx
 mov edx,[ebp+884]
 cmp edx,[ebp+844]
 js nzend029
 xor ecx,ecx
 add ecx,1126
 sub ecx,1000
 cmp ecx,edx
 js nzend029
 mov [ebp+852],edx
nzend029: xor ecx,ecx
 mov [ebp+836],ecx
 mov edx,[ebp+868]
 mov ecx,[ebp+1012]
 cmp edx,[ebp+964]
 jns nzend031
 cmp ecx,[ebp+928]
 jnz nzend031
 mov edx,[ebp+968]
 mov [ebp+836],edx
nzend031: xor edi,edi
 cmp edi,[ebp+836]
 jnz nzend033
 jmp nzend040
nzend033: mov ecx,[ebp+884]
 cmp ecx,[ebp+940]
 jnz nzend035
 xor edi,edi
 mov [ebp+836],edi
 mov edx,[ebx+cmdkeyxctr]
 cmp edx,[ebp+964]
 js nzend035
 cmp edx,[ebp+912]
 jns nzend035
 sub edx,[ebp+968]
 mov [ebx+cmdkeyxctr],edx
 sub edx,[ebp+968]
 mov edi,[ebp+816]
 add edi,edx
 sub edi,512
 mov edx,[ebp+844]
 mov [edi+512],dl
nzend035: mov ecx,[ebp+884]
 cmp ecx,[ebp+920]
 jz nzend038
 cmp ecx,[ebp+932]
 jnz nzend040
nzend038: xor edi,edi
 mov [ebp+836],edi
 mov ecx,[ebp+968]
 mov [ebp+900],ecx
nzend040: xor edi,edi
 cmp edi,[ebp+836]
 jz nzend046
 mov esi,[ebx+cmdkeyxctr]
 cmp esi,[ebp+968]
 js nzend046
 cmp esi,[ebp+912]
 jns nzend046
 xor ecx,ecx
 mov [ebp+836],ecx
 mov edi,esi
 sub edi,[ebp+968]
 add edi,[ebp+816]
 sub edi,4096
 mov edx,[ebp+852]
 mov [edi+4096],dl
 add esi,[ebp+968]
 mov [ebx+cmdkeyxctr],esi
 cmp esi,[ebp+912]
 js nzend046
 mov ecx,[ebp+968]
 mov [ebp+900],ecx
nzend046: mov ecx,[ebp+1012]
 mov edx,[ebp+868]
 cmp ecx,[ebp+928]
 jns nzend049
 cmp edx,[ebp+960]
 jns nzend049
 mov esi,[ebp+968]
 mov [ebp+836],esi
nzend049: mov edi,[ebp+972]
 cmp edi,[ebp+836]
 jnz nzend048
nzend0c9: jmp nzend059
nzend048: mov esi,[ebp+884]
 cmp esi,[ebp+940]
 jnz nzend054
 xor edi,edi
 mov [ebp+836],edi
 mov edx,[ebx+cmdkeyxctr]
 cmp edx,[ebp+964]
 js nzend054
 cmp edx,[ebp+912]
 jns nzend054
 mov [ebx+x],edx
 mov edi,[ebp+940]
 mov esi,[ebp+1008]
 push edi
 push esi
 call dkx2050
 add esp,[ebp+940]
 mov esi,[ebx+x]
 mov [ebx+cmdkeyxctr],esi
; xxxxxxxxxxxx
 sub esi,[ebp+968]
 mov edx,[ebp+844]
 sub esi,4096
 add esi,[ebp+816]
 mov [esi+4096],dl
; 30=6*5
nzend054: mov edi,[ebp+884]
 cmp edi,[ebp+920]
 jz nzend057
 cmp edi,[ebp+932]
 jnz nzend059
nzend057: xor esi,esi
 mov [ebp+836],esi
 mov ecx,[ebp+968]
 mov [ebp+900],ecx
 mov [ebx+x],ecx
nzend059: xor edi,edi
 cmp edi,[ebp+836]
 jnz zzend062
zzend061: jmp nzend063
zzend062: mov esi,[ebx+cmdkeyxctr]
 cmp esi,[ebp+968]
 js zzend061
 cmp esi,[ebp+912]
 jns zzend061
 mov [ebx+x],esi
 mov edx,[ebp+868]
 cmp edx,[ebp+964]
 jns zzend061
 mov edx,[ebp+1012]
 mov ecx,[ebp+852]
 mov eax,[ebp+1008]
 push edx
 push ecx
 push eax
 call ikx1864
 add esp,[ebp+924]
 mov edx,[ebx+x]
 mov [ebx+cmdkeyxctr],edx
 xor edi,edi
 mov [ebp+836],edi
 cmp edx,[ebp+912]
 js nzend063
 mov ecx,[ebp+968]
 mov [ebp+900],ecx
nzend063: mov ecx,[ebp+1012]
 mov edx,[ebp+868]
 cmp ecx,[ebp+928]
 jns nzend067
 cmp edx,[ebp+964]
 jnz nzend067
nzend064: mov edi,[ebp+968]
 mov [ebp+836],edi
nzend067: xor edi,edi
 cmp edi,[ebp+836]
 jnz nzend069
 jmp nzend081
nzend069: mov esi,[ebp+884]
 cmp esi,[ebp+648]
 jnz nzend071
 mov edi,[ebp+968]
 mov [ebx+cmdkeyxctr],edi
 mov ecx,[ebp+972]
 mov [ebp+836],ecx
nzend071: cmp esi,[ebp+672]
 jnz nzend073
 mov ecx,[ebx+cmdkeyxctr]
 cmp ecx,[ebp+964]
 js nzend073
 sub ecx,[ebp+968]
 mov [ebx+cmdkeyxctr],ecx
 xor edx,edx
 mov [ebp+836],edx
nzend073: cmp esi,[ebp+664]
 jnz nzend077
 mov edx,[ebx+cmdkeyxctr]
 cmp edx,[ebx+a80w]
 jns nzend077
 add edx,[ebp+968]
 mov [ebx+cmdkeyxctr],edx
 xor edi,edi
 mov [ebp+836],edi
nzend077: cmp esi,[ebp+644]
 jnz nzend079
 mov ecx,[ebp+968]
 sub ecx,[ebx+insertype]
 mov [ebx+insertype],ecx
 xor edi,edi
 mov [ebp+836],edi
nzend079: cmp esi,[ebp+640]
 jnz nzend081
 xor edi,edi
 mov [ebp+836],edi
 mov edx,[ebx+cmdkeyxctr]
 cmp edx,[ebp+968]
 js nzend081
 cmp edx,[ebp+912]
 jns nzend081
 mov [ebx+x],edx
 mov ecx,[ebp+956]
 mov eax,[ebp+1008]
 push ecx
 push eax
 call dkx2050
 add esp,[ebp+940]
 mov ecx,[ebx+x]
 mov [ebx+cmdkeyxctr],ecx
nzend081: xor edi,edi
 mov [ebx+twocurwozy],edi
 mov [ebx+twocurwozx],edi
 mov ecx,[ebx+ypheight]
 sub ecx,[ebx+nznormalend]
 mov [ebx+onecurwozy],ecx
 mov edx,[ebx+cmdheight]
 cmp ecx,edx
 jns nzend084
 mov [ebx+onecurwozy],edx
nzend084: mov ecx,[ebp+968]
 add [ebx+onecurwozy],ecx
 mov edx,[ebx+cmdkeyxctr]
 mov [ebx+onecurwozx],edx
 xor edi,edi
 cmp edi,[ebp+900]
 jz nzend087
 mov [ebx+onecurwozx],edi
nzend087: mov ecx,[ebp+1012]
 cmp ecx,[ebp+928]
 jz nzend091
 mov ecx,[ebx+a80w]
 mov esi,[ebp+816]
 mov edi,[ebp+724]
 sub edi,512
 sub esi,512
 mov edx,[ebp+968]
nzend089: mov al,[esi+512]
 mov [edi+512],al
 add esi,edx
 add edi,edx
 sub ecx,edx
 jnz nzend089
nzend091: mov edx,[ebx+ypheight]
 sub edx,[ebx+nznormalend]
 sub edx,[ebp+972]
 mov ecx,[ebx+a80w]
 push edx
 push ecx
 call nampy
 add esp,[ebp+940]
 lea edi,[ebx+evwr]
 add edi,eax
 sub edi,4096
 mov esi,[ebp+724]
 sub esi,2048
 mov eax,[ebp+968]
 xor edx,edx
nzend092: mov dl,[esi+2048]
 mov [edi+4096],dl
 add esi,eax
 add edi,eax
 sub ecx,eax
 jnz nzend092
nzend093: mov edx,[ebp+900]
 mov [ebp+976],edx
 add esp,[ebp+800]
 pop eax
 pop ecx
 pop edx
 pop ebx
 pop esi
 pop edi
 pop ebp
 ret
; bottom of nzendkeyline
; void udgetcoml(lnes* dgcttn, int dgctln,
;                int ndjmp, int lopjmp)
; 1012 dgctln    1016 ndjmp    1020 lopjmp
; 1000 ebp    1004 retad    1008 *dgcttn
; 894 edx    988 ebx    992 esi    996 edi
; 968 1    972 0    976 eax
; 952 5    956 4    960 3    980 ecx
; 936 9    940 8    944 7    964 2
; 920 13    924 12    928 11    948 6
; 904 17    908 16    912 15    916 fixesp
udgetcoml: push ebp
 mov ebp,esp
 sub ebp,1000
 push edi
 push esi
 push ebx
 push edx
 push ecx
 push eax
 xor esi,esi
 add esi,2018
 mov edx,esi
 sub edx,2017
 mov ecx,esi
 sub ecx,2000
 mov eax,ecx
 add eax,eax
 add eax,eax
 xor edi,edi
udgetpuml: push edi
 add edi,edx
 sub ecx,edx
 jnz udgetpuml
 mov [ebp+916],eax
 mov ebx,[ebp+1008]
 sub ebx,8192
 mov ecx,[ebp+1020]
 cmp ecx,[ebx+dagrajmpnow]
 jz udg8119
 jmp udgetnotl
udg8119: xor edi,edi
 add edi,53098
 mov [ebx+dagrajmpnow],edi
 mov [ebx+freddynext],ecx
 xor edi,edi
 cmp edi,[ebx+keyclineinit]
 jz udg8126
 mov ecx,[ebp+1008]
 push edi
 push ecx
 call litrlsput
 add esp,[ebp+940]
 mov ecx,[ebp+968]
 mov [ebx+cmdkeyxctr],ecx
udg8126: mov edi,[ebx+keyclineinit]
 mov esi,[ebx+dagranewkey]
 mov edx,[ebp+1012]
 mov ecx,[ebp+1008]
 push edi
 push esi
 push edx
 push ecx
 call nzendkeyline
 add esp,[ebp+908]
 mov [ebp+932],eax
 xor edi,edi
 mov [ebx+keyclineinit],edi
 cmp edi,[ebp+932]
 jz udgetnotl
 mov ecx,[ebp+1016]
 mov [ebx+dagrajmpnow],ecx
udgetnotl: mov edi,[ebp+916]
 add esp,edi
 pop eax
 pop ecx
 pop edx
 pop ebx
 pop esi
 pop edi
 pop ebp
 ret
; bottom of udgetcoml
; void tinypcl(lnes* neeeta, int nexsta,
;      int prwih, int gtonec, int actma)
; 1016 prwih    1020 gtonec    1024 actma
; 1004 retad    1008 *neeeta    1012 nexsta
; 988 ebx    992 esi    996 edi    1000 ebp
; 972 0    976 eax    980 ecx    984 edx
; 956 4    960 3    964 2    968 1
; 940 8    944 7    948 6    952 5
; 924 12    928 11    932 10    936 fixesp
; 908 16    912 15    916 14    920 13
tinypcl: push ebp
 mov ebp,esp
 sub ebp,1000
 push edi
 push esi
 push ebx
 push edx
 push ecx
 push eax
 xor esi,esi
 add esi,3017
 mov ecx,esi
 sub ecx,3000
 mov edx,esi
 sub edx,3016
 xor edi,edi
 mov eax,ecx
 add eax,eax
 add eax,eax
tinypul: push edi
 add edi,edx
 sub ecx,edx
 jnz tinypul
 mov [ebp+936],eax
 mov ebx,[ebp+1008]
 sub ebx,8192
 mov edi,[ebp+1024]
 cmp edi,[ebx+dagrajmpnow]
 jz tinypbl
 jmp tinysetl
tinypbl: mov ecx,[ebp+968]
 cmp ecx,[ebp+1020]
 jns tinypel
 mov eax,[ebp+1008]
 push ecx
 push eax
 call clearpage
 add esp,[ebp+940]
tinypel: mov edx,[ebp+1016]
 mov eax,[ebp+1008]
 push ecx
 push edx
 push eax
 call printconst
 add esp,[ebp+924]
 mov edx,[ebp+968]
 mov [ebx+keyclineinit],edx
 xor esi,esi
 mov ecx,[ebp+1008]
 push esi
 push ecx
 call litrlsput
 add esp,[ebp+940]
tinypgl: mov edx,[ebp+1012]
 mov [ebx+freddynext],edx
 xor ecx,ecx
 add ecx,53098
 mov [ebx+dagrajmpnow],ecx
tinysetl: mov ecx,[ebp+1020]
 cmp ecx,[ebp+968]
 jns tinyseel
 mov edx,[ebx+freddynext]
 mov [ebx+dagrajmpnow],edx
tinyseel: mov edi,[ebp+936]
 add esp,edi
 pop eax
 pop ecx
 pop edx
 pop ebx
 pop esi
 pop edi
 pop ebp
 ret
; bottom of tinypcl
; void new2608(lnes* lsnew)
; 1000 ebp    1004 retad    1008 *lsnew
; 984 edx    988 988    992 esi    996 edi
; 968 1    972 0    976 eax    980 ecx
; 952 5    956 4    960 3    964 2
; 936 9    940 8    944 7    948 6
; 920 13    924 12    928 11    932 10
; 904 17    908 16    912 15    916 14
; 888 21    892 20    896 19    900 fixesp
new2608: push ebp
 mov ebp,esp
 sub ebp,1000
 push edi
 push esi
 push ebx
 push edx
 push ecx
 push eax
 xor ecx,ecx
 add ecx,922
 sub ecx,900
 xor edx,edx
 add edx,902
 sub edx,901
 mov eax,ecx
 add eax,eax
 add eax,eax
 xor ebx,ebx
new26pu: push ebx
 add ebx,edx
 sub ecx,edx
 jnz new26pu
 mov [ebp+900],eax
 mov ebx,[ebp+1008]
 sub ebx,8192
 xor esi,esi
 mov edi,[ebp+968]
 mov ecx,[ebp+924]
 add ecx,ecx
 mov [ebx+ypheight],ecx
 mov edx,[ebp+944]
 xor ecx,ecx
 add ecx,480
 sub ecx,400
 mov [ebx+a80w],ecx
 mov edx,[ebp+936]
 mov [ebx+cmdheight],edx
 add edx,[ebp+968]
 mov [ebx+keysdebugger],esi
 mov [ebx+leftdebugger],esi
 mov [ebx+nznormalend],esi
 mov [ebx+nzshift],esi
 mov [ebx+x],edi
 mov [ebx+y],edi
 mov [ebx+repceedag],esi
 mov [ebx+nzsaveskipod],esi
 mov [ebx+prindiff],esi
 mov [ebx+prinjill],esi
 mov [ebx+nzerror],esi
 mov [ebx+afilelen],esi
 mov [ebx+chnext],esi
 mov [ebx+chdoc],esi
 mov [ebx+chzerv],esi
 mov [ebx+insertype],edi
 mov [ebx+inspg],esi
 mov [ebx+marginselect],edi
 mov [ebx+prindiffprv],esi
 mov [ebx+uprighty],esi
 mov [ebx+lowlefty],edi
 mov [ebx+mouallocal],esi
 mov [ebx+moualglobal],esi
 mov [ebx+yre],edi
 mov [ebx+xe],edi
 mov [ebx+uprightx],esi
 mov [ebx+lowleftx],edi
 mov edx,[ebp+908]
 add ecx,ecx
 mov [ebx+bkgnd],ecx
 mov [ebx+uppercase],esi
 mov [ebx+evdk],esi
 mov [ebx+rep0],esi
 mov edx,[ebp+928]
 sub edx,[ebp+968]
 mov ecx,[ebx+a80w]
 push edx
 push ecx
 call nampy
 add esp,[ebp+940]
 lea ecx,[ebx+crz0160]
 add ecx,eax
 mov [ebx+elevrd],ecx
 mov edx,[ebp+968]
 mov ecx,[ebp+1008]
 push edx
 push ecx
 call clearpage
 add esp,[ebp+940]
 mov edx,[ebp+940]
 mov ecx,[ebp+1008]
 push edx
 push ecx
 call clearline
 add esp,[ebp+940]
 mov [ebx+eofi],esi
 mov [ebx+onecurwozx],esi
 mov [ebx+onecurwozy],esi
 mov ecx,[ebp+908]
 add ecx,ecx
 mov [ebx+dagraprvkey],ecx
 xor edx,edx
 add edx,927
 sub edx,900
 mov ecx,[ebp+1008]
 push edx
 push ecx
 call litrlsput
 add esp,[ebp+940]
 add esp,[ebp+900]
 pop eax
 pop ecx
 pop edx
 pop ebx
 pop esi
 pop edi
 pop ebp
 ret
; end of new2608
; void cdgetcoml(lnes* cgcttn,int cgctln,int ncjmp,
;                    int lopcjmp);
; 1012 cgctln    1016 ncjmp    1020 lopcjmp
; 1000 ebp        1004 retad    1008 *cgcttn
; 984 edx    988 ebx    992 esi    996 edi
; 968 1    972 0    976 eax    980 ecx
; 952 5    956 4    960 3    964 2
; 936 9    940 8    944 7    948 6
; 920 13    924 12    928 11    932 10
; 904 17    908 16    912 15    916 fixesp
; 888 21    892 20    896 19    900
; 872 25    876 24    880 23    884
; 856 29    860 28    864 27    868
; 840 33    844 32    848 31    852 gclnc
; 824 37    828 36    832 35    836 cgctla
; 808 41    812 40    816 39    820 cfiltkey
; 792 45    796 44    800 43    804
; 776 49    780 48    784 47    788
; 760 53    764 52    768 51    772 50
; 744 57    748 56    752 55    756 54
; 728 61    732 60    736 59    740 58
; 712 65 A    716 64    720 63    724
; 696 69 E    700 68 D    704 67 C     708 66 B
; 680 73 I    684 72 H    688 71 G     692 70 F
; 664 77 M    668 76 L    672 75 K     676 74 J
; 648 81 Q    652 80 P    656 79 O     660 78 N
; 632 85 U    636 84 T    640 83 S     644 82 R
; 616 89 Y    620 88 X    624 87 W     628 86 V
; 600 93    604 92    608 91    612 90 Z
; 584 97 a    588 96    592 95    596
; 568 101 e    572 100 d    576 99 c    580 98 b
; 552 105 i    556 104 h    560 103 g    564 102 f
; 536 109 m    540 108 l    544 107 k    548 106 j
; 520 113 q    524 112 p    528 111 o    532 110 n
; 504 117 u    508 116 t    512 115 s    516 114 r
; 488 121 y    492 120 x    496 119 w    500 118 v
; 472 125    476 124    480 123    484 122 z
; 456 129    460 128    464 127    468 126
; 440 133    444 132    448 131    452 130
cdgetcoml: push ebp
 mov ebp,esp
 sub ebp,1000
 push edi
 push esi
 push ebx
 push edx
 push ecx
 push eax
 xor esi,esi
 add esi,1134
 mov edx,esi
 sub edx,1133
 mov ecx,esi
 sub ecx,1000
 mov eax,ecx
 add eax,eax
 add eax,eax
 xor edi,edi
cdgetcopu: push edi
 add edi,edx
 sub ecx,edx
 jnz cdgetcopu
 mov [ebp+916],eax
 mov ebx,[ebp+1008]
 sub ebx,8192
 mov ecx,[ebp+1020]
 cmp ecx,[ebx+dagrajmpnow]
 jz cdgetstart
 jmp cdgetnotl
cdgetstart: xor edi,edi
 add edi,53098
 mov [ebx+dagrajmpnow],edi
 mov [ebx+freddynext],ecx
 mov edx,[ebp+1012]
 sub edx,[ebp+968]
 mov ecx,[ebx+a80w]
 push edx
 push ecx
 call nampy
 add esp,[ebp+940]
 lea edi,[ebx+crz0160]
 add edi,eax
 mov [ebp+836],edi
 mov edx,[ebp+972]
 cmp edx,[ebx+keyclineinit]
 jz cdnoninit
 mov edx,[ebp+1012]
 mov ecx,[ebp+1008]
 push edx
 push ecx
 call clearline
 add esp,[ebp+940]
 mov ecx,[ebp+968]
 mov [ebx+cmdkeyxctr],ecx
cdnoninit: xor edi,edi
 mov [ebx+keyclineinit],edi
 mov [ebp+852],edi
 mov edx,[ebx+dagranewkey]
 mov ecx,[ebp+464]
 add ecx,[ebp+460]
 and edx,ecx
 mov [ebp+820],edx
 cmp edx,[ebp+940]
 jnz cdnonback
 mov esi,[ebx+cmdkeyxctr]
 sub esi,[ebp+968]
 cmp esi,[ebp+968]
 js cdnonback
 mov [ebx+cmdkeyxctr],esi
 sub esi,[ebp+968]
 add esi,[ebp+836]
 mov edx,[ebp+844]
 sub esi,512
 mov [esi+512],dl
cdnonback: mov edx,[ebx+dagranewkey]
 cmp edx,[ebp+844]
 js cdnondkey
 cmp edx,[ebp+464]
 jns cdnondkey
 mov edi,[ebx+cmdkeyxctr]
 sub edi,[ebp+968]
 js cdnondkey
 cmp edi,[ebx+a80w]
 jns cdnondkey
 mov esi,edi
 add edi,[ebp+836]
 sub edi,2048
 mov [edi+2048],dl
 add esi,[ebp+964]
 mov [ebx+cmdkeyxctr],esi
 cmp esi,[ebx+a80w]
 js cdnondkey
 mov ecx,[ebp+968]
 mov [ebp+852],ecx
 mov edx,[ebx+a80w]
 mov [ebx+cmdkeyxctr],edx
cdnondkey: mov edx,[ebx+dagranewkey]
 cmp edx,[ebp+932]
 jz cdisda
 cmp edx,[ebp+920]
 jnz cdnotda
cdisda: mov ecx,[ebp+968]
 mov [ebp+852],ecx
cdnotda: xor edi,edi
 cmp edi,[ebp+852]
 jz cdnotchg
 mov ecx,[ebp+1016]
 mov [ebx+dagrajmpnow],ecx
cdnotchg: mov edx,[ebx+ypheight]
 sub edx,[ebx+nznormalend]
 sub edx,[ebp+968]
 add edx,[ebp+460]
 sub edx,[ebp+464]
 mov ecx,[ebx+a80w]
 push edx
 push ecx
 call nampy
 add esp,[ebp+940]
 lea edi,[ebx+evwr]
 add edi,eax
 mov esi,[ebp+836]
 sub esi,2048
 sub edi,1024
 mov eax,[ebp+968]
cdgetpr: mov dl,[esi+2048]
 mov [edi+1024],dl
 add esi,eax
 add edi,eax
 sub ecx,eax
 jnz cdgetpr
cdgetnotl: mov edi,[ebp+916]
 add esp,edi
 pop eax
 pop ecx
 pop edx
 pop ebx
 pop esi
 pop edi
 pop ebp
 ret
; bottom of replacement cdgetcoml
; void ron52640(lnes* lnron)
; implied argument is (*(lnron)).dagranewkey
; 1000 ebp   1004 retad   1008 *lnron
; 984 edx   988 ebx   992 esi   996 edi
; 968 1     972 0     976 eax   980 ecx
; 952 5     956 4     960 3     964 2
; 936 9     940 8     944 7     948 6
; 920 13    924 12    928 11    932 10
; 904 17    908 16    912 15    916 14
; 888 21    892 20    896 19    900 18
; 872 25    876 24    880 23    884 22
; 856 29    860 28    864 27    868 26
; 840 33    844 32    848 31    852
; 824 37    828 36    832 35    836
; 808 41    812 40    816 39    820
; 792 45    796 44    800 43    804 42
; 776 49    780 48    784 47    788 46
; 760 53    764 52    768 51    772 50
; 744 57    748 56    752 55    756 54
; 728 61    732 60    736 59    740 58
; 712 65A    716 64    720 63    724 62
; 696 69E    700 68D    704 67C    708 66B
; 680 73I    684 72H    688 71G    692 70F
; 664 77M    668 76L    672 75K    676 74J
; 648 81Q    652 80P    656 79O    660 78N
; 632 85U    636 84T    640 83S    644 82R
; 616 89Y    620 88X    624 87W    628 86V
; 600 93    604 92    608 91    612 90Z
; 584 97    588 96    592 95    596 fixesp
; 568 101    572 100    576 99    580
; 552 105    556 104    560 103    564
; 536 109    540 108    544 107    548
; 520 113    524 112    528 111    532
; 504 117    508 116    512 115    516
; 488 121    492 120    496 119    500
; 472 125    476 124    480 123    484
; 456 129    460 128    464 127    468 126
ron52640: push ebp
 mov ebp,esp
 sub ebp,1000
 push edi
 push esi
 push ebx
 push edx
 push ecx
 push eax
 xor edi,edi
 xor esi,esi
 add esi,1130
 mov edx,esi
 sub edx,1129
 mov ecx,esi
 sub ecx,1000
 mov eax,ecx
 add eax,eax
 add eax,eax
ron526pu: push edi
 add edi,edx
 sub ecx,edx
 jnz ron526pu
 mov [ebp+596],eax
 mov ebx,[ebp+1008]
 sub ebx,8192
 xor edi,edi
 xor ecx,ecx
 add ecx,52640
 cmp ecx,[ebx+dagrajmpnow]
 jnz notrox52640
 mov edx,[ebp+968]
 mov [ebx+xe],edx
 mov [ebx+yre],edx
 mov [ebx+x],edx
 mov [ebx+y],edx
 xor ecx,ecx
 add ecx,52648
 mov [ebx+dagrajmpnow],ecx
notrox52640: xor ecx,ecx
 add ecx,52642
 cmp ecx,[ebx+dagrajmpnow]
 jnz notron52642
 mov ecx,[ebx+xe]
 mov edx,[ebx+yre]
 mov [ebx+x],ecx
 mov [ebx+y],edx
 xor ecx,ecx
 add ecx,52645
 mov [ebx+dagrajmpnow],ecx
notron52642: xor ecx,ecx
 add ecx,52645
 cmp ecx,[ebx+dagrajmpnow]
 jnz notron52645
 mov edx,[ebx+dagranewkey]
 mov ecx,[ebp+1008]
 push edx
 push ecx
 call udregkey2176
 add esp,[ebp+940]
notron52645: xor ecx,ecx
 add ecx,52646
 cmp ecx,[ebx+dagrajmpnow]
 jnz notron52646
 mov ecx,[ebx+x]
 mov edx,[ebx+y]
 mov [ebx+xe],ecx
 mov [ebx+yre],edx
 xor ecx,ecx
 add ecx,52648
 mov [ebx+dagrajmpnow],ecx
notron52646: xor ecx,ecx
 add ecx,52648
 cmp ecx,[ebx+dagrajmpnow]
 jnz notron52648
 mov edx,[ebp+968]
 mov ecx,[ebp+1008]
 push edx
 push ecx
 call clearpage
 add esp,[ebp+940]
 xor ecx,ecx
 add ecx,52661
 xor edx,edx
 add edx,53098
 mov [ebx+freddynext],ecx
 mov [ebx+dagrajmpnow],edx
 mov edx,[ebp+768]
 sub edx,[ebp+852]
 add edx,[ebp+968]
 mov ecx,[ebp+852]
 mov eax,[ebp+1008]
 push edx
 push ecx
 push eax
 call printconst
 add esp,[ebp+924]
notron52648: xor ecx,ecx
 add ecx,52661
 cmp ecx,[ebx+dagrajmpnow]
 jz isron52661
 jmp notron52661
isron52661: mov ecx,[ebp+460]
 add ecx,[ebp+464]
 mov edx,[ebx+dagranewkey]
 and edx,ecx
 mov [ebx+keychar5],edx
 mov esi,[ebp+844]
 cmp edx,[ebp+844]
 js roncmd32
 cmp edx,[ebp+464]
 jns roncmd32
 xor ecx,ecx
 add ecx,1023
 cmp ecx,[ebx+dagranewkey]
 js roncmd32
 mov esi,edx
 cmp edx,[ebp+584]
 js roncmd32
 cmp edx,[ebp+480]
 jns roncmd32
 sub esi,[ebp+844]
roncmd32: mov [ebx+keycmd5],esi
 xor ecx,ecx
 add ecx,52661
 xor edi,edi
 add edx,53098
 mov [ebx+freddynext],ecx
 mov [ebx+dagrajmpnow],edx
 mov ecx,[ebp+920]
 cmp ecx,[ebx+keychar5]
 jz ronisodoa
 mov ecx,[ebp+932]
 cmp ecx,[ebx+keychar5]
 jnz notronc10
ronisodoa: xor edx,edx
 add edx,52642
 mov [ebx+freddynext],edx
notronc10: xor ecx,ecx
 cmp ecx,[ebx+nznormalend]
 jnz notronc27
 mov ecx,[ebp+864]
 cmp ecx,[ebx+keychar5]
 jnz notronc27
 xor ecx,ecx
 add ecx,52800
 mov [ebx+dagrajmpnow],ecx
notronc27: mov ecx,[ebp+644]
 cmp ecx,[ebx+keycmd5]
 jnz notronr
 xor ecx,ecx
 add ecx,52642
 mov [ebx+freddynext],ecx
 xor ecx,ecx
 add ecx,53098
 mov [ebx+dagrajmpnow],ecx
notronr: mov ecx,[ebp+660]
 cmp ecx,[ebx+keycmd5]
 jnz notronn
 mov edx,[ebp+1008]
 push edx
 call new2608
 add esp,[ebp+956]
 xor edx,edx
 add edx,52642
 mov [ebx+freddynext],edx
 xor edx,edx
 add edx,53098
 mov [ebx+dagrajmpnow],edx
notronn: mov esi,[ebx+keycmd5]
 xor edx,edx
 cmp esi,[ebp+656]
 jnz notrono
 xor ecx,ecx
 add ecx,52733
 mov [ebx+dagrajmpnow],ecx
notrono: cmp esi,[ebp+652]
 jnz notronp
 xor ecx,ecx
 add ecx,52988
 mov [ebx+dagrajmpnow],ecx
notronp: cmp esi,[ebp+620]
 jnz notronx
 xor ecx,ecx
 add ecx,36155
 mov [ebx+dagrajmpnow],ecx
notronx: cmp esi,[ebp+668]
 jnz notronl
 xor ecx,ecx
 add ecx,52736
 mov [ebx+dagrajmpnow],ecx
notronl: cmp esi,[ebp+728]
 jnz notroneq
 xor ecx,ecx
 add ecx,36585
 mov [ebx+dagrajmpnow],ecx
notroneq: cmp esi,[ebp+612]
 jnz notronz
 xor ecx,ecx
 add ecx,36156
 mov [ebx+dagrajmpnow],ecx
notronz: cmp esi,[ebp+712]
 jnz notrona
 xor ecx,ecx
 add ecx,52776
 mov [ebx+dagrajmpnow],ecx
notrona: cmp esi,[ebp+632]
 jnz notronu
 xor ecx,ecx
 add ecx,36154
 mov [ebx+dagrajmpnow],ecx
notronu: cmp esi,[ebp+696]
 jnz notrone
 xor ecx,ecx
 add ecx,52782
 mov [ebx+dagrajmpnow],ecx
notrone: cmp esi,[ebp+648]
 jnz notronq
 xor ecx,ecx
 add ecx,52800
 mov [ebx+dagrajmpnow],ecx
notronq: cmp esi,[ebp+692]
 jnz notronf
 xor ecx,ecx
 add ecx,52804
 mov [ebx+dagrajmpnow],ecx
notronf: cmp esi,[ebp+688]
 jnz notrong
 xor ecx,ecx
 add ecx,52814
 mov [ebx+dagrajmpnow],ecx
notrong: cmp esi,[ebp+704]
 jnz notronc
 xor edx,edx
 add edx,[ebp+968]
 mov ecx,[ebp+1008]
 push edx
 push ecx
 call clearpage
 add esp,[ebp+940]
 xor ecx,ecx
 add ecx,36170
 mov [ebx+dagrajmpnow],ecx
notronc: cmp esi,[ebp+664]
 jnz notronm
 xor ecx,ecx
 add ecx,53000
 mov [ebx+dagrajmpnow],ecx
notronm: cmp esi,[ebp+636]
 jnz notront
 xor ecx,ecx
 add ecx,52708
 mov [ebx+dagrajmpnow],ecx
notront: cmp esi,[ebp+708]
 jnz notronb
 xor ecx,ecx
 add ecx,52714
 mov [ebx+dagrajmpnow],ecx
notronb: cmp esi,[ebp+700]
 jnz notrond
 xor ecx,ecx
 add ecx,52720
 mov [ebx+dagrajmpnow],ecx
notrond: cmp esi,[ebp+672]
 jnz notronk
 xor ecx,ecx
 add ecx,52815
 mov [ebx+dagrajmpnow],ecx
notronk: cmp esi,[ebp+680]
 jnz notroni
 xor ecx,ecx
 add ecx,52860
 mov [ebx+dagrajmpnow],ecx
notroni: cmp esi,[ebp+616]
 jnz notrony
 xor ecx,ecx
 add ecx,53072
 mov [ebx+dagrajmpnow],ecx
notrony: cmp esi,[ebp+684]
 jnz notron52661
 xor ecx,ecx
 add ecx,53054
 mov [ebx+dagrajmpnow],ecx
notron52661: xor edx,edx
 add edx,52708
 cmp edx,[ebx+dagrajmpnow]
 jnz notron52708
 mov ecx,[ebp+968]
 mov [ebx+yre],ecx
 mov [ebx+xe],ecx
 xor ecx,ecx
 add ecx,52642
 xor edx,edx
 add edx,53098
 mov [ebx+freddynext],ecx
 mov [ebx+dagrajmpnow],edx
notron52708: xor ecx,ecx
 add ecx,52714
 cmp ecx,[ebx+dagrajmpnow]
 jnz notron52714
 mov edx,[ebp+968]
 mov [ebx+xe],edx
 add edx,[ebx+afilelen]
 mov [ebx+yre],edx
 xor ecx,ecx
 add ecx,52642
 xor edx,edx
 add edx,53098
 mov [ebx+freddynext],ecx
 mov [ebx+dagrajmpnow],edx
notron52714: xor ecx,ecx
 add ecx,52720
 cmp ecx,[ebx+dagrajmpnow]
 jnz notron52720
 mov edx,[ebp+844]
 mov [ebx+bkgnd],edx
 mov edx,[ebp+968]
 mov ecx,[ebp+1008]
 push edx
 push ecx
 call clearpage
 add esp,[ebp+940]
 mov edx,[ebp+968]
 mov ecx,[ebp+748]
 mov eax,[ebp+1008]
 push edx
 push ecx
 push eax
 call printconst
 add esp,[ebp+924]
 xor ecx,ecx
 add ecx,53098
 xor edx,edx
 add edx,52731
 mov [ebx+dagrajmpnow],ecx
 mov [ebx+freddynext],edx
notron52720: xor edx,edx
 add edx,52731
 cmp edx,[ebx+dagrajmpnow]
 jnz notron52731
 mov esi,[ebp+844]
 mov ecx,[ebp+460]
 add ecx,[ebp+464]
 and ecx,[ebx+dagranewkey]
 cmp ecx,esi
 js notroo52720
 cmp ecx,[ebp+464]
 jns notroo52720
 mov esi,ecx
notroo52720: mov [ebx+bkgnd],esi
 xor ecx,ecx
 add ecx,53098
 xor edx,edx
 add edx,52642
 mov [ebx+dagrajmpnow],ecx
 mov [ebx+freddynext],edx
notron52731: xor ecx,ecx
 add ecx,52733
 cmp ecx,[ebx+dagrajmpnow]
 jnz notron52733
 mov edx,[ebp+964]
 mov [ebx+opendell],edx
 mov ecx,[ebx+afilelen]
 add ecx,[ebp+968]
 mov [ebx+y],ecx
 xor edi,edi
 add edi,52733
 mov esi,[ebp+972]
 mov edx,[ebp+744]
 xor ecx,ecx
 add ecx,52734
 mov eax,[ebp+1008]
 push edi
 push esi
 push edx
 push ecx
 push eax
 call tinypcl
 add esp,[ebp+892]
notron52733: xor ecx,ecx
 add ecx,52734
 cmp ecx,[ebx+dagrajmpnow]
 jz isr52734
 jmp not52734
isr52734: mov edx,[ebp+972]
 mov ecx,[ebp+1008]
 push edx
 push ecx
 call litrlsput
 add esp,[ebp+940]
 xor edx,edx
 push edx
 push ecx
 call litrlsput
 add esp,[ebp+940]
 mov edx,[ebp+948]
 add edx,[ebx+opendell]
 sub edx,[ebp+968]
 mov ecx,[ebx+a80w]
 push edx
 push ecx
 call nampy
 add esp,[ebp+940]
 lea esi,[ebx+crz0160]
 mov edi,esi
 add esi,eax
 mov edx,[ebp+928]
 sub edx,[ebp+968]
 push edx
 push ecx
 call nampy
 add esp,[ebp+940]
 add edi,eax
 sub esi,4096
 sub edi,2048
 mov eax,[ebp+968]
ron52734fnl: mov dl,[esi+4096]
 mov [edi+2048],dl
 add esi,eax
 add edi,eax
 sub ecx,eax
 jnz ron52734fnl
 xor ecx,ecx
 add ecx,53098
 xor edx,edx
 add edx,52742
 mov [ebx+dagrajmpnow],ecx
 mov [ebx+freddynext],edx
 xor edi,edi
 mov [ebx+twocurwozy],edi
 mov [ebx+twocurwozx],edi
 mov ecx,[ebx+ypheight]
 sub ecx,[ebx+nznormalend]
 mov [ebx+onecurwozy],ecx
 cmp ecx,[ebx+cmdheight]
 jns ron52734cy
 mov edx,[ebx+cmdheight]
 mov [ebx+onecurwozy],edx
ron52734cy: mov ecx,[ebp+968]
 add [ebx+onecurwozy],ecx
 mov [ebx+onecurwozx],ecx
 mov edx,[ebp+964]
 cmp edx,[ebx+opendell]
 jnz not52734
 mov edx,[ebp+948]
 add edx,[ebx+opendell]
 mov ecx,[ebp+1008]
 push edx
 push ecx
 call dlenval
 add esp,[ebp+940]
 add eax,[ebp+968]
 mov [ebx+onecurwozx],eax
not52734: xor ecx,ecx
 add ecx,52736
 cmp ecx,[ebx+dagrajmpnow]
 jnz notron52736
 mov ecx,[ebp+968]
 mov [ebx+opendell],ecx
 xor edi,edi
 add edi,52736
 mov esi,[ebp+964]
 mov edx,[ebp+740]
 xor ecx,ecx
 add ecx,52742
 mov eax,[ebp+1008]
 push edi
 push esi
 push edx
 push ecx
 push eax
 call tinypcl
 add esp,[ebp+892]
notron52736: xor ecx,ecx
 add ecx,52742
 cmp ecx,[ebx+dagrajmpnow]
 jnz notror52742
 mov edi,ecx
 mov esi,edi
 add esi,[ebp+968]
 mov edx,[ebp+948]
 add edx,[ebx+opendell]
 mov ecx,[ebp+1008]
 push edi
 push esi
 push edx
 push ecx
 call udgetcoml
 add esp,[ebp+908]
notror52742: xor ecx,ecx
 add ecx,52743
 cmp ecx,[ebx+dagrajmpnow]
 jz isr52743
 jmp notron52743
isr52743: mov edx,[ebp+948]
 add edx,[ebx+opendell]
 mov ecx,[ebp+1008]
 push edx
 push ecx
 call dlenval
 add esp,[ebp+940]
 xor edi,edi
 cmp edi,eax
 jns ronsk52743
 xor edi,edi
 cmp edi,[ebx+afilelen]
 js isch52743
 cmp edi,[ebx+uppercase]
 jz isdh52743
isch52743: mov edx,[ebp+968]
 mov [ebx+chdoc],edx
isdh52743: xor edx,edx
 mov ecx,[ebp+948]
 add ecx,[ebx+opendell]
 mov eax,[ebp+1008]
 push edx
 push ecx
 push eax
 call readol
 add esp,[ebp+924]
ronsk52743: mov edx,[ebx+opendell]
 cmp edx,[ebp+964]
 jnz notyre52743
 mov ecx,[ebp+968]
 add ecx,[ebx+afilelen]
 mov [ebx+yre],ecx
 mov [ebx+y],ecx
notyre52743: xor ecx,ecx
 add ecx,53098
 xor edx,edx
 add edx,52642
 mov [ebx+dagrajmpnow],ecx
 mov [ebx+freddynext],edx
notron52743: xor ecx,ecx
 add ecx,36585
 cmp ecx,[ebx+dagrajmpnow]
 jnz notron36585
 mov ecx,[ebp+968]
 mov [ebx+opendell],ecx
 xor edi,edi
 add edi,36585
 mov esi,[ebp+964]
 mov edx,[ebp+740]
 xor ecx,ecx
 add ecx,36587
 mov eax,[ebp+1008]
 push edi
 push esi
 push edx
 push ecx
 push eax
 call tinypcl
 add esp,[ebp+892]
notron36585: xor ecx,ecx
 add ecx,36587
 cmp ecx,[ebx+dagrajmpnow]
 jnz notron36587
 mov edi,ecx
 mov esi,edi
 add esi,[ebp+968]
 mov edx,[ebp+948]
 add edx,[ebx+opendell]
 mov ecx,[ebp+1008]
 push edi
 push esi
 push edx
 push ecx
 call udgetcoml
 add esp,[ebp+908]
notron36587: xor ecx,ecx
 add ecx,36588
 cmp ecx,[ebx+dagrajmpnow]
 jz isr36588
 jmp notron36588
isr36588: xor edi,edi
 mov edx,[ebp+948]
 add edx,[ebx+opendell]
 mov ecx,[ebp+1008]
 push edx
 push ecx
 call dlenval
 add esp,[ebp+940]
 mov esi,[ebp+968]
 cmp esi,eax
 jns notrhe36588
 cmp edi,[ebx+afilelen]
 jns nochxr36588
 mov [ebx+chdoc],esi
nochxr36588: cmp edi,[ebx+uppercase]
 jz nochyr36588
 mov [ebx+chdoc],esi
nochyr36588: mov edx,[ebp+908]
 mov ecx,[ebp+948]
 add ecx,[ebx+opendell]
 mov eax,[ebp+1008]
 push edx
 push ecx
 push eax
 call readol
 add esp,[ebp+924]
notrhe36588: mov ecx,[ebp+964]
 cmp ecx,[ebx+opendell]
 jnz noyre36588
 mov edx,[ebp+968]
 add edx,[ebx+afilelen]
 mov [ebx+yre],edx
 mov [ebx+y],edx
noyre36588: xor ecx,ecx
 add ecx,52642
 xor edx,edx
 add edx,53098
 mov [ebx+freddynext],ecx
 mov [ebx+dagrajmpnow],edx
notron36588: xor ecx,ecx
 add ecx,52782
 cmp ecx,[ebx+dagrajmpnow]
 jnz notron52782
 xor edi,edi
 cmp edi,[ebx+chdoc]
 jnz rondch52782
 xor ecx,ecx
 add ecx,52800
 mov [ebx+dagrajmpnow],ecx
 xor ecx,ecx
 jz notron52782
rondch52782: xor edi,edi
 add edi,52782
 mov esi,[ebp+964]
 mov edx,[ebp+752]
 xor ecx,ecx
 add ecx,52793
 mov eax,[ebp+1008]
 push edi
 push esi
 push edx
 push ecx
 push eax
 call tinypcl
 add esp,[ebp+892]
notron52782: xor ecx,ecx
 add ecx,52793
 cmp ecx,[ebx+dagrajmpnow]
 jnz notron52793
 xor edx,edx
 add edx,53098
 xor ecx,ecx
 add ecx,52648
 mov [ebx+freddynext],ecx
 mov ecx,[ebp+460]
 add ecx,[ebp+464]
 and ecx,[ebx+dagranewkey]
 cmp ecx,[ebp+480]
 jns lcron52793
 cmp ecx,[ebp+584]
 js lcron52793
 sub ecx,[ebp+844]
lcron52793: cmp ecx,[ebp+660]
 jnz ronvn52793
 xor edx,edx
 add edx,52800
ronvn52793: cmp ecx,[ebp+616]
 jnz ronvy52793
 xor edx,edx
 add edx,52797
ronvy52793: mov [ebx+dagrajmpnow],edx
notron52793: xor edi,edi
 add edi,52797
 cmp edi,[ebx+dagrajmpnow]
 jnz notron52797
 xor esi,esi
 mov edx,[ebp+756]
 xor ecx,ecx
 add ecx,36583
 mov eax,[ebp+1008]
 push edi
 push esi
 push edx
 push ecx
 push eax
 call tinypcl
 add esp,[ebp+892]
notron52797: xor edi,edi
 add edi,36583
 cmp edi,[ebx+dagrajmpnow]
 jz isr36583
 jmp notron36583
isr36583: xor edx,edx
 mov ecx,[ebp+1008]
 push edx
 push ecx
 call litrlsput
 add esp,[ebp+940]
 mov edx,[ebp+940]
 sub edx,[ebp+968]
 mov ecx,[ebx+a80w]
 push edx
 push ecx
 call nampy
 add esp,[ebp+940]
 lea esi,[ebx+crz0160]
 sub esi,512
 mov edi,esi
 add esi,eax
 mov edx,[ebp+928]
 sub edx,[ebp+968]
 push edx
 push ecx
 call nampy
 add esp,[ebp+940]
 add edi,eax
 xor edx,edx
 mov eax,[ebp+968]
lop36583r: mov dl,[esi+512]
 mov [edi+512],dl
 add esi,eax
 add edi,eax
 sub ecx,eax
 jnz lop36583r
 xor edx,edx
 sub edx,[ebp+928]
 mov ecx,[ebp+1008]
 push edx
 push ecx
 call litrlsput
 add esp,[ebp+940]
 xor edx,edx
 push edx
 push ecx
 call litrlsput
 add esp,[ebp+940]
 xor ecx,ecx
 add ecx,53098
 xor edx,edx
 add edx,52798
 mov [ebx+dagrajmpnow],ecx
 mov [ebx+freddynext],edx
 xor edi,edi
 mov [ebx+twocurwozy],edi
 mov [ebx+twocurwozx],edi
 mov esi,[ebx+ypheight]
 sub esi,[ebx+nznormalend]
 mov [ebx+onecurwozy],esi
 mov esi,[ebx+cmdheight]
 mov edx,[ebx+ypheight]
 sub edx,[ebx+nznormalend]
 cmp edx,esi
 jns notrco36583
 mov [ebx+onecurwozy],esi
notrco36583: mov edx,[ebp+968]
 add [ebx+onecurwozy],edx
 mov edx,[ebp+940]
 mov ecx,[ebp+1008]
 push edx
 push ecx
 call dlenval
 add esp,[ebp+940]
 cmp eax,[ebp+972]
 jz notrco3658v3
 xor edi,edi
 mov [ebx+keyclineinit],edi
notrco3658v3: add eax,[ebp+968]
 mov [ebx+onecurwozx],eax
 mov [ebx+cmdkeyxctr],eax
notron36583: xor edi,edi
 add edi,52798
 cmp edi,[ebx+dagrajmpnow]
 jnz notron52798
 xor esi,esi
 add esi,52799
 mov edx,[ebp+940]
 mov ecx,[ebp+1008]
 push edi
 push esi
 push edx
 push ecx
 call udgetcoml
 add esp,[ebp+908]
notron52798: xor edi,edi
 add edi,52799
 cmp edi,[ebx+dagrajmpnow]
 jnz notron52799
 mov ecx,[ebp+1008]
 push ecx
 call eightsaveas
 add esp,[ebp+956]
 xor edi,edi
 mov [ebx+chdoc],edi
 add edi,52800
 mov [ebx+dagrajmpnow],edi
notron52799: xor edi,edi
 add edi,52776
 cmp edi,[ebx+dagrajmpnow]
 jnz notron52776
 xor esi,esi
 mov edx,[ebp+760]
 xor ecx,ecx
 add ecx,36581
 mov eax,[ebp+1008]
 push edi
 push esi
 push edx
 push ecx
 push eax
 call tinypcl
 add esp,[ebp+892]
notron52776: xor edi,edi
 add edi,36581
 cmp edi,[ebx+dagrajmpnow]
 jz isr36581
 jmp notron36581
isr36581: mov edx,[ebp+972]
 mov ecx,[ebp+1008]
 push edx
 push ecx
 call litrlsput
 add esp,[ebp+940]
 mov edx,[ebp+940]
 sub edx,[ebp+968]
 mov ecx,[ebx+a80w]
 push edx
 push ecx
 call nampy
 add esp,[ebp+940]
 lea esi,[ebx+crz0160]
 sub esi,512
 mov edi,esi
 add esi,eax
 mov edx,[ebp+928]
 sub edx,[ebp+968]
 push edx
 push ecx
 call nampy
 add esp,[ebp+940]
 add edi,eax
 mov eax,[ebp+968]
lopr36581: mov dl,[esi+512]
 mov [edi+512],dl
 add esi,eax
 add edi,eax
 sub ecx,eax
 jnz lopr36581
 xor ecx,ecx
 add ecx,53098
 xor edx,edx
 add edx,52777
 mov [ebx+dagrajmpnow],ecx
 mov [ebx+freddynext],edx
 xor edi,edi
 mov [ebx+twocurwozy],edi
 mov [ebx+twocurwozx],edi
 mov esi,[ebx+ypheight]
 sub esi,[ebx+nznormalend]
 mov [ebx+onecurwozy],esi
 mov edx,[ebx+cmdheight]
 cmp esi,edx
 jns cmdy36581
 mov [ebx+onecurwozy],edx
cmdy36581: mov ecx,[ebp+968]
 add [ebx+onecurwozy],ecx
 mov edx,[ebp+940]
 mov ecx,[ebp+1008]
 push edx
 push ecx
 call dlenval
 add esp,[ebp+940]
 add eax,[ebp+968]
 mov [ebx+onecurwozx],eax
 mov edi,[ebp+972]
 sub edi,[ebp+928]
 mov esi,[ebp+1008]
 push edi
 push esi
 call litrlsput
 add esp,[ebp+940]
 xor edi,edi
 push edi
 push esi
 call litrlsput
 add esp,[ebp+940]
notron36581: xor edi,edi
 add edi,52777
 cmp edi,[ebx+dagrajmpnow]
 jnz notron52777
 mov esi,edi
 add esi,[ebp+968]
 mov edx,[ebp+940]
 mov ecx,[ebp+1008]
 push edi
 push esi
 push edx
 push ecx
 call udgetcoml
 add esp,[ebp+908]
notron52777: xor edi,edi
 add edi,52778
 cmp edi,[ebx+dagrajmpnow]
 jnz notron52778
 mov ecx,[ebp+1008]
 push ecx
 call eightsaveas
 add esp,[ebp+956]
 xor edi,edi
 mov [ebx+chdoc],edi
 xor ecx,ecx
 add ecx,53098
 xor edx,edx
 add edx,52642
 mov [ebx+dagrajmpnow],ecx
 mov [ebx+freddynext],edx
notron52778: xor edi,edi
 add edi,52800
 cmp edi,[ebx+dagrajmpnow]
 jnz notron52800
 mov edx,[ebp+968]
 mov ecx,[ebp+1008]
 push edx
 push ecx
 call clearpage
 add esp,[ebp+940]
 xor ecx,ecx
 add ecx,53098
 xor edx,edx
 add edx,11019
 mov [ebx+dagrajmpnow],ecx
 mov [ebx+freddynext],edx
notron52800: xor edi,edi
 add edi,52804
 cmp edi,[ebx+dagrajmpnow]
 jnz notron52804
 mov ecx,[ebx+xe]
 mov edx,[ebx+yre]
 mov [ebx+lowleftx],ecx
 mov [ebx+lowlefty],edx
 xor ecx,ecx
 add ecx,53098
 xor edx,edx
 add edx,52642
 mov [ebx+freddynext],edx
 mov [ebx+dagrajmpnow],ecx
notron52804: xor ecx,ecx
 add ecx,52814
 cmp ecx,[ebx+dagrajmpnow]
 jnz notron52814
 mov ecx,[ebx+xe]
 mov edx,[ebx+yre]
 mov [ebx+uprightx],ecx
 mov [ebx+uprighty],edx
 xor ecx,ecx
 add ecx,53098
 xor edx,edx
 add edx,52642
 mov [ebx+dagrajmpnow],ecx
 mov [ebx+freddynext],edx
notron52814: xor edi,edi
 add edi,52815
 cmp edi,[ebx+dagrajmpnow]
 jnz notron52815
 mov ecx,[ebp+968]
 sub ecx,[ebx+nznormalend]
 mov [ebx+nznormalend],ecx
 xor ecx,ecx
 add ecx,53098
 xor edx,edx
 add edx,52642
 mov [ebx+dagrajmpnow],ecx
 mov [ebx+freddynext],edx
notron52815: xor edi,edi
 add edi,52860
 cmp edi,[ebx+dagrajmpnow]
 jnz notron52860
 mov esi,[ebp+964]
 mov edx,[ebp+736]
 mov ecx,edi
 add ecx,[ebp+956]
 mov eax,[ebp+1008]
 push edi
 push esi
 push edx
 push ecx
 push eax
 call tinypcl
 add esp,[ebp+892]
notron52860: xor edi,edi
 add edi,52864
 cmp edi,[ebx+dagrajmpnow]
 jnz notron52864
 mov esi,edi
 add esi,[ebp+960]
 mov edx,[ebp+948]
 mov ecx,[ebp+1008]
 push edi
 push esi
 push edx
 push ecx
 call udgetcoml
 add esp,[ebp+908]
notron52864: xor ecx,ecx
 add ecx,52867
 cmp ecx,[ebx+dagrajmpnow]
 jz isr52867
 jmp notron52867
isr52867: xor edi,edi
 xor edi,edi
 mov [ebx+lfdal],edi
 mov ecx,[ebx+dagraprvkey]
 cmp ecx,[ebp+844]
 jnz rnb52867
 mov edx,[ebp+968]
 mov [ebx+lfdal],edx
rnb52867: mov ecx,[ebx+yre]
 mov [ebx+rcmdctr],ecx
 mov edx,[ebp+968]
 mov [ebx+dagraprvkey],edx
 mov ecx,[ebp+948]
 mov eax,[ebp+1008]
 push ecx
 push eax
 call dlenval
 add esp,[ebp+940]
 xor ecx,ecx
 cmp eax,ecx
 jnz whtop52867
 cmp ecx,[ebx+nznormalend]
 jz whtop52867
 mov ecx,[ebp+968]
 add ecx,[ebx+afilelen]
 mov [ebx+rcmdctr],ecx
 xor ecx,ecx
 mov [ebx+dagraprvkey],ecx
 xor edi,edi
 jz wbt52867
whtop52867: mov ecx,[ebx+rcmdctr]
 sub ecx,[ebp+968]
 cmp ecx,[ebx+afilelen]
 jns wbt52867
 xor edi,edi
 cmp edi,[ebx+dagraprvkey]
 jz wbt52867
 mov edi,[ebx+rcmdctr]
 mov esi,[ebx+lfdal]
 mov edx,[ebp+972]
 mov ecx,[ebp+948]
 mov eax,[ebp+1008]
 push edi
 push esi
 push edx
 push ecx
 push eax
 call findtwoeq
 add esp,[ebp+892]
 xor edi,edi
 cmp edi,eax
 jz fr52867
 mov [ebx+dagraprvkey],edi
fr52867: xor esi,esi
 cmp esi,[ebx+dagraprvkey]
 jz wbt52867
 mov ecx,[ebp+968]
 add [ebx+rcmdctr],ecx
 xor ecx,ecx
 jz whtop52867
wbt52867: mov ecx,[ebx+rcmdctr]
 mov [ebx+yre],ecx
 xor ecx,ecx
 add ecx,53098
 xor edx,edx
 add edx,52642
 mov [ebx+dagrajmpnow],ecx
 mov [ebx+freddynext],edx
 xor edi,edi
 cmp edi,[ebx+dagraprvkey]
 jz notron52867
 xor ecx,ecx
 add ecx,52648
 mov [ebx+freddynext],ecx
notron52867: xor ecx,ecx
 add ecx,52988
 cmp ecx,[ebx+dagrajmpnow]
 jnz notron52988
 mov eax,[ebp+1008]
 push eax
 call john2938
 add esp,[ebp+956]
 mov edx,[ebp+968]
 mov [ebx+chdoc],edx
 mov ecx,[ebx+lowleftb]
 mov edx,[ebx+lowleftc]
 mov [ebx+lowleftx],ecx
 mov [ebx+lowlefty],edx
 mov ecx,[ebx+jydiff]
 add ecx,[ebx+uprighty]
 mov [ebx+uprighty],ecx
 mov edx,[ebx+jxdiff]
 add edx,[ebx+uprightx]
 mov [ebx+uprightx],edx
 xor ecx,ecx
 add ecx,53098
 xor edx,edx
 add edx,52642
 mov [ebx+dagrajmpnow],ecx
 mov [ebx+freddynext],edx
notron52988: xor ecx,ecx
 add ecx,53000
 cmp ecx,[ebx+dagrajmpnow]
 jz isr53000
 jmp djn53000
isr53000: mov eax,[ebp+1008]
 push eax
 call john2938
 add esp,[ebp+956]
 mov ecx,[ebp+968]
 mov [ebx+chdoc],ecx
 xor ecx,ecx
 add ecx,53098
 xor edx,edx
 add edx,52642
 mov [ebx+dagrajmpnow],ecx
 mov [ebx+freddynext],edx
 mov ecx,[ebx+jxwidth]
 mov edx,[ebx+jyheight]
 mov esi,[ebx+lowleftx]
 sub esi,[ebx+lowleftb]
 mov edi,[ebx+lowlefty]
 sub edi,[ebx+lowleftc]
 cmp ecx,[ebp+968]
 js djn53000
 cmp edx,[ebp+968]
 js djn53000
 or esi,edi
 jz djn53000
 xor ecx,ecx
 add ecx,53008
 mov [ebx+dagrajmpnow],ecx
djn53000: xor ecx,ecx
 add ecx,53008
 cmp ecx,[ebx+dagrajmpnow]
 jz isr53008
 jmp notron53008
isr53008: mov esi,[ebx+uprightx]
 add esi,[ebx+jxdiff]
 mov edi,[ebx+uprighty]
 add edi,[ebx+jydiff]
 mov [ebx+tzrx],esi
 mov [ebx+tzby],edi
 mov edx,[ebx+lowlefty]
 mov [ebx+yyectr],edx
owh53008: mov edx,[ebp+968]
 add edx,[ebx+uprighty]
 mov ecx,[ebx+yyectr]
 cmp ecx,edx
 js ohh53008
 jmp noto53008
ohh53008: mov edx,[ebx+lowleftx]
 mov [ebx+xxjctr],edx
 mov edi,[ebx+yyectr]
 mov esi,[ebp+968]
 mov edx,[ebp+952]
 mov ecx,[ebp+1008]
 push edi
 push esi
 push edx
 push ecx
 call rw8056
 add esp,[ebp+908]
iwh53008: mov edx,[ebp+968]
 add edx,[ebx+uprightx]
 mov ecx,[ebx+xxjctr]
 cmp ecx,edx
 js ihh53008
 jmp wrtb53008
ihh53008: lea edi,[ebx+crz0160]
 add edi,[ebx+xxjctr]
 sub edi,[ebp+968]
 sub edi,2048
 xor esi,esi
 add esi,53040
 mov ecx,[ebx+xxjctr]
 cmp ecx,[ebx+lowleftb]
 js bk53008
 mov ecx,[ebx+tzrx]
 cmp ecx,[ebx+xxjctr]
 js bk53008
 mov ecx,[ebx+yyectr]
 cmp ecx,[ebx+lowleftc]
 js bk53008
 mov ecx,[ebx+tzby]
 cmp ecx,[ebx+yyectr]
 js bk53008
 xor esi,esi
 add esi,53042
bk53008: cmp esi,53040
 jnz bknw53008
 mov edx,[ebx+bkgnd]
 mov [edi+2048],dl
bknw53008: mov edx,[ebp+968]
 add [ebx+xxjctr],edx
 jmp iwh53008
wrtb53008: mov edi,[ebx+yyectr]
 mov esi,[ebp+968]
 mov edx,[ebp+948]
 mov ecx,[ebp+1008]
 push edi
 push esi
 push edx
 push ecx
 call rw8056
 add esp,[ebp+908]
 mov edx,[ebp+968]
 add [ebx+yyectr],edx
 jmp owh53008
noto53008: mov ecx,[ebx+lowleftb]
 mov edx,[ebx+lowleftc]
 mov [ebx+lowleftx],ecx
 mov [ebx+lowlefty],edx
 mov ecx,[ebx+jydiff]
 mov edx,[ebx+jxdiff]
 add [ebx+uprighty],ecx
 add [ebx+uprightx],edx
 mov ecx,[ebp+968]
 mov [ebx+chdoc],ecx
 xor esi,esi
 add esi,53098
 mov [ebx+dagrajmpnow],esi
 xor ecx,ecx
 add ecx,52642
 mov [ebx+freddynext],ecx
notron53008: xor ecx,ecx
 add ecx,53054
 cmp ecx,[ebx+dagrajmpnow]
 jz isr53054
 jmp notron53054
isr53054: mov edi,[ebx+yre]
 mov esi,[ebp+968]
 mov edx,[ebp+952]
 mov ecx,[ebp+1008]
 push edi
 push esi
 push edx
 push ecx
 call rw8056
 add esp,[ebp+908]
 push esi
 push ecx
 call dlenval
 add esp,[ebp+940]
 add esi,eax
 mov edx,[ebx+a80w]
 mov [ebx+xe],edx
 cmp esi,[ebp+968]
 js keebxe53054
 cmp edx,esi
 js keebxe53054
 mov [ebx+xe],esi
keebxe53054: mov edx,[ebp+968]
 mov ecx,[ebp+1008]
 push edx
 push ecx
 call clearline
 add esp,[ebp+940]
 mov edx,[ebx+xe]
 mov [ebx+x],edx
 xor ecx,ecx
 add ecx,53098
 xor edx,edx
 add edx,52642
 mov [ebx+dagrajmpnow],ecx
 mov [ebx+freddynext],edx
notron53054: xor edi,edi
 add edi,53072
 cmp edi,[ebx+dagrajmpnow]
 jnz notron53072
 mov esi,[ebp+964]
 mov edx,[ebp+732]
 xor ecx,ecx
 add ecx,53071
 mov eax,[ebp+1008]
 push edi
 push esi
 push edx
 push ecx
 push eax
 call tinypcl
 add esp,[ebp+892]
notron53072: xor edi,edi
 add edi,53071
 cmp edi,[ebx+dagrajmpnow]
 jnz notron53071
 mov esi,edi
 sub esi,[ebp+968]
 mov edx,[ebp+948]
 mov ecx,[ebp+1008]
 push edi
 push esi
 push edx
 push ecx
 call cdgetcoml
 add esp,[ebp+908]
notron53071: xor edi,edi
 add edi,53070
 cmp edi,[ebx+dagrajmpnow]
 jz isr53070
 jmp notron53070
isr53070: mov edx,[ebp+948]
 sub edx,[ebp+968]
 mov ecx,[ebx+a80w]
 push edx
 push ecx
 call nampy
 add esp,[ebp+940]
 lea esi,[ebx+crz0160]
 add esi,eax
 xor edi,edi
 add edi,14393
 mov [ebx+y],edi
 lea edx,[ebx+y]
 xor ecx,ecx
 push esi
 push edx
 push ecx
 call rlnvalue
 add esp,[ebp+924]
 mov [ebx+rcmdctr],eax
 mov ecx,[ebx+rcmdctr]
 mov edx,[ebx+afilelen]
 cmp edx,ecx
 jns iir53070
 add edx,[ebp+968]
 mov [ebx+rcmdctr],edx
iir53070: mov esi,[ebp+968]
 mov edx,[ebx+rcmdctr]
 cmp edx,esi
 jns ihr53070
 mov [ebx+rcmdctr],esi
ihr53070: mov edx,[ebx+rcmdctr]
 mov [ebx+y],edx
 mov [ebx+yre],edx
 xor edi,edi
 mov [ebx+rcmdctr],edi
 xor ecx,ecx
 add ecx,53098
 xor edx,edx
 add edx,52642
 mov [ebx+dagrajmpnow],ecx
 mov [ebx+freddynext],edx
notron53070: xor edi,edi
 add edi,36154
 cmp edi,[ebx+dagrajmpnow]
 jnz notron36154
 mov esi,[ebp+584]
 sub esi,[ebx+uppercase]
 mov [ebx+uppercase],esi
 xor ecx,ecx
 add ecx,53098
 xor edx,edx
 add edx,52642
 mov [ebx+dagrajmpnow],ecx
 mov [ebx+freddynext],edx
notron36154: xor ecx,ecx
 add ecx,36155
 cmp ecx,[ebx+dagrajmpnow]
 jnz notron36155
 mov esi,[ebp+940]
 sub esi,[ebx+marginselect]
 mov [ebx+marginselect],esi
 xor ecx,ecx
 add ecx,53098
 xor edx,edx
 add edx,52642
 mov [ebx+dagrajmpnow],ecx
 mov [ebx+freddynext],edx
notron36155: xor ecx,ecx
 add ecx,36156
 cmp ecx,[ebx+dagrajmpnow]
 jnz notron36156
 xor ecx,ecx
 add ecx,53098
 mov [ebx+dagrajmpnow],ecx
 xor edx,edx
 add edx,52648
 mov [ebx+freddynext],edx
 xor edi,edi
 cmp edi,[ebx+chdoc]
 jnz notron36156
 xor edx,edx
 add edx,52642
 mov [ebx+freddynext],edx
notron36156: xor ecx,ecx
 add ecx,36170
 cmp ecx,[ebx+dagrajmpnow]
 jnz notron36170
 xor ecx,ecx
 add ecx,36180
 mov [ebx+dagrajmpnow],ecx
notron36170: xor ecx,ecx
 add ecx,36326
 cmp ecx,[ebx+dagrajmpnow]
 jnz notron36326
 xor edi,edi
 add edi,36180
 xor esi,esi
 mov edx,[ebp+968]
 mov eax,[ebp+1008]
 push ecx
 push esi
 push edx
 push edi
 push eax
 call tinypcl
 add esp,[ebp+892]
notron36326: xor edi,edi
 add edi,36180
 cmp edi,[ebx+dagrajmpnow]
 jz isr36180
 jmp notron36180
isr36180: xor esi,esi
 mov edx,[ebp+960]
 mov ecx,edi
 add ecx,[ebp+964]
 mov eax,[ebp+1008]
 push edi
; 36180 0
 push esi
 push edx
 push ecx
 push eax
 call tinypcl
 add esp,[ebp+892]
 mov edi,ecx
 xor esi,esi
 mov edx,[ebp+908]
 add ecx,[ebp+964]
 mov eax,[ebp+1008]
 push edi
; 36182 0
 push esi
 push edx
 push ecx
 push eax
 call tinypcl
 add esp,[ebp+892]
 mov edi,ecx
 mov esi,[ebp+972]
 mov edx,[ebp+856]
 add ecx,[ebp+964]
 mov eax,[ebp+1008]
 push edi
; 36184 0
 push esi
 push edx
 push ecx
 push eax
 call tinypcl
 add esp,[ebp+892]
 mov edi,ecx
 mov esi,[ebp+968]
 mov edx,[ebp+728]
 add ecx,[ebp+916]
 mov eax,[ebp+1008]
 push edi
; 36186 1
 push esi
 push edx
 push ecx
; 36190 line 10851 956.916 36200
 push eax
 call tinypcl
 add esp,[ebp+892]
 xor edx,edx
 mov ecx,[ebp+1008]
 push edx
 push ecx
 call litrlsput
 add esp,[ebp+940]
 mov edi,[ebp+968]
 mov [ebx+keyclineinit],edi
 add edi,36199
 mov [ebx+freddynext],edi
notron36180: xor edi,edi
 add edi,36200
 cmp edi,[ebx+dagrajmpnow]
 jnz notron36200
 mov ecx,edi
 add ecx,[ebp+964]
 mov esi,[ebp+928]
 mov eax,[ebp+1008]
 push edi
; 36200
 push ecx
 push esi
 push eax
 call udgetcoml
 add esp,[ebp+908]
; udgetcoml(*1008,11,+2,36200)
; udgetcoml(*1008,11,53098,36200)
notron36200: xor ecx,ecx
 add ecx,36202
 cmp ecx,[ebx+dagrajmpnow]
 jz isr36202
 jmp notron36202
isr36202: mov edx,[ebp+972]
 mov ecx,[ebp+1008]
 push edx
 push ecx
 call cmdjavcurz
 add esp,[ebp+940]
 mov [ebx+curcommand],eax
 mov edx,[ebp+968]
 mov [ebx+howmanycmd],edx
 mov eax,[ebx+curcommand]
 cmp eax,[ebp+896]
 jz inr362y0
 cmp eax,[ebp+900]
 jz inr362y0
 cmp eax,[ebp+884]
 jz inr362y0
 mov edx,[ebp+968]
 mov ecx,[ebp+1008]
 push edx
 push ecx
 call cmdjavcurz
 add esp,[ebp+940]
 mov [ebx+howmanycmd],eax
inr362y0: mov eax,[ebp+1008]
 push eax
 call iscommandarg
 add esp,[ebp+956]
 mov [ebx+rcmdctr],eax
 mov edx,[ebx+curcommand]
 cmp edx,[ebp+896]
 jz inr362y1
 cmp edx,[ebp+900]
 jz inr362y1
 cmp edx,[ebp+884]
 jz inr362y1
 xor edi,edi
; cmp or and
 and edi,[ebx+rcmdctr]
 jz isr362y2
inr362y1: jmp notron362y2
isr362y2: mov edx,[ebp+928]
 sub edx,[ebp+968]
 mov ecx,[ebx+a80w]
 push edx
 push ecx
 call nampy
 add esp,[ebp+940]
 lea ecx,[ebx+crz0160]
 add ecx,eax
 xor edx,edx
 add edx,12857
 mov [ebx+dagrajmpnow],edi
 xor edi,edi
 add edi,14137
 mov [ebx+freddynext],edi
 mov edx,[ebp+972]
 mov eax,[ebp+1008]
 push edx
 push eax
 call litrlsput
 add esp,[ebp+940]
 lea edi,[ebx+dagrajmpnow]
 mov esi,[ebx+a80w]
 mov edx,[ebp+968]
 push edi
 push esi
 push edx
 push ecx
 call chnvalue
 add esp,[ebp+908]
 mov esi,[ebx+curcommand]
 mov edx,[ebp+956]
 push edi
 push esi
 push edx
 push ecx
 call chnvalue
 add esp,[ebp+908]
 lea edi,[ebx+freddynext]
 mov esi,[ebx+howmanycmd]
 mov edx,[ebp+940]
 push edi
 push esi
 push edx
 push ecx
 call chnvalue
 add esp,[ebp+908]
 mov esi,[ebx+y]
 mov edx,[ebp+900]
 push edi
 push esi
 push edx
 push ecx
 call chnvalue
 add esp,[ebp+908]
 xor edx,edx
 sub edx,[ebp+928]
 mov eax,[ebp+1008]
 push edx
 push eax
 call litrlsput
 add esp,[ebp+940]
 xor edx,edx
 mov eax,[ebp+1008]
 push edx
 push eax
 call litrlsput
 add esp,[ebp+940]
notron362y2: xor esi,esi
 add esi,53098
 mov [ebx+dagrajmpnow],esi
 xor edx,edx
 add edx,36326
 mov [ebx+freddynext],edx
 mov edi,[ebx+curcommand]
xotron02: cmp edi,[ebp+960]
 jnz xotron03
 xor esi,esi
 add esi,36303
xotron03: cmp edi,[ebp+956]
 jnz xotron04
 xor esi,esi
 add esi,36314
xotron04: cmp edi,[ebp+952]
 jnz xotron05
 xor esi,esi
 add esi,36325
xotron05: cmp edi,[ebp+948]
 jnz xotron06
 xor esi,esi
 add esi,36326
xotron06: cmp edi,[ebp+944]
 jnz xotron07
 xor esi,esi
 add esi,36337
xotron07: cmp edi,[ebp+940]
 jnz xotron08
 xor esi,esi
 add esi,36348
xotron08: cmp edi,[ebp+936]
 jnz xotron09
 xor esi,esi
 add esi,36349
xotron09: cmp edi,[ebp+932]
 jnz xotron10
 xor esi,esi
 add esi,36360
xotron10: cmp edi,[ebp+928]
 jnz xotron11
 xor esi,esi
 add esi,36371
xotron11: cmp edi,[ebp+924]
 jnz xotron12
 xor esi,esi
 add esi,36372
xotron12: cmp edi,[ebp+920]
 jnz xotron13
 xor esi,esi
 add esi,36383
xotron13: cmp edi,[ebp+916]
 jnz xotron14
 xor esi,esi
 add esi,36394
xotron14: cmp edi,[ebp+912]
 jnz xotron15
 xor esi,esi
 add esi,36395
xotron15: cmp edi,[ebp+908]
 jnz xotron16
 xor esi,esi
 add esi,36396
xotron16: cmp edi,[ebp+904]
 jnz xotron17
 xor esi,esi
 add esi,36407
xotron17: cmp edi,[ebp+900]
 jnz xotron18
 xor esi,esi
 add esi,36418
xotron18: cmp edi,[ebp+896]
 jnz xotron19
 xor esi,esi
 add esi,36429
xotron19: cmp edi,[ebp+892]
 jnz xotron20
 xor esi,esi
 add esi,36440
xotron20: cmp edi,[ebp+888]
 jnz xotron21
 xor esi,esi
 add esi,36451
xotron21: cmp edi,[ebp+884]
 jnz xotron22
 xor esi,esi
 add esi,36462
xotron22: cmp edi,[ebp+880]
 jnz xotron23
 xor esi,esi
 add esi,36473
xotron23: cmp edi,[ebp+876]
 jnz xotron24
 xor esi,esi
 add esi,36484
xotron24: cmp edi,[ebp+872]
 jnz xotron25
 xor esi,esi
 add esi,36495
xotron25: cmp edi,[ebp+868]
 jnz xotron26
 xor esi,esi
 add esi,36506
xotron26: cmp edi,[ebp+864]
 jnz xotron27
 xor esi,esi
 add esi,36517
xotron27: cmp edi,[ebp+860]
 jnz xotron28
 xor esi,esi
 add esi,36528
xotron28: cmp edi,[ebp+856]
 jnz xotron29
 xor esi,esi
 add esi,36529
xotron29: mov [ebx+dagrajmpnow],esi
notron36202: xor edi,edi
 add edi,36303
 cmp edi,[ebx+dagrajmpnow]
 jnz notron36303
 xor esi,esi
; 36303 03 insertb
 mov [ebx+inserback],esi
 mov esi,[ebp+968]
 mov edx,[ebp+724]
 mov ecx,edi
 add ecx,[ebp+968]
 mov eax,[ebp+1008]
 push edi
 push esi
 push edx
 push ecx
 push eax
 call tinypcl
 add esp,[ebp+892]
notron36303: xor edi,edi
 add edi,36304
 cmp edi,[ebx+dagrajmpnow]
 jnz notron36304
 mov esi,edi
 add esi,[ebp+968]
 mov edx,[ebp+928]
 mov ecx,[ebp+1008]
 push edi
 push esi
 push edx
 push ecx
 call udgetcoml
 add esp,[ebp+908]
notron36304: xor edi,edi
 add edi,36314
 cmp edi,[ebx+dagrajmpnow]
 jnz notron36314
 mov esi,[ebp+972]
; 36314 04 insert
 mov [ebx+inserback],esi
 mov esi,[ebp+968]
 mov edx,[ebp+720]
 mov ecx,edi
 add ecx,esi
 mov eax,[ebp+1008]
 push edi
 push esi
 push edx
 push ecx
 push eax
 call tinypcl
 add esp,[ebp+892]
notron36314: xor edi,edi
 add edi,36315
 cmp edi,[ebx+dagrajmpnow]
 jnz notron36315
 mov esi,[ebp+968]
 add esi,edi
 mov edx,[ebp+928]
 mov eax,[ebp+1008]
 push edi
 push esi
 push edx
 push eax
 call udgetcoml
 add esp,[ebp+908]
notron36315: xor edi,edi
 add edi,36316
 cmp edi,[ebx+dagrajmpnow]
 jnz notron36316
 mov esi,[ebx+y]
 mov edx,[ebx+afilelen]
 xor ecx,ecx
 add ecx,36305
 mov [ebx+dagrajmpnow],ecx
 add edx,[ebp+968]
 cmp esi,edx
 jns notron36316
 add esi,[ebp+968]
 mov [ebx+y],esi
notron36316: xor edi,edi
 add edi,36305
 cmp edi,[ebx+dagrajmpnow]
 jnz notron36305
 mov edx,[ebp+928]
 mov ecx,[ebp+1008]
 push edx
 push ecx
 call aptinsert
 add esp,[ebp+940]
 mov esi,[ebx+y]
 add esi,[ebx+inserback]
 mov [ebx+y],esi
 xor esi,esi
 push esi
 push ecx
 call litrlsput
 add esp,[ebp+940]
 mov esi,[ebp+968]
 mov edx,[ebx+y]
 sub edx,esi
 mov [ebx+y],edx
 mov [ebx+chdoc],esi
 xor ecx,ecx
 add ecx,53095
 mov [ebx+dagrajmpnow],ecx
notron36305: xor edi,edi
 add edi,36325
 cmp edi,[ebx+dagrajmpnow]
 jnz notron36325
 xor esi,esi
; 36325 05 delete
 sub esi,[ebx+howmanycmd]
 jz skipbdelm71
 mov ecx,[ebp+1008]
 push esi
 push ecx
 call aptinsert
 add esp,[ebp+940]
skipbdelm71: mov edx,[ebp+968]
 mov [ebx+chdoc],edx
 xor ecx,ecx
 add ecx,53095
 mov [ebx+dagrajmpnow],ecx
notron36325: xor edi,edi
 add edi,36337
 cmp edi,[ebx+dagrajmpnow]
 jz isr36337
 jmp notron36337
isr36337: mov edx,[ebp+972]
;  36337 07 M
 mov eax,[ebp+1008]
 push edx
 push eax
 call litrlsput
 add esp,[ebp+940]
 mov esi,[ebp+972]
 mov [ebx+rcmdctr],esi
 mov ecx,[ebx+afilelen]
 mov edx,[ebx+y]
 cmp ecx,edx
 jns yac36337
 sub edx,[ebx+cmdheight]
 mov [ebx+y],edx
yac36337: mov esi,[ebx+rcmdctr]
 cmp esi,[ebx+cmdheight]
 jns yae36337
 add esi,[ebx+y]
 mov edx,[ebp+928]
 mov ecx,[ebp+952]
 mov eax,[ebp+1008]
 push esi
 push edx
 push ecx
 push eax
 call rw8056
 add esp,[ebp+908]
 xor ecx,ecx
 sub ecx,edx
 mov eax,[ebp+1008]
 push ecx
 push eax
 call litrlsput
 add esp,[ebp+940]
 mov edx,[ebp+968]
 add [ebx+rcmdctr],edx
 xor ecx,ecx
 jz yac36337
yae36337: mov esi,[ebx+y]
 add esi,[ebx+rcmdctr]
 mov [ebx+y],esi
 xor ecx,ecx
 mov eax,[ebp+1008]
 push ecx
 push eax
 call litrlsput
 add esp,[ebp+940]
 xor ecx,ecx
 add ecx,53095
 mov [ebx+dagrajmpnow],ecx
notron36337: xor edi,edi
 add edi,36348
 cmp edi,[ebx+dagrajmpnow]
 jz isr36348
 jmp notron36348
;    36348 K
isr36348: xor edx,edx
 mov eax,[ebp+1008]
 push edx
 push eax
 call litrlsput
 add esp,[ebp+940]
 xor esi,esi
 mov [ebx+rcmdctr],esi
yac36348: mov esi,[ebx+rcmdctr]
 cmp esi,[ebx+cmdheight]
 jns yae36348
 add esi,[ebx+y]
 mov edx,[ebp+928]
 mov ecx,[ebp+952]
 mov eax,[ebp+1008]
 push esi
 push edx
 push ecx
 push eax
 call rw8056
 add esp,[ebp+908]
 xor ecx,ecx
 sub ecx,edx
 mov eax,[ebp+1008]
 push ecx
 push eax
 call litrlsput
 add esp,[ebp+940]
 mov edx,[ebp+968]
 add [ebx+rcmdctr],edx
 xor ecx,ecx
 jz yac36348
yae36348: mov edx,[ebx+y]
 sub edx,[ebx+rcmdctr]
 mov [ebx+y],edx
 xor ecx,ecx
 mov eax,[ebp+1008]
 push ecx
 push eax
 call litrlsput
 add esp,[ebp+940]
 xor ecx,ecx
 add ecx,53095
 mov [ebx+dagrajmpnow],ecx
 mov ecx,[ebx+y]
 mov edx,[ebp+968]
 cmp ecx,edx
 jns notron36348
 mov [ebx+y],edx
notron36348: xor edi,edi
 add edi,36349
 cmp edi,[ebx+dagrajmpnow]
 jnz notron36349
; 36349 09 tof
 mov edx,[ebp+968]
 mov [ebx+y],edx
 xor ecx,ecx
 add ecx,36350
 mov [ebx+dagrajmpnow],ecx
notron36349: xor edi,edi
 add edi,36360
 cmp edi,[ebx+dagrajmpnow]
 jnz notron36360
; 36360 11 bot
 mov esi,[ebx+afilelen]
 mov [ebx+y],esi
 xor ecx,ecx
 add ecx,36350
 mov [ebx+dagrajmpnow],ecx
notron36360: xor edi,edi
 add edi,36371
 cmp edi,[ebx+dagrajmpnow]
 jnz notron36371
; 36371 11 up
 mov esi,[ebx+y]
 sub esi,[ebx+howmanycmd]
 mov [ebx+y],esi
 xor ecx,ecx
 add ecx,36350
 mov [ebx+dagrajmpnow],ecx
notron36371: xor edi,edi
 add edi,36372
 cmp edi,[ebx+dagrajmpnow]
 jnz notron36372
; 36372 12 down
 mov esi,[ebx+howmanycmd]
 add [ebx+y],esi
 xor ecx,ecx
 add ecx,36350
 mov [ebx+dagrajmpnow],ecx
notron36372: xor edi,edi
 add edi,36350
 cmp edi,[ebx+dagrajmpnow]
 jz isr36350
 jmp notron36350
isr36350: mov edx,[ebx+y]
 mov esi,[ebp+968]
 cmp edx,esi
 jns ist36350
 mov [ebx+y],esi
ist36350: mov ecx,[ebx+afilelen]
 cmp ecx,[ebx+y]
 jns isw36350
 add ecx,esi
 mov [ebx+y],ecx
isw36350: xor edx,edx
 mov edi,[ebp+1008]
 push edx
 push edi
 call litrlsput
 add esp,[ebp+940]
 mov esi,[ebx+y]
 mov edx,[ebp+928]
 mov ecx,[ebp+952]
 push esi
 push edx
 push ecx
 push edi
 call rw8056
 add esp,[ebp+908]
 xor ecx,ecx
 sub ecx,edx
 push ecx
 push edi
 call litrlsput
 add esp,[ebp+940]
 xor ecx,ecx
 push ecx
 push edi
 call litrlsput
 add esp,[ebp+940]
 xor ecx,ecx
 add ecx,53095
 mov [ebx+dagrajmpnow],ecx
notron36350: xor edi,edi
 add edi,36383
 cmp edi,[ebx+dagrajmpnow]
 jnz notron36383
; 36383 13 input
 xor esi,esi
 mov edx,[ebp+716]
 mov ecx,[ebp+968]
 add ecx,edi
 mov eax,[ebp+1008]
 push edi
 push esi
 push edx
 push ecx
 push eax
 call tinypcl
 add esp,[ebp+892]
notron36383: xor edi,edi
 add edi,36384
 cmp edi,[ebx+dagrajmpnow]
 jnz notron36384
 mov esi,[ebp+968]
 add esi,[ebx+afilelen]
 mov [ebx+y],esi
 mov edx,[ebp+968]
 mov [ebx+keyclineinit],edx
 xor edx,edx
 add edx,53098
 mov [ebx+dagrajmpnow],edx
 xor ecx,ecx
 add ecx,36385
 mov [ebx+freddynext],ecx
notron36384: xor edi,edi
 add edi,36385
 cmp edi,[ebx+dagrajmpnow]
 jnz notron36385
 mov esi,[ebp+968]
 add esi,edi
 mov edx,[ebp+928]
 mov ecx,[ebp+1008]
 push edi
 push esi
 push edx
 push ecx
 call udgetcoml
 add esp,[ebp+908]
notron36385: xor edi,edi
 add edi,36386
 cmp edi,[ebx+dagrajmpnow]
 jnz notron36386
 mov edx,[ebp+928]
 mov eax,[ebp+1008]
 push edx
 push eax
 call dlenval
 add esp,[ebp+940]
 mov [ebx+rcmdctr],eax
 mov ecx,[ebp+968]
 mov [ebx+keyclineinit],ecx
 xor esi,esi
 add esi,36387
 mov [ebx+dagrajmpnow],esi
 xor esi,esi
 cmp esi,[ebx+rcmdctr]
 js notron36386
 xor ecx,ecx
 add ecx,53095
 mov [ebx+dagrajmpnow],ecx
notron36386: xor edi,edi
 add edi,36387
 cmp edi,[ebx+dagrajmpnow]
 jnz notron36387
 xor ecx,ecx
 add ecx,53098
 xor edx,edx
 add edx,36385
 mov [ebx+dagrajmpnow],ecx
 mov [ebx+freddynext],edx
 mov esi,[ebp+968]
 mov [ebx+keyclineinit],esi
 mov edx,[ebp+928]
 mov ecx,[ebp+1008]
 push edx
 push ecx
 call aptinsert
 add esp,[ebp+940]
 xor edx,edx
 push edx
 push ecx
 call litrlsput
 add esp,[ebp+940]
 mov [ebx+chdoc],esi
notron36387: xor edi,edi
 add edi,36394
 cmp edi,[ebx+dagrajmpnow]
 jnz notron36394
; 36394 14 quit
 xor ecx,ecx
 add ecx,53098
 xor edx,edx
 add edx,11019
 mov [ebx+dagrajmpnow],ecx
 mov [ebx+freddynext],edx
notron36394: xor edi,edi
 add edi,36395
 cmp edi,[ebx+dagrajmpnow]
 jnz notron36395
; 36395 print 15 does not work
 xor ecx,ecx
 add ecx,53098
 xor edx,edx
 add edx,36326
 mov [ebx+dagrajmpnow],ecx
 mov [ebx+freddynext],edx
notron36395: xor edi,edi
 add edi,36396
 cmp edi,[ebx+dagrajmpnow]
 jnz notron36396
; 36396 16 replace
 mov edi,[ebx+y]
 mov esi,[ebp+928]
 mov edx,[ebp+952]
 mov ecx,[ebp+1008]
 push edi
 push esi
 push edx
 push ecx
 call rw8056
 add esp,[ebp+908]
 xor edx,edx
 sub edx,esi
 push edx
 push ecx
 call litrlsput
 add esp,[ebp+940]
 xor ecx,ecx
 mov eax,[ebp+1008]
 push ecx
 push eax
 call litrlsput
 add esp,[ebp+940]
 xor ecx,ecx
 add ecx,36397
 mov [ebx+dagrajmpnow],ecx
notron36396: xor edi,edi
 add edi,36397
 cmp edi,[ebx+dagrajmpnow]
 jnz notron36397
 mov esi,[ebp+968]
 mov edx,[ebp+712]
 mov ecx,esi
 add ecx,edi
 mov eax,[ebp+1008]
 push edi
 push esi
 push edx
 push ecx
 push eax
 call tinypcl
 add esp,[ebp+892]
notron36397: xor edi,edi
 add edi,36398
 cmp edi,[ebx+dagrajmpnow]
 jnz notron36398
 mov esi,[ebp+968]
 add esi,edi
 mov edx,[ebp+928]
 mov ecx,[ebp+1008]
 push edi
 push esi
 push edx
 push ecx
 call udgetcoml
 add esp,[ebp+908]
notron36398: xor edi,edi
 add edi,36399
 cmp edi,[ebx+dagrajmpnow]
 jnz notron36399
 mov edx,[ebp+928]
 mov ecx,[ebp+1008]
 push edx
 push ecx
 call dlenval
 add esp,[ebp+940]
 mov [ebx+rcmdctr],eax
 xor ecx,ecx
 add ecx,36405
 mov [ebx+dagrajmpnow],ecx
 xor esi,esi
 cmp esi,[ebx+rcmdctr]
 js notron36399
 xor edx,edx
 add edx,36400
 mov [ebx+dagrajmpnow],edx
notron36399: xor edi,edi
 add edi,36400
 cmp edi,[ebx+dagrajmpnow]
 jnz notron36400
 mov esi,[ebp+968]
 mov edx,[ebp+708]
 mov ecx,esi
 add ecx,edi
 mov eax,[ebp+1008]
 push edi
 push esi
 push edx
 push ecx
 push eax
 call tinypcl
 add esp,[ebp+892]
notron36400: xor edi,edi
 add edi,36401
 cmp edi,[ebx+dagrajmpnow]
 jnz notron36401
 mov esi,[ebp+968]
 add esi,edi
 mov edx,[ebp+928]
 mov ecx,[ebp+1008]
 push edi
 push esi
 push edx
 push ecx
 call udgetcoml
 add esp,[ebp+908]
notron36401: xor edi,edi
 add edi,36402
 cmp edi,[ebx+dagrajmpnow]
 jnz notron36402
 xor ecx,ecx
 add ecx,36180
 xor edx,edx
 add edx,53095
 mov [ebx+freddynext],ecx
 mov [ebx+dagrajmpnow],edx
 mov esi,[ebp+928]
 mov ecx,[ebp+1008]
 push esi
 push ecx
 call dlenval
 add esp,[ebp+940]
 mov [ebx+rcmdctr],eax
 mov ecx,[ebp+616]
 cmp ecx,[ebx+rcmdctr]
 jnz notron36402
 xor edx,edx
 add edx,36403
 mov [ebx+dagrajmpnow],edx
notron36402: xor edi,edi
 add edi,36403
 cmp edi,[ebx+dagrajmpnow]
 jnz notron36403
 mov edx,[ebp+928]
 mov ecx,[ebp+1008]
 push edx
 push ecx
 call clearline
 add esp,[ebp+940]
 xor ecx,ecx
 add ecx,36405
 mov [ebx+dagrajmpnow],ecx
notron36403: xor edi,edi
 add edi,36405
 cmp edi,[ebx+dagrajmpnow]
 jz isr36405
 jmp notron36405
isr36405: xor edx,edx
 add edx,53095
 mov [ebx+dagrajmpnow],edx
 mov esi,[ebx+y]
 cmp esi,[ebp+968]
 js notron36405
 mov ecx,[ebp+964]
 add ecx,[ebx+afilelen]
 cmp esi,ecx
 jns notron36405
 mov edi,[ebx+y]
 mov esi,[ebp+928]
 mov edx,[ebp+948]
 mov ecx,[ebp+1008]
 push edi
 push esi
 push edx
 push ecx
 call rw8056
 add esp,[ebp+908]
 mov esi,[ebp+968]
 mov [ebx+chdoc],esi
 mov edx,[ebp+972]
 push edx
 push ecx
 call litrlsput
 add esp,[ebp+940]
notron36405: xor edi,edi
 add edi,36407
 cmp edi,[ebx+dagrajmpnow]
 jz isr36407
 jmp notron36407
isr36407: xor esi,esi
; 36407 17 v
 mov [ebx+rcmdctr],esi
isl36407: mov edx,[ebx+rcmdctr]
 cmp edx,[ebx+cmdheight]
 jns isb36407
 mov edi,[ebx+y]
 add edi,edx
 mov esi,[ebp+928]
 mov ecx,[ebp+952]
 mov eax,[ebp+1008]
 push edi
 push esi
 push ecx
 push eax
 call rw8056
 add esp,[ebp+908]
 mov ecx,[ebp+968]
 add [ebx+rcmdctr],ecx
 xor ecx,ecx
 sub ecx,esi
 mov eax,[ebp+1008]
 push ecx
 push eax
 call litrlsput
 add esp,[ebp+940]
 xor esi,esi
 jz isl36407
isb36407: xor ecx,ecx
 xor ecx,ecx
 mov eax,[ebp+1008]
 push ecx
 push eax
 call litrlsput
 add esp,[ebp+940]
 xor ecx,ecx
 add ecx,53095
 mov [ebx+dagrajmpnow],ecx
notron36407: xor edi,edi
 add edi,36418
 cmp edi,[ebx+dagrajmpnow]
 jnz notron36418
; 36418 18 open
 xor ecx,ecx
 add ecx,36419
 mov [ebx+dagrajmpnow],ecx
 mov edx,[ebp+928]
 mov ecx,[ebp+1008]
 push edx
 push ecx
 call dlenval
 add esp,[ebp+940]
 xor esi,esi
 cmp esi,eax
 jns notron36418
 cmp esi,[ebx+rcmdctr]
 jns notron36418
 xor ecx,ecx
 add ecx,36422
 mov [ebx+dagrajmpnow],ecx
notron36418: xor edi,edi
 add edi,36419
 cmp edi,[ebx+dagrajmpnow]
 jnz notron36419
 mov esi,[ebp+968]
 mov edx,[ebp+744]
 mov ecx,esi
 add ecx,edi
 mov eax,[ebp+1008]
 push edi
 push esi
 push edx
 push ecx
 push eax
 call tinypcl
 add esp,[ebp+892]
notron36419: xor edi,edi
 add edi,36420
 cmp edi,[ebx+dagrajmpnow]
 jnz notron36420
 mov esi,[ebp+968]
 add esi,edi
 mov edx,[ebp+928]
 mov ecx,[ebp+1008]
 push edi
 push esi
 push edx
 push ecx
 call udgetcoml
 add esp,[ebp+908]
notron36420: xor edi,edi
 add edi,36421
 cmp edi,[ebx+dagrajmpnow]
 jnz notron36421
 xor ecx,ecx
 add ecx,53098
 xor edx,edx
 add edx,36326
 mov [ebx+dagrajmpnow],ecx
 mov [ebx+freddynext],edx
 mov esi,[ebp+928]
 mov ecx,[ebp+1008]
 push esi
 push ecx
 call dlenval
 add esp,[ebp+940]
 xor esi,esi
 cmp esi,eax
 jns notron36421
 xor ecx,ecx
 add ecx,36422
 mov [ebx+dagrajmpnow],ecx
notron36421: xor edi,edi
 add edi,36422
 cmp edi,[ebx+dagrajmpnow]
 jnz notron36422
 xor ecx,ecx
 add ecx,53095
 mov [ebx+dagrajmpnow],ecx
 xor esi,esi
 cmp esi,[ebx+afilelen]
 jns notdoc36422
 mov eax,[ebp+968]
 mov [ebx+chdoc],eax
notdoc36422: mov edx,[ebp+928]
 mov ecx,[ebp+1008]
 push esi
 push edx
 push ecx
 call readol
 add esp,[ebp+924]
notron36422: xor edi,edi
 add edi,36429
 cmp edi,[ebx+dagrajmpnow]
 jz isr36429
 jmp notron36429
isr36429: xor ecx,ecx
 add ecx,36430
 mov [ebx+dagrajmpnow],ecx
 mov edx,[ebp+968]
 mov [ebx+nzsaveskipod],edx
 mov edx,[ebp+928]
 sub edx,[ebp+968]
 mov ecx,[ebx+a80w]
 push edx
 push ecx
 call nampy
 add esp,[ebp+940]
 lea esi,[ebx+crz0160]
 sub esi,2048
 mov edi,esi
 add esi,eax
 mov edx,[ebp+940]
 sub edx,[ebp+968]
 push edx
 push ecx
 call nampy
 add esp,[ebp+940]
 add edi,eax
 mov edx,[ebp+928]
 mov eax,[ebp+1008]
 push edx
 push eax
 call dlenval
 add esp,[ebp+940]
 xor edx,edx
 cmp edx,eax
 jns hafron36429
 cmp edx,[ebx+rcmdctr]
 jns hafron36429
 mov eax,[ebp+968]
lopron36429: mov dl,[esi+2048]
 mov [edi+2048],dl
 add esi,eax
 add edi,eax
 sub ecx,eax
 jnz lopron36429
hafron36429: mov edx,[ebp+940]
 mov ecx,[ebp+1008]
 push edx
 push ecx
 call dlenval
 add esp,[ebp+940]
 xor edx,edx
 cmp edx,eax
 jns notron36429
 xor ecx,ecx
 add ecx,36435
 mov [ebx+dagrajmpnow],ecx
notron36429: xor edi,edi
 add edi,36430
 cmp edi,[ebx+dagrajmpnow]
 jnz notron36430
 mov esi,[ebp+968]
 mov edx,[ebp+756]
 mov ecx,esi
 add ecx,edi
 mov eax,[ebp+1008]
 push edi
 push esi
 push edx
 push ecx
 push eax
 call tinypcl
 add esp,[ebp+892]
notron36430: xor edi,edi
 add edi,36431
 cmp edi,[ebx+dagrajmpnow]
 jnz notron36431
 mov esi,[ebp+968]
 add esi,edi
 mov edx,[ebp+928]
 mov ecx,[ebp+1008]
 push edi
 push esi
 push edx
 push ecx
 call udgetcoml
 add esp,[ebp+908]
notron36431: xor edi,edi
 add edi,36432
 cmp edi,[ebx+dagrajmpnow]
 jz isr36432
 jmp notron36432
isr36432: mov edx,[ebp+928]
 sub edx,[ebp+968]
 mov ecx,[ebx+a80w]
 push edx
 push ecx
 call nampy
 add esp,[ebp+940]
 lea esi,[ebx+crz0160]
 sub esi,4096
 mov edi,esi
 add esi,eax
 mov edx,[ebp+940]
 sub edx,[ebp+968]
 push edx
 push ecx
 call nampy
 add esp,[ebp+940]
 add edi,eax
 mov eax,[ebp+968]
lopron36432: mov dl,[esi+4096]
 mov [edi+4096],dl
 add esi,eax
 add edi,eax
 sub ecx,eax
 jnz lopron36432
 xor ecx,ecx
 add ecx,53098
 xor edx,edx
 add edx,36326
 mov [ebx+dagrajmpnow],ecx
 mov [ebx+freddynext],edx
 mov ecx,[ebp+940]
 mov eax,[ebp+1008]
 push ecx
 push eax
 call dlenval
 add esp,[ebp+940]
 xor esi,esi
 cmp esi,eax
 jns notron36432
 xor ecx,ecx
 add ecx,36435
 mov [ebx+dagrajmpnow],ecx
notron36432: xor edi,edi
 add edi,36435
 cmp edi,[ebx+dagrajmpnow]
 jnz notron36435
 xor ecx,ecx
 add ecx,53098
 xor edx,edx
 add edx,11019
 mov [ebx+dagrajmpnow],ecx
 mov [ebx+freddynext],edx
 mov eax,[ebp+1008]
 push eax
 call eightsaveas
 add esp,[ebp+956]
 xor esi,esi
 mov [ebx+chdoc],esi
notron36435: xor edi,edi
 add edi,36440
 cmp edi,[ebx+dagrajmpnow]
 jnz notron36440
; 36440 20 new
 mov esi,[ebp+1008]
 push esi
 call new2608
 add esp,[ebp+956]
 xor ecx,ecx
 add ecx,53095
 mov [ebx+dagrajmpnow],ecx
notron36440: xor edi,edi
 add edi,36451
 cmp edi,[ebx+dagrajmpnow]
 jnz notron36451
; 36451 21 change
 mov esi,[ebx+y]
 mov edx,[ebp+948]
 mov ecx,[ebp+952]
 mov eax,[ebp+1008]
 push esi
 push edx
 push ecx
 push eax
 call rw8056
 add esp,[ebp+908]
 mov edx,[ebp+928]
 push esi
 push edx
 push ecx
 push eax
 call rw8056
 add esp,[ebp+908]
 xor ecx,ecx
 sub ecx,edx
 mov eax,[ebp+1008]
 push ecx
 push eax
 call litrlsput
 add esp,[ebp+940]
 xor ecx,ecx
 mov eax,[ebp+1008]
 push ecx
 push eax
 call litrlsput
 add esp,[ebp+940]
 xor ecx,ecx
 add ecx,36452
 mov [ebx+dagrajmpnow],ecx
notron36451: xor edi,edi
 add edi,36452
 cmp edi,[ebx+dagrajmpnow]
 jnz notron36452
 mov esi,[ebp+968]
 mov edx,[ebp+704]
 mov ecx,esi
 add ecx,edi
 mov eax,[ebp+1008]
 push edi
 push esi
 push edx
 push ecx
 push eax
 call tinypcl
 add esp,[ebp+892]
notron36452: xor edi,edi
 add edi,36453
 cmp edi,[ebx+dagrajmpnow]
 jz isr36453
 jmp notron36453
isr36453: mov edx,[ebp+948]
 sub edx,[ebp+968]
 mov ecx,[ebx+a80w]
 push edx
 push ecx
 call nampy
 add esp,[ebp+940]
 lea esi,[ebx+crz0160]
 sub esi,512
 mov edi,esi
 add esi,eax
 mov edx,[ebp+928]
 sub edx,[ebp+968]
 push edx
 push ecx
 call nampy
 add esp,[ebp+940]
 add edi,eax
 mov eax,[ebp+968]
lop36453: mov dl,[esi+512]
 mov [edi+512],dl
 add esi,eax
 add edi,eax
 sub ecx,eax
 jnz lop36453
 mov ecx,[ebp+972]
 mov eax,[ebp+1008]
 push ecx
 push eax
 call litrlsput
 add esp,[ebp+940]
 xor ecx,ecx
 add ecx,36354
 mov [ebx+dagrajmpnow],ecx
notron36453: xor edi,edi
 add edi,36354
 cmp edi,[ebx+dagrajmpnow]
 jnz notron36354
 mov esi,[ebp+568]
 add esi,edi
 mov edx,[ebp+928]
 mov ecx,[ebp+1008]
 push edi
 push esi
 push edx
 push ecx
 call udgetcoml
 add esp,[ebp+908]
notron36354: xor edi,edi
 add edi,36455
 cmp edi,[ebx+dagrajmpnow]
 jz isr36455
 jmp notron36455
isr36455: xor ecx,ecx
 add ecx,53095
 mov [ebx+dagrajmpnow],ecx
 mov edx,[ebp+928]
 sub edx,[ebp+968]
 mov ecx,[ebx+a80w]
 push edx
 push ecx
 call nampy
 add esp,[ebp+940]
 lea esi,[ebx+crz0160]
 sub esi,2048
 mov edi,esi
 add esi,eax
 mov edx,[ebp+948]
 sub edx,[ebp+968]
 push edx
 push ecx
 call nampy
 add esp,[ebp+940]
 add edi,eax
 mov edx,[ebp+928]
 mov eax,[ebp+1008]
 push edx
 push eax
 call dlenval
 add esp,[ebp+940]
 mov ecx,eax
 xor edx,edx
 mov eax,[ebp+968]
rlop36455: cmp ecx,eax
 js rbot36455
 mov dl,[esi+2048]
 cmp edx,[ebp+844]
 jz skipr36455
 mov [edi+2048],dl
skipr36455: add esi,eax
 add edi,eax
 sub ecx,eax
 jnz rlop36455
rbot36455: mov esi,[ebx+y]
 mov edx,[ebp+948]
 mov ecx,[ebp+948]
 mov edi,[ebp+1008]
 push esi
 push edx
 push ecx
 push edi
 call rw8056
 add esp,[ebp+908]
 mov esi,[ebx+y]
 mov edx,[ebp+928]
 mov ecx,[ebp+952]
 push esi
 push edx
 push ecx
 push edi
 call rw8056
 add esp,[ebp+908]
 xor esi,esi
 sub esi,edx
 push esi
 push edi
 call litrlsput
 add esp,[ebp+940]
 xor ecx,ecx
 push ecx
 push edi
 call litrlsput
 add esp,[ebp+940]
; end of 36455
notron36455: xor edi,edi
 add edi,36462
 cmp edi,[ebx+dagrajmpnow]
 jnz notron36462
; 36462 22 find
 xor ecx,ecx
 add ecx,36463
 mov [ebx+dagrajmpnow],ecx
 xor edx,edx
 cmp edx,[ebx+rcmdctr]
 jns notron36462
 xor ecx,ecx
 add ecx,36465
 mov [ebx+dagrajmpnow],ecx
notron36462: xor edi,edi
 add edi,36463
 cmp edi,[ebx+dagrajmpnow]
 jnz notron36463
 mov esi,[ebp+968]
 mov edx,[ebp+736]
 mov ecx,esi
 add ecx,edi
 mov eax,[ebp+1008]
 push edi
 push esi
 push edx
 push ecx
 push eax
 call tinypcl
 add esp,[ebp+892]
notron36463: xor edi,edi
 add edi,36464
 cmp edi,[ebx+dagrajmpnow]
 jnz notron36464
 mov esi,[ebp+968]
 add esi,edi
 mov edx,[ebp+928]
 mov ecx,[ebp+1008]
 push edi
 push esi
 push edx
 push ecx
 call udgetcoml
 add esp,[ebp+908]
notron36464: xor edi,edi
 add edi,36465
 cmp edi,[ebx+dagrajmpnow]
 jz isr36465
 jmp notron36465
isr36465: mov ecx,[ebx+y]
 mov [ebx+rcmdctr],ecx
 mov edx,[ebp+968]
 mov [ebx+chctr40],edx
 xor esi,esi
 mov ecx,[ebp+1008]
 push esi
 push ecx
 call litrlsput
 add esp,[ebp+940]
rlop36465: mov esi,[ebx+afilelen]
 cmp esi,[ebx+rcmdctr]
 js rlor36465
rlot36465: mov edi,[ebx+rcmdctr]
 xor esi,esi
 mov ecx,[ebp+928]
 mov eax,[ebp+1008]
 push edi
 push esi
 push esi
 push ecx
 push eax
 call findtwoeq
 add esp,[ebp+892]
 xor edx,edx
 cmp edx,eax
 jz rvop36465
 mov [ebx+chctr40],edx
rvop36465: cmp edx,[ebx+chctr40]
 jz rlor36465
 mov ecx,[ebp+968]
 add [ebx+rcmdctr],ecx
ryop36465: xor edx,edx
 jz rlop36465
rlor36465: mov esi,[ebx+afilelen]
 mov edi,[ebx+rcmdctr]
 cmp esi,edi
 jns rrt36465
 mov [ebx+rcmdctr],esi
 mov edi,esi
rrt36465: mov ecx,[ebp+968]
 cmp edi,ecx
 jns ryt36465
 mov [ebx+rcmdctr],ecx
ryt36465: mov edi,[ebx+rcmdctr]
 mov [ebx+y],edi
 mov esi,[ebp+928]
 mov edx,[ebp+952]
 mov ecx,[ebp+1008]
 push edi
 push esi
 push edx
 push ecx
 call rw8056
 add esp,[ebp+908]
 xor eax,eax
 sub eax,esi
 push eax
 push ecx
 call litrlsput
 add esp,[ebp+940]
 xor eax,eax
 push eax
 push ecx
 call litrlsput
 add esp,[ebp+940]
 xor ecx,ecx
 add ecx,53095
 mov [ebx+dagrajmpnow],ecx
notron36465: xor edi,edi
 add edi,36473
 cmp edi,[ebx+dagrajmpnow]
 jnz notron36473
; 36473 list 23
 xor ecx,ecx
 add ecx,53098
 xor edx,edx
 add edx,36326
 mov [ebx+dagrajmpnow],ecx
 mov [ebx+freddynext],edx
 mov ecx,[ebp+844]
 mov [ebx+chchr40],ecx
 xor edx,edx
 mov ecx,[ebp+1008]
 push edx
 push ecx
 call litrlsput
 add esp,[ebp+940]
 mov edi,[ebp+968]
 mov [ebx+rcmdctr],edi
 cmp edi,[ebx+afilelen]
 jns notron36473
 xor ecx,ecx
 add ecx,36476
 mov [ebx+dagrajmpnow],ecx
notron36473: xor edi,edi
 add edi,36474
 cmp edi,[ebx+dagrajmpnow]
 jz isr36474
 xor edi,edi
 jz notron36474
isr36474: mov esi,[ebp+964]
 add esi,edi
 mov edx,[ebp+928]
 mov ecx,[ebp+1008]
 push edi
 push esi
 push edx
 push ecx
 call udgetcoml
 add esp,[ebp+908]
 mov edx,[ebp+928]
 sub edx,[ebp+968]
 mov ecx,[ebx+a80w]
 push edx
 push ecx
 call nampy
 add esp,[ebp+940]
 lea esi,[ebx+crz0160]
 add esi,eax
 xor edx,edx
 sub esi,8192
 mov dl,[esi+8192]
 cmp edx,[ebp+556]
 jnz notron36474
 xor ecx,ecx
 add ecx,53095
 mov [ebx+dagrajmpnow],ecx
notron36474: xor edi,edi
 add edi,36476
 cmp edi,[ebx+dagrajmpnow]
 jz isr36476
 jmp notron36476
isr36476: xor ecx,ecx
 add ecx,53095
 mov [ebx+dagrajmpnow],ecx
 mov ecx,[ebp+968]
 mov [ebx+chctr40],ecx
rlop36476: mov ecx,[ebx+chctr40]
 mov esi,[ebx+rcmdctr]
 mov edi,[ebx+afilelen]
 add edi,[ebp+968]
 cmp ecx,[ebx+cmdheight]
 jns rfai36476
 cmp esi,edi
 js rstr36476
rfai36476: xor esi,esi
 jz aftr36476
rstr36476: mov edi,[ebx+rcmdctr]
 mov esi,[ebp+928]
 mov edx,[ebp+952]
 mov ecx,[ebp+1008]
 push edi
 push esi
 push edx
 push ecx
 call rw8056
 add esp,[ebp+908]
 xor eax,eax
 sub eax,esi
 push eax
 push ecx
 call litrlsput
 add esp,[ebp+940]
 mov esi,[ebp+968]
 add [ebx+rcmdctr],esi
 add [ebx+chctr40],esi
 xor ecx,ecx
 jz rlop36476
aftr36476: mov esi,[ebx+rcmdctr]
 mov edi,[ebp+968]
 add edi,[ebx+afilelen]
 cmp esi,edi
 jns notron36476
 xor esi,esi
 add esi,36477
 mov [ebx+dagrajmpnow],esi
notron36476: xor edi,edi
 add edi,36477
 cmp edi,[ebx+dagrajmpnow]
 jnz notron36477
 mov esi,[ebp+968]
 mov edx,[ebp+700]
 mov ecx,edi
 sub ecx,[ebp+960]
 mov eax,[ebp+1008]
 push edi
 push esi
 push edx
 push ecx
 push eax
 call tinypcl
 add esp,[ebp+892]
notron36477: xor edi,edi
 add edi,36484
 cmp edi,[ebx+dagrajmpnow]
 jnz notron36484
; 36484 inputc 24
 mov esi,[ebp+968]
 mov edx,[ebp+696]
 mov ecx,esi
 add ecx,edi
 mov eax,[ebp+1008]
 push edi
 push esi
 push edx
 push ecx
 push eax
 call tinypcl
 add esp,[ebp+892]
notron36484: xor edi,edi
 add edi,36485
 cmp edi,[ebx+dagrajmpnow]
 jnz notron36485
 mov esi,[ebp+968]
 add esi,edi
 mov edx,[ebp+928]
 mov ecx,[ebp+1008]
 push edi
 push esi
 push edx
 push ecx
 call udgetcoml
 add esp,[ebp+908]
notron36485: xor edi,edi
 add edi,36486
 cmp edi,[ebx+dagrajmpnow]
 jz isr36486
 jmp notron36486
isr36486: mov esi,[ebp+928]
 mov ecx,[ebp+1008]
 push esi
 push ecx
 call dlenval
 add esp,[ebp+940]
 mov [ebx+rcmdctr],eax
 xor ecx,ecx
 add ecx,53098
 xor edx,edx
 add edx,36485
 mov [ebx+dagrajmpnow],ecx
 mov [ebx+freddynext],edx
 xor esi,esi
 cmp esi,[ebx+rcmdctr]
 js nore36486
 xor ecx,ecx
 add ecx,53095
 mov [ebx+dagrajmpnow],ecx
nore36486: mov ecx,[ebx+y]
 mov edx,[ebp+968]
 add edx,[ebx+afilelen]
 cmp ecx,edx
 jns noin36486
 add ecx,[ebp+968]
 mov [ebx+y],ecx
noin36486: mov esi,[ebp+928]
 mov ecx,[ebp+1008]
 push esi
 push ecx
 call aptinsert
 add esp,[ebp+940]
 mov esi,[ebp+968]
 mov [ebx+keyclineinit],esi
 xor eax,eax
 push eax
 push ecx
 call litrlsput
 add esp,[ebp+940]
 mov esi,[ebp+968]
 mov [ebx+chdoc],esi
 mov edx,[ebx+y]
 cmp edx,[ebp+964]
 js notron36486
 sub edx,esi
 mov [ebx+y],edx
notron36486: xor edi,edi
 add edi,36495
 cmp edi,[ebx+dagrajmpnow]
 jnz notron36495
; 36495 uc 25
 mov esi,[ebp+584]
 mov [ebx+uppercase],esi
 xor ecx,ecx
 add ecx,53095
 mov [ebx+dagrajmpnow],ecx
notron36495: xor edi,edi
 add edi,36506
 cmp edi,[ebx+dagrajmpnow]
 jnz notron36506
; 36506 lc 26
 xor esi,esi
 mov [ebx+uppercase],esi
 xor ecx,ecx
 add ecx,53095
 mov [ebx+dagrajmpnow],ecx
notron36506: xor edi,edi
 add edi,36517
 cmp edi,[ebx+dagrajmpnow]
 jnz notron36517
; 36517 gui 27
 mov ecx,[ebx+xe]
 mov edx,[ebx+yre]
 mov [ebx+x],ecx
 mov [ebx+y],edx
 xor ecx,ecx
 add ecx,53098
 xor edx,edx
 add edx,52642
 mov [ebx+dagrajmpnow],ecx
 mov [ebx+freddynext],edx
notron36517: xor edi,edi
 add edi,36528
 cmp edi,[ebx+dagrajmpnow]
 jnz notron36528
; 36528 28 guiy
 mov ecx,[ebx+x]
 mov edx,[ebx+y]
 mov [ebx+xe],ecx
 mov [ebx+yre],edx
 xor ecx,ecx
 add ecx,53098
 xor edx,edx
 add edx,52642
 mov [ebx+dagrajmpnow],ecx
 mov [ebx+freddynext],edx
notron36528: xor edi,edi
 add edi,36539
 cmp edi,[ebx+dagrajmpnow]
 jnz notron3653r9
 xor ecx,ecx
 add ecx,53098
 xor edx,edx
 add edx,11019
 mov [ebx+dagrajmpnow],ecx
 mov [ebx+freddynext],edx
notron3653r9: xor edi,edi
 add edi,53095
 cmp edi,[ebx+dagrajmpnow]
 jnz notron53095
 mov edi,[ebp+972]
 mov [ebx+repceedag],edi
 xor edi,edi
 add edi,53098
 mov [ebx+dagrajmpnow],edi
 xor ecx,ecx
 add ecx,36180
 mov [ebx+freddynext],ecx
 mov ecx,[ebp+928]
 mov edx,[ebp+1008]
 push ecx
 push edx
 call clearline
 add esp,[ebp+940]
 mov ecx,[ebp+968]
 mov edx,[ebp+968]
 mov [ebx+keyclineinit],ecx
 mov [ebx+cmdkeyxctr],edx
 xor edi,edi
 jz notron53095
notron53095: xor ecx,ecx
 add ecx,36326
 cmp ecx,[ebx+dagrajmpnow]
 jnz notrox36326
 xor edi,edi
 add edi,36180
 xor esi,esi
 mov edx,[ebp+968]
 mov eax,[ebp+1008]
 push ecx
 push esi
 push edx
 push edi
 push eax
 call tinypcl
 add esp,[ebp+892]
 xor edi,edi
 add edi,53098
 mov [ebx+dagrajmpnow],edi
 xor ecx,ecx
 add ecx,36180
 mov [ebx+freddynext],ecx
notrox36326: xor edi,edi
 add edi,53098
 cmp edi,[ebx+dagrajmpnow]
 jz isr53098
 jmp notron53098
isr53098: xor ecx,ecx
 add ecx,36326
 cmp ecx,[ebx+freddynext]
 jz jsr53098
 xor ecx,ecx
 add ecx,36180
 cmp ecx,[ebx+freddynext]
 jz jss53098
 jmp jrr53098
jsr53098: mov esi,[ebx+freddynext]
 mov [ebx+dagrajmpnow],esi
 mov edi,ecx
 mov esi,[ebp+972]
 mov edx,[ebp+968]
 xor ecx,ecx
 add ecx,36180
 mov eax,[ebp+1008]
 push edi
 push esi
 push edx
 push ecx
 push eax
 call tinypcl
 add esp,[ebp+892]
jss53098: xor eax,eax
 mov edx,[ebp+1008]
 push eax
 push edx
 call litrlsput
 add esp,[ebp+940]
 mov esi,[ebx+freddynext]
 mov [ebx+dagrajmpnow],esi
 xor edi,edi
 add edi,36180
 xor esi,esi
 mov edx,[ebp+960]
 mov ecx,[ebp+964]
 add ecx,edi
 mov eax,[ebp+1008]
 push edi
 push esi
 push edx
 push ecx
 push eax
 call tinypcl
 add esp,[ebp+892]
 mov edi,ecx
 mov edx,[ebp+908]
 add ecx,[ebp+964]
 push edi
 push esi
 push edx
 push ecx
 push eax
 call tinypcl
 add esp,[ebp+892]
 mov edi,ecx
 mov edx,[ebp+856]
 add ecx,[ebp+964]
 push edi
 push esi
 push edx
 push ecx
 push eax
 call tinypcl
 add esp,[ebp+892]
 mov edi,ecx
 mov esi,[ebp+968]
 mov edx,[ebp+728]
 add ecx,[ebp+956]
 push edi
 push esi
 push edx
 push ecx
 push eax
 call tinypcl
 add esp,[ebp+892]
 mov ecx,[ebp+928]
 mov edx,[ebp+1008]
 push ecx
 push edx
 call clearline
 add esp,[ebp+940]
 mov ecx,[ebp+968]
 mov edx,[ebp+968]
 mov [ebx+keyclineinit],ecx
 mov [ebx+cmdkeyxctr],edx
 xor ecx,ecx
 add ecx,36200
 mov [ebx+freddynext],ecx
 xor ecx,ecx
 add ecx,53098
 mov [ebx+dagrajmpnow],ecx
jrr53098: xor ecx,ecx
 add ecx,52648
 cmp ecx,[ebx+freddynext]
 jnz jjb53098
 mov ecx,[ebp+1008]
 mov edx,[ebp+968]
 push edx
 push ecx
 call clearpage
 add esp,[ebp+940]
 mov esi,[ebp+768]
 sub esi,[ebp+852]
 add esi,[ebp+968]
 mov edx,[ebp+852]
 push esi
 push edx
 push ecx
 call printconst
 add esp,[ebp+924]
 xor ecx,ecx
 add ecx,52661
 mov [ebx+freddynext],ecx
jjb53098: xor ecx,ecx
 add ecx,52642
 cmp ecx,[ebx+freddynext]
 jnz jjx53098
 mov esi,[ebx+xe]
 mov edx,[ebx+yre]
 mov [ebx+x],esi
 mov [ebx+y],edx
 mov eax,[ebp+968]
 mov ecx,[ebp+1008]
 push eax
 push ecx
 call clearpage
 add esp,[ebp+940]
 xor esi,esi
 add esi,1084
 push esi
 push ecx
 call udregkey2176
 add esp,[ebp+940]
 xor ecx,ecx
 add ecx,52645
 mov [ebx+freddynext],ecx
jjx53098: mov esi,[ebx+freddynext]
 mov edi,[ebx+dagraprvjmp]
 mov edx,[ebx+dagrajmpnow]
 mov [ebx+dagraprvjmp],edx
 mov [ebx+dagrajmpnow],esi
 mov edx,[ebx+dagranewkey]
 mov [ebx+dagraprvkey],edx
 xor edi,edi
 cmp edi,[ebx+nzerror]
 jz notron53098
 xor ecx,ecx
 add ecx,11019
 mov [ebx+freddynext],ecx
 mov [ebx+dagrajmpnow],ecx
notron53098: xor edi,edi
 add esp,[ebp+596]
 pop eax
 pop ecx
 pop edx
 pop ebx
 pop esi
 pop edi
 pop ebp
 ret
; bottom of ron52640
; agcapen(lnes* gcae)
; 1000 ebp    1004 retad    1008 *gcae
; 984 edx    988 ebx    992 esi    996 edi
; 968 1    972 0    976 eax    980 ecx
; 952 5    956 4    960 3    964 2
; 936 9    940 8    944 7    948 6
; 920 13    924 12    928 11    932 10
; 904 17    908 16    912 15    916 fixesp
; 888 21    892 20    896 19    900 argaddr
; 872 25    876 24    880 23    884 other
; 856 29    860 28    864 27    868
; 840 33    844 32    848 31    852
; 704 line of data
agcapen: push ebp
 mov ebp,esp
 sub ebp,1000
 push edi
 push esi
 push ebx
 push edx
 push ecx
 push eax
 xor edi,edi
 add edi,1033
 mov ecx,edi
 mov edx,edi
 sub ecx,999
 sub edx,1032
 mov eax,ecx
 add eax,eax
 add eax,eax
 add eax,eax
 mov ebx,ecx
 xor esi,esi
agcapeu: push esi
 add esi,edx
 sub ecx,edx
 jnz agcapeu
 xor esi,esi
agcapel: push esi
 sub ebx,edx
 jnz agcapel
 mov [ebp+916],eax
 xor esi,esi
 add esi,[ebp+1008]
 sub esi,8192
 mov eax,[esi+hmanyargs]
 xor ecx,ecx
 xor edi,edi
 mov esi,eax
 add esi,[ebp+968]
 mov [ebp+900],esi
 mov edx,[ebp+844]
 add edx,edx
 add edx,edx
 mov ebx,[ebp+968]
 cmp esi,[ebp+972]
 jz agcalobt
 sub esi,1024
agcalopt: xor eax,eax
 mov al,[esi+1024]
 cmp eax,[ebp+840]
 js agcalobs
 add esi,ebx
 add ecx,ebx
 cmp ecx,edx
 js agcalopt
 xor ebx,ebx
 jz agcalobt
agcalobs: add esi,ebx
agcalobe: cmp ecx,edx
 jns agcalobt
 xor eax,eax
 mov al,[esi+1024]
 cmp al,[ebp+840]
 js agcalobt
 mov [ebp+edi*1+704],al
 add esi,ebx
 add edi,ebx
 add ecx,ebx
 cmp ecx,edx
 js agcalobe
agcalobt: mov ebx,[ebp+1008]
 sub ebx,8192
 xor eax,eax
 mov al,[ebp+704]
 cmp eax,[ebp+840]
 jns agcaea
 jmp agcabop
agcaea: xor edx,edx
 add edx,2111
 sub edx,2000
 mov [ebx+dagranewkey],edx
 mov ecx,[ebp+1008]
 push ecx
 call ron52640
 add esp,[ebp+956]
 xor edx,edx
 jz agcalopl
 add edx,2032
 sub edx,2000
 mov [ebx+dagranewkey],edx
 mov ecx,[ebp+1008]
 push ecx
 call ron52640
 add esp,[ebp+956]
agcalopl: xor esi,esi
 mov ecx,[ebp+844]
 add ecx,ecx
 add ecx,ecx
 mov edi,[ebp+968]
agcalapl: xor edx,edx
 mov dl,[ebp+esi*1+704]
 cmp edx,[ebp+840]
 js agcaboo
 mov [ebx+dagranewkey],edx
 mov eax,[ebp+1008]
 push eax
 call ron52640
 add esp,[ebp+956]
 add esi,edi
 cmp esi,ecx
 js agcalapl
agcaboo: xor edx,edx
 add edx,2010
 sub edx,2000
 mov [ebx+dagranewkey],edx
 mov ecx,[ebp+1008]
 push ecx
 call ron52640
 add esp,[ebp+956]
agcabop: xor ecx,ecx
 add ecx,[ebp+916]
 add esp,ecx
 pop eax
 pop ecx
 pop edx
 pop ebx
 pop esi
 pop edi
 pop ebp
 ret
; bottom of agcapen
; int qgetpixval(bq,xq,yq)
; yq1016
; 1000 ebp   1004 retad   bq1008    xq1012
; 984 edx    988 ebx      992 esi   996 edi
; 968 1      972 0        976 eax   980 ecx
; 952 5      956 4        960 3     964 2
; 936 9      940 8        944 7     948 6
; 920 13     924 12       928 11    932 10
; 904 17     908 16       912 15    916 14
; 888 21     892 20       896 19    900 18
; 872 25     876 24       880 23    884 22
; 856 29     860 28       864 27    868 26
; 840 33     844 32       848 31    852 30
; 824        828 36       832       836
; 808        812 40       816       820
; 792        796 44       800 ramaddr    804 pixgrp8
; 776 49     780 48       784 espaddend   788 codeaddr
qgetpixval: push ebp
 mov ebp,esp
 sub ebp,1000
 push edi
 push esi
 push ebx
 push edx
 push ecx
 push eax
 xor edi,edi
 add edi,2050
 mov edx,edi
 sub edx,2049
 mov ecx,edi
 sub ecx,2000
 mov eax,ecx
 add eax,eax
 add eax,eax
 xor esi,esi
qgetpixvlu: push esi
 add esi,edx
 sub ecx,edx
 jnz qgetpixvlu
 mov [ebp+784],eax
 xor edx,edx
 push edx
 call getreala
 add esp,[ebp+956]
 mov [ebp+788],eax
; mov esi,eax
; lea ebx,[esi+lastcode]
; add ebx,[ebp+968]
 mov ebx,[ebp+1008]
 mov [ebp+800],ebx
 sub ebx,8192
 lea esi,[ebx+vardib]
 sub esi,edi
 xor eax,eax
 xor edx,edx
 mov al,[esi+2068]
 mov ah,[esi+2069]
; eax=width_18
 mov dl,[esi+2072]
 mov dh,[esi+2073]
; edx=height_22
 mov esi,eax
 add esi,[ebp+848]
; esi=width+31
 shr esi,1
 shr esi,1
 shr esi,1
 shr esi,1
 shr esi,1
; esi=width/32+31/32
 add esi,esi
 add esi,esi
; esi=width/8+7.75/8 width in bytes
 mov ecx,edx
 sub ecx,[ebp+1016]
 sub ecx,[ebp+968]
; ecx=height-(y+1)
 push ecx
 push esi
 call nampy
 add esp,[ebp+940]
 mov ecx,[ebp+1012]
 mov edx,ecx
 shr edx,1
 shr edx,1
 shr edx,1
; edx=byte location of x
 add edx,eax
 mov [ebp+804],edx
 mov esi,ecx
 and esi,[ebp+944]
 add esi,[ebp+788]
 xor eax,eax
 mov al,[esi+qsense]
 mov esi,[ebp+804]
 add esi,3062
 sub esi,3000
 mov edx,[ebp+968]
 and al,[ebx+esi*1+vardib]
 jz skipqgetzix
 xor edx,edx
skipqgetzix: mov [ebp+976],edx
 add esp,[ebp+784]
 pop eax
 pop ecx
 pop edx
 pop ebx
 pop esi
 pop edi
 pop ebp
 ret
; bottom of qgetpixval
; 4 to 7 million LOST DOCTOR or insurance because of Obamacare. 1150
; int qgetgrouplen(qeb,qpi,qsx,qfy)
; 1008 qeb    1012 qpi    1016 qsx    1020 qfy
; 992 esi      996 edi    1000 ebp    1004 retad
; 976 eax      980 ecx     984 edx     988 ebx
; 960 3        964 2       968 1       972 0
; 944 7        948         952         956 4
; 928          932         936         940 8
; 912 15       916 espadd    920 width    924 12
qgetgrouplen: push ebp
 mov ebp,esp
 sub ebp,1000
 push edi
 push esi
 push ebx
 push edx
 push ecx
 xor edi,edi
 add edi,1017
 mov edx,edi
 mov ecx,edi
 mov esi,edi
 sub edx,1016
 sub ecx,1000
 sub esi,1018
 mov eax,ecx
 add eax,eax
 add eax,eax
qgetgrouplpu: push esi
 add esi,edx
 sub ecx,edx
 jnz qgetgrouplpu
 mov ebx,[ebp+1008]
 sub ebx,8192
 lea esi,[ebx+vardib]
 mov [ebp+916],eax
 xor eax,eax
 lea esi,[ebx+vardib]
 sub esi,edi
 mov al,[esi+1035]
 mov ah,[esi+1036]
 mov [ebp+920],eax
 xor ecx,ecx
 mov esi,[ebp+1016]
 cmp esi,[ebp+920]
 jns qgetgroupbot
qgetgrouplop: cmp esi,[ebp+920]
 jns qgetgroupbob
 lea edx,[ebx+8192]
 mov eax,[ebp+1020]
 push eax
 push esi
 push edx
 call qgetpixval
 add esp,[ebp+924]
 cmp eax,[ebp+1012]
 jnz qgetgroupbob
 mov edx,[ebp+968]
 add ecx,edx
 add esi,edx
 xor edx,edx
 jz qgetgrouplop
qgetgroupbob: mov [ebp+976],ecx
qgetgroupbot: mov edi,[ebp+916]
 sub edi,[ebp+956]
 add esp,edi
 pop eax
 pop ecx
 pop edx
 pop ebx
 pop esi
 pop edi
 pop ebp
 ret
; bottom of qgetgrouplen
; void qlinepage(qbx,qdc)
; 1000 ebp    1004 retad    1008 qbx     1012 qdc
;  984 edx     988 ebx       992 esi      996 edi
;  968 1       972 0         976 eax      980 ecx
;  952 5       956 4         960 3        964 2
;  936         940 8         944 7        948 6
;  920 13      924 12        928 espadd    932
;  904         908 16        912          916 codeaddr
;  888         892 20    896 colorlen     900 olct
;  872 25      876 24    888 colordex     884 ilct
;  856 29      860 28    864 color864    868 color868
;  456
qlinepage: push ebp
 mov ebp,esp
 sub ebp,1000
 push edi
 push esi
 push ebx
 push edx
 push ecx
 push eax
 xor edi,edi
 add edi,1030
 mov ecx,edi
 mov edx,edi
 sub ecx,1000
 sub edx,1029
 mov eax,ecx
 add eax,eax
 add eax,eax
 xor esi,esi
qlinepapu: push esi
 add esi,edx
 sub ecx,edx
 jnz qlinepapu
 mov ecx,edi
 sub ecx,930
 mov esi,edi
 sub esi,1031
qlinepbpu: push esi
 add eax,[ebp+956]
 sub ecx,edx
 jnz qlinepbpu
 mov [ebp+928],eax
 xor ecx,ecx
 push ecx
 call getreala
 add esp,[ebp+956]
 mov [ebp+916],eax
 mov ecx,edi
 sub ecx,968
 lea esi,[eax+constbh]
 xor ebx,ebx
 xor eax,eax
 sub esi,500
qlinehdol: mov al,[esi+500]
 mov [ebp+ebx*1+458],al
 add esi,edx
 add ebx,edx
 sub ecx,edx
 jnz qlinehdol
 mov eax,[ebp+968]
 mov [ebp+480],eax
 mov ecx,[ebp+972]
 mov [ebp+900],ecx
 xor esi,esi
 add esi,16384
 sub esi,1024
 mov [ebp+864],esi
; color values 864 868
 xor esi,esi
 add esi,16384
 sub esi,15360
 mov [ebp+868],esi
qlpolop: mov ecx,[ebp+972]
 mov [ebp+884],ecx
 mov eax,[ebp+1008]
 mov esi,[ebp+900]
 push esi
 push ecx
 push eax
 call qgetpixval
 add esp,[ebp+924]
 mov [ebp+880],eax
qlpilop: mov eax,[ebp+900]
 mov ecx,[ebp+884]
 mov edx,[ebp+880]
 mov esi,[ebp+1008]
 push eax
 push ecx
 push edx
 push esi
 call qgetgrouplen
 add esp,[ebp+908]
 mov [ebp+896],eax
 cmp eax,[ebp+968]
 jns qlpolba
 jmp qlpolbt
qlpolba: mov [ebp+476],eax
 mov [ebp+492],eax
 mov esi,[ebp+880]
 mov ecx,[ebp+esi*4+864]
 mov [ebp+516],ecx
; x_884  y_900  colordex_880  linelen_476
; ---------------------------------------
 mov eax,[ebp+972]
 lea ecx,[ebp+472]
 lea edx,[ebp+520]
 mov esi,[ebp+480]
 push eax
 push ecx
 push edx
 push esi
 push eax
 push eax
 push eax
 push esi
 mov eax,[ebp+476]
 mov ecx,[ebp+900]
 mov edx,[ebp+884]
 mov esi,[ebp+1012]
 push eax
 push ecx
 push edx
 push esi
 mov esi,[ebp+916]
 lea ecx,[esi+aftqlpsdbd]
 add esi,00800000h
 mov eax,[esi+lptextout]
 push ecx
 push eax
 ret
aftqlpsdbd: xor ecx,ecx
 mov ebp,esp
 sub ebp,456
 mov eax,[ebp+968]
 sub eax,[ebp+880]
 mov [ebp+880],eax
 mov ecx,[ebp+896]
 add [ebp+884],ecx
 jmp qlpilop
qlpolbt: mov esi,[ebp+964]
 add esi,[ebp+892]
 mov ebx,[ebp+1008]
 sub ebx,8192
 mov ecx,[ebx+esi*1+vardib]
 mov eax,[ebp+900]
 add eax,[ebp+968]
 mov [ebp+900],eax
 cmp eax,ecx
 jns qlpolby
 jmp qlpolop
qlpolby: add esp,[ebp+928]
 pop eax
 pop ecx
 pop edx
 pop ebx
 pop esi
 pop edi
 pop ebp
 ret
; bottom of qlinepage
; int -stdcall cbwindlnc(hw,kpc,keyr,lp)
; 1012 kpc    1016 keyr    1020 lp
; 1000 ebpsave    1004 retad    1008 hw
; 988 ebx    992 esi    996 edi
; 976 eaxrez    980 ecx    984 edx
; 964 2    968 1    972 0
; 952 5    956 4    960 3
; 940 8    944 7    948 cst160
; 928 11    932 10    936 9
; 916 cst26A    920 selcase    924 12
; 904 17    908 16    912 cst255
; 892 20    896 ramadr    900 rdwrdw513
; 880 23    884 codeadr    888 21
cbwindlnc: push ebp
 mov ebp,esp
 sub ebp,1000
 push edi
 push esi
 push ebx
 push edx
 push ecx
 xor eax,eax
 push eax
 xor edi,edi
 xor esi,esi
 add esi,1024
 mov ecx,esi
 sub ecx,1000
 sub esi,1023
cbwindlpu: push edi
 add edi,esi
 sub ecx,esi
 jnz cbwindlpu
 xor ecx,ecx
 add ecx,1255
 sub ecx,1000
 mov [ebp+912],ecx
 xor ecx,ecx
 add ecx,2025
 sub ecx,512
 sub ecx,1000
 mov [ebp+900],ecx
 xor ecx,ecx
 add ecx,2160
 sub ecx,2000
 mov [ebp+948],ecx
 xor ecx,ecx
 push ecx
 call getreala
 add esp,[ebp+956]
 mov [ebp+884],eax
 mov esi,[ebp+884]
 lea edx,[esi+lastcode]
 add edx,[ebp+968]
 mov [ebp+896],edx
 xor ecx,ecx
 add ecx,616
 add ecx,616
 sub ecx,614
 mov [ebp+916],ecx
 mov edx,[ebp+1012]
 add edx,[ebp+916]
 mov [ebp+920],edx
 mov ebx,[ebp+896]
 mov edi,[ebp+884]
 sub ebx,8192
 mov ecx,[ebp+920]
 cmp ecx,[edi+amcreate]
; early crash
 jnz nocreate
 xor edx,edx
 jmp fmcreate
nocreate: mov ecx,[edi+amkeydown]
 cmp ecx,[ebp+920]
 jnz nokeydown
 xor edx,edx
 jmp fmkeydown
nokeydown: mov ecx,[edi+amkeyup]
 cmp ecx,[ebp+920]
 jnz nokeyup
 xor edx,edx
 jz fmkeyup
nokeyup: mov ecx,[edi+ampaint]
 cmp ecx,[ebp+920]
 jnz nopaint
 xor edx,edx
 jmp fmpaint
nopaint: mov ecx,[edi+amdestroy]
 cmp ecx,[ebp+920]
 jnz nodestroy
 xor edx,edx
 jmp fmdestroy
nodestroy: mov ecx,[ebp+1020]
 push ecx
 mov ecx,[ebp+1016]
 push ecx
 mov ecx,[ebp+1012]
 push ecx
 mov ecx,[ebp+1008]
 push ecx
 mov edi,[ebp+884]
 lea edx,[edi+aftcbdwp]
 add edi,0800000h
 mov ecx,[edi+lpdefwproc]
 push edx
 push ecx
 ret
aftcbdwp: mov ebp,esp
 sub ebp,880
 mov [ebp+976],eax
 jmp quitwindlnc
fmkeyup: mov ecx,[ebp+1016]
 and ecx,[ebp+912]
 cmp ecx,[ebp+948]
 jz isresetkey
 mov edx,[ebp+908]
 cmp ecx,edx
 jz isresetkey
 add edx,[ebp+968]
 cmp ecx,edx
 jnz noresetkey
isresetkey: mov edx,[ebp+972]
 mov [ebx+nzshift],edx
noresetkey: jmp quitwindlnc
fmkeydown: mov ecx,[ebp+968]
 add ecx,[ebp+912]
 mov edi,[ebx+keysdebugger]
 push ecx
 push edi
 call nampy
 add esp,[ebp+940]
 mov al,[ebp+1016]
 mov [ebx+keysdebugger],eax
 mov esi,[ebp+1016]
 mov ecx,esi
 and ecx,[ebp+912]
 mov edi,[ebp+968]
 cmp ecx,[ebp+948]
 jz rsekey
 mov edx,[ebp+908]
 cmp ecx,edx
 jz rsekey
 add edx,edi
 cmp ecx,edx
 jnz usekey
 add edi,edi
rsekey: mov [ebx+nzshift],edi
 jmp quitwindlnc
usekey: mov edi,[ebx+nzshift]
 push edi
 push esi
 call wdoskey
 add esp,[ebp+940]
 mov [ebx+dagranewkey],eax
 mov ecx,[ebp+896]
 push ecx
 call ron52640
 add esp,[ebp+956]
; or or xor   ecx  12407
 xor ecx,ecx
 jz cbkaftced
 xor edi,edi
 cmp edi,[ebx+repceedag]
 jz cbkaftced
 add edi,1099
 sub edi,1000
 mov [ebx+dagranewkey],edi
 mov ecx,[ebp+896]
 push ecx
 call ron52640
 add esp,[ebp+956]
 xor edi,edi
 mov [ebx+repceedag],edi
cbkaftced: mov ecx,[ebx+freddynext]
 mov [ebx+dagrajmpnow],ecx
; ** warning duplicate entry dagrajmpnow=freddynext
 cmp ecx,11019
 jnz keepcbrun
cbpostqk: mov edx,[ebp+972]
 mov edi,[ebp+884]
 lea esi,[edi+keepcbrun]
 add edi,0800000h
 mov ecx,[edi+lppqmessage]
 push edx
 push esi
 push ecx
 ret
keepcbrun: mov ebp,esp
 sub ebp,880
 mov ebx,[ebp+896]
 sub ebx,8192
 lea ecx,[ebx+revl]
 push ecx
 mov ebx,[ebp+1008]
 push ebx
 mov edi,[ebp+884]
 lea esi,[edi+reepcbrun]
 add edi,0800000h
 mov ecx,[edi+lpgwrect]
 push esi
 push ecx
 ret
reepcbrun: mov ebp,esp
 sub ebp,880
 mov ebx,[ebp+896]
 sub ebx,8192
 lea esi,[ebx+revl]
 push esi
 call fixrect
 add esp,[ebp+956]
 cmp eax,[ebp+968]
 jns stillruncb
notcbrun: jmp quitwindlnc
stillruncb: mov edx,[ebx+dagrajmpnow]
 cmp edx,11019
 jz notcbrun
 mov ecx,[ebp+900]
 push ecx
 mov edx,[ebp+972]
 push edx
 lea ecx,[ebx+revl]
 push ecx
 mov edx,[ebp+1008]
 push edx
 mov edi,[ebp+884]
 lea edx,[edi+aftredraw]
 add edi,0800000h
 mov ecx,[edi+lprdwindow]
 push edx
 push ecx
 ret
aftredraw: mov ebp,esp
 sub ebp,880
 xor ecx,ecx
 jz totcbrun
rotcbrun: xor ecx,ecx
 jz notcbrun
; -
totcbrun: mov ebx,[ebp+896]
 sub ebx,8192
 lea esi,[ebx+revl]
 sub esi,1000
; mov edx,[ebx+dagrajmpnow]
 mov edx,[ebp+1012]
 mov ebx,[esi+1008]
 mov edi,[esi+1012]
; xxxxxxxxxxxx
 xor ecx,ecx
 jz rotcbrun
fmcreate: mov ecx,[ebp+896]
 push ecx
 call new2608
 add esp,[ebp+956]
 xor ecx,ecx
 add ecx,52640
 mov [ebx+dagrajmpnow],ecx
 mov [ebx+freddynext],ecx
 mov ecx,[ebp+908]
 add ecx,ecx
 mov [ebx+dagranewkey],ecx
 xor ecx,ecx
 mov [ebx+nzshift],ecx
 mov edx,[ebp+896]
 push edx
 call ron52640
 add esp,[ebp+956]
 mov edx,[ebp+896]
 push edx
 call agcapen
 add esp,[ebp+956]
 xor ecx,ecx
 jz cbkc
cbkc: jmp cbkaftced
fmpaint: mov esi,[ebp+1008]
 mov edx,[ebp+896]
 push esi
 push edx
 call texcbpage
 add esp,[ebp+940]
 jmp notcbrun
fmdestroy: xor ecx,ecx
 add ecx,11019
 mov [ebx+dagrajmpnow],ecx
 jmp cbpostqk
quitwindlnc: mov ecx,[ebp+940]
quitlncloop: mov esi,ecx
 mov edi,ecx
 mov edx,[ebp+esi*4+972]
 mov [ebp+edi*4+988],edx
 sub ecx,[ebp+968]
 jnz quitlncloop
 xor ecx,ecx
 add ecx,1096
 sub ecx,984
 add esp,ecx
 pop eax
 pop ecx
 pop edx
 pop ebx
 pop esi
 pop edi
 pop ebp
 ret
; end of cbwindlnc
rncmain125: push ebp
 mov ebp,esp
 sub ebp,300
; 0300 ebp 0304 retad
 push edi
 push esi
 push ebx
 push edx
 push ecx
 xor edi,edi
 push edi
 push edi
 push edi
 push edi
; 276 272 268 264
 xor eax,eax
 push eax
 call getreala
 xor ecx,ecx
 add ecx,304
 sub ecx,300
 add esp,ecx
reforeinit: mov esi,eax
 mov [ebp+268],esi
 lea ebx,[esi+lastcode]
 add ebx,1001
 sub ebx,1000
 mov [ebp+272],ebx
 sub ebx,8192
 xor edi,edi
 mov [ebx+rquesize],edi
; xxxxxxxxxxxx
 lea edi,[esi+aftargcall]
 add esi,00800000h
 mov ecx,[esi+wiogetar]
 push edi
 push ecx
 ret
aftargcall: mov esi,[ebp+268]
 mov [ebx+hmanyargs],eax
 mov edi,eax
; xxxxxxxxxxxx
 lea edi,[esi+aftinitw]
 add esi,00800000h
 mov ecx,[esi+asminitw]
 xor eax,eax
 push eax
 push edi
 push ecx
 ret
aftinitw: mov edi,eax
 xor ecx,ecx
 add ecx,1000
 sub ecx,999
 xor edx,edx
 xor eax,eax
 push ecx
 push edx
 push edx
 push edi
 call wmwindlnc
 xor ecx,ecx
 add ecx,316
 sub ecx,300
 add esp,ecx
 xor edi,edi
 add edi,1016
 sub edi,1000
 add esp,edi
 pop ecx
 pop edx
 pop ebx
 pop esi
 pop edi
 pop ebp
 ret
; return to system here
; int WINAPI wmwindlnc(bhinstance,-,-,-)
; 1012 prevstance    1016 lpcmdline    1020 ncmdshow
; 1000 ebpsave    1004 retad    1008 bhinstance
; 988 ebx        992 esi        996 edi
; 976 eaxrc        980 ecx        984 edx
; 964 0    968 -1
; 952 3    956 2    972 -2
; 940 6    944 5    960 1
; 928 9    932 8    948 4
; 916 12    920 11    936 7
; 904 15    908 nzgm    912 13
; 892 18    896 17    900 16
; 880 21    884 20    888 19
; 868 24    872 23    876 22
; 856 27    860 26    864 cst32512
; 844 ramaddr    848 codeaddr    852 28
; 832 33    836 32    840 31
; 820 36    824 &wmwindclass    828 34
; 808 39    812 &wmwindmsg    816 37
; 796 42    800 mhwnd    804 40
; 784 45    788 44    792 43
wmwindlnc: push ebp
 mov ebp,esp
 sub ebp,1000
 push edi
 push esi
 push ebx
 push edx
 push ecx
 xor edi,edi
 add edi,1049
 mov ecx,edi
 mov edx,edi
 sub edx,1048
 sub ecx,1000
 sub edi,1052
wmwindpu: push edi
 add edi,edx
 sub ecx,edx
 jnz wmwindpu
 xor ecx,ecx
 push ecx
 call getreala
 add esp,[ebp+948]
 mov esi,eax
 lea ebx,[esi+lastcode]
 add ebx,[ebp+960]
 mov [ebp+844],ebx
 mov [ebp+848],esi
 sub ebx,8192
 lea edi,[ebx+wmwindclass]
 mov [ebp+824],edi
 sub edi,1000
 lea ecx,[ebx+wmwindmsg]
 mov [ebp+812],ecx
 mov edx,[ebp+952]
 mov [edi+1000],edx
 mov esi,[ebp+848]
 lea ecx,[esi+cbwindlnc]
 mov [edi+1004],ecx
 mov ecx,[ebp+964]
 mov [edi+1008],ecx
 mov edx,[ebp+964]
 mov [edi+1012],edx
 mov ecx,[ebp+1008]
 mov [edi+1016],ecx
set864: xor ecx,ecx
 add ecx,32512
 mov [ebp+864],ecx
 xor edx,edx
 cmp edx,[ebp+964]
 jnz beficon
beficon: xor edx,edx
 push ecx
 push edx
 mov esi,[ebp+848]
 lea edx,[esi+afticon]
 add esi,0800000h
 mov ecx,[esi+lploadicon]
 push edx
 push ecx
 ret
afticon: mov ebp,esp
 sub ebp,784
 xor ecx,ecx
 cmp ecx,[ebp+964]
 jnz aftjcon
aftjcon: mov edi,[ebp+824]
 sub edi,1000
 mov [edi+1020],eax
 mov esi,[ebp+848]
 mov eax,[ebp+864]
 xor ebx,ebx
 lea edx,[esi+aftcursor]
 add esi,00800000h
 mov ecx,[esi+lploadcursor]
 push eax
 push ebx
 push edx
 push ecx
 ret
aftcursor: mov ebp,esp
 sub ebp,784
 xor ecx,ecx
 cmp ecx,[ebp+964]
 jnz aftbursor
aftbursor: mov edi,[ebp+824]
 sub edi,1000
 mov [edi+1024],eax
 mov ecx,[ebp+940]
 mov [edi+1028],ecx
 xor ebx,ebx
 mov [edi+1032],ebx
 mov esi,[ebp+848]
 lea ecx,[esi+jasonsname]
 mov [edi+1036],ecx
 mov eax,[ebp+824]
 lea edx,[esi+aftrclass]
 add esi,00800000h
 mov ecx,[esi+lprclass]
 push eax
 push edx
 push ecx
 ret
aftrclass: mov ebp,esp
 sub ebp,784
 xor ecx,ecx
 cmp ecx,[ebp+964]
 jnz afteclass
afteclass: mov esi,[ebp+848]
 lea edi,[esi+prebh]
 sub edi,1000
 mov ecx,[ebp+964]
 mov edx,[ebp+1008]
 push ecx
 push edx
 push ecx
 push ecx
 mov ecx,[edi+1024]
 mov edx,[edi+1020]
 add edx,[ebp+836]
 add ecx,[ebp+788]
 add ecx,[ebp+924]
 push ecx
 push edx
 mov edi,[ebp+824]
 sub edi,1000
 mov ecx,[ebp+964]
 push ecx
 mov edx,[ebp+932]
 push edx
 xor edx,edx
 add edx,0CF0000h
 push edx
 lea ecx,[esi+scotsname]
 mov edx,[edi+1036]
 push ecx
 push edx
 mov edx,[ebp+964]
 add edx,8768
 sub edx,8000
 sub edx,768
 push edx
; call sequence after arguments
 lea edx,[esi+aftcreatew]
 add esi,0800000h
 mov ecx,[esi+lpcwindow]
 push edx
 push ecx
 ret
aftcreatew: mov ebp,esp
 sub ebp,784
 mov [ebp+800],eax
 xor ecx,ecx
 jz aftcreateu
 jmp aftrclass
aftcreateu: mov esi,[ebp+848]
 mov eax,[ebp+1020]
 mov ecx,[ebp+800]
 lea edx,[esi+aftswind]
 add esi,0800000h
 mov ebx,[esi+lpswindow]
 push eax
 push ecx
 push edx
 push ebx
 ret
aftswind: mov ebp,esp
 sub ebp,784
 mov esi,[ebp+848]
 mov eax,[ebp+800]
 lea ecx,[esi+aftuwind]
 add esi,0800000h
 mov edx,[esi+lpuwindow]
 push eax
 push ecx
 push edx
 ret
aftuwind: mov ebp,esp
 sub ebp,784
whigmlop: mov edi,[ebp+812]
 mov esi,[ebp+848]
 mov edx,[ebp+964]
 push edx
 push edx
 push edx
 push edi
 lea edx,[esi+aftgm]
 add esi,0800000h
 mov ecx,[esi+lpgm]
 push edx
 push ecx
 ret
aftgm: mov ebp,esp
 sub ebp,784
 mov edi,[ebp+812]
 mov esi,[ebp+848]
 mov [ebp+908],eax
 xor ecx,ecx
 cmp ecx,[ebp+908]
 jnz keepgm
skipwhigm:   xor ecx,ecx
 jz quitgm
keepgm:  lea ecx,[esi+afttrm]
 add esi,0800000h
 mov edx,[esi+lptm]
 push edi
 push ecx
 push edx
 ret
afttrm: mov ebp,esp
 sub ebp,784
 mov edi,[ebp+812]
 mov esi,[ebp+848]
 lea ecx,[esi+aftdm]
 add esi,0800000h
 mov edx,[esi+lpdm]
 push edi
 push ecx
 push edx
 ret
aftdm: mov ebp,esp
 sub ebp,784
 xor ecx,ecx
 jmp whigmlop
quitgm: mov edi,[ebp+812]
 sub edi,1000
 mov edx,[edi+1008]
 mov [ebp+976],edx
 xor ecx,ecx
 add ecx,1192
 sub ecx,1000
 add esp,ecx
 pop eax
 pop ecx
 pop edx
 pop ebx
 pop esi
 pop edi
 pop ebp
 ret
; end of wmwindlnc
; end of winmain program
 db "xxxxxxx"
inconstr db "CONIN"
 db 00h,00h,00h
otconstr db "CONOUT"
 db 00h,00h
 db "xcrashxxxxxxxxxxx"
 dd 0,0,0,0,0,0
 dd 0,0,0,0,0,0,0,0
 dd 0,0,0,0,0,0,0,0
 dd 0,0,0,0,0,0,0,0
 dd 0,0,0,0,0,0,0,0
 dd 0,0,0,0,0,0,0,0
 dd 0,0,0,0,0,0,0,0
; xxxxxxxxxxxx DD00
 db "xxxxxxxxyyyyyyyyxxxxxxxxyyyyyyyy"
 db "xxxxxxxxyyyyyyyyxxxxxxxxyyyyyyyy"
 db "xxxxxxxxyyyyyyyyxxxxxxxxyyyyyyyy"
 db "xxxxxxxxyyyyyyyyxxxxxxxxyyyyyyyy"
 db "xxxxxxxxyyyyyyyyxxxxxxxxyyyyyyyy"
 db "xxxxxxxxyyyyyyyyxxxxxxxxyyyyyyyy"
 db "xxxxxxxxyyyyyyyyxxxxxxxxyyyyyyyy"
 db "xxxxxxxxyyyyyyyyxxxxxxxxyyyyyyyy"
; xxxxxxxxxxxx DE00
 db "xxxxxxxxyyyyyyyyxxxxxxxxyyyyyyyy"
 db "xxxxxxxxyyyyyyyyxxxxxxxxyyyyyyyy"
 db "xxxxxxxxyyyyyyyyxxxxxxxxyyyyyyyy"
 db "xxxxxxxxyyyyyyyyxxxxxxxxyyyyyyyy"
 db "xxxxxxxxyyyyyyyyxxxxxxxxyyyyyyyy"
 db "xxxxxxxxyyyyyyyyxxxxxxxxyyyyyyyy"
 db "xxxxxxxxyyyyyyyyxxxxxxxxyyyyyyyy"
 db "xxxxxxxxyyyyyyyyxxxxxxxxyyyyyyyy"
; xxxxxxxxxxxx DF00
 db "xxxxxxxxyyyyyyyyxxxxxxxxyyyyyyyy"
 db "xxxxxxxxyyyyyyyyxxxxxxxxyyyyyyyy"
 db "xxxxxxxxyyyyyyyyxxxxxxxxyyyyyyyy"
 db "xxxxxxxxyyyyyyyyxxxxxxxxyyyyyyyy"
 db "xxxxxxxxyyyyyyyyxxxxxxxxyyyyyyyy"
 db "xxxxxxxxyyyyyyyyxxxxxxxxyyyyyyyy"
 db "xxxxxxxxyyyyyyyyxxxxxxxxyyyyyyyy"
 dd 0,0,0,0,0,0,0,0
; xxxxxxxxxxxx E000
; E000 list of lists and dllname
; break here xxxxxxxxxxxx
; Insert uninitialized data region here
; in destination memory only.
; break here xxxxxxxxxxxx
wioatE000 dd 0080E060h
    dd 00000000h
    dd 00000000h
    dd 0080E220h
    dd 0080E070h
; xxxxxxxxxxxx E014
relatE000 dd 0080E080h
          dd 00000000h
lpwforward dd 00000000h
lpwiodllname dd 0080E340h
lpwioreloc dd 0080E0C0h
; xxxxxxxxxxxx E028
 dd 0080E100h
 dd 00000000h
 dd 00000000h
 dd 0080E540h
 dd 0080E180h
; xxxxxxxxxxxx E03C
 dd 00000000h
 dd 00000000h
 dd 00000000h
 dd 00000000h
 dd 00000000h
 dd 00000000h
 dd 00000000h
 dd 00000000h
 dd 00000000h
; xxxxxxxxxxxx E060
wioatE060 dd 0080E200h
 dd 00000000h
 dd 00000000h
 dd 00000000h
lptextout dd 0080E200h
 dd 00000000h
 dd 00000000h
 dd 00000000h
; xxxxxxxxxxxx E080
liocls06 dd 0080E230h
liocrn85 dd 0080E240h
        dd 0080E250h
        dd 0080E270h
liored03 dd 0080E2C0h
liosfp19 dd 0080E2E0h
liowrt04 dd 0080E320h
; xxxxxxxxxxxx
    dd 00000000h
    dd 00000000h
    dd 00000000h
    dd 00000000h
    dd 00000000h
    dd 00000000h
    dd 0,0,0
; second relocatable list at 80E0C0
wiocls06 dd 0080E230h
wiocrn85 dd 0080E240h
wiogetar dd 0080A250h
asminitw dd 0080E270h
wiored03 dd 0080E2C0h
wiosfp19 dd 0080E2E0h
wiowrt04 dd 0080E320h
; xxxxxxxxxxxx
    dd 00000000h
    dd 00000000h
    dd 00000000h
    dd 00000000h
    dd 00000000h
    dd 00000000h
    dd 0,0,0
; 80E100
    dd 0080E360h
    dd 0080E380h
    dd 0080E3A0h
    dd 0080E3C0h
    dd 0080E3E0h
    dd 0080E400h
    dd 0080E420h
    dd 0080E440h
    dd 0080E460h
    dd 0080E480h
    dd 0080E4A0h
    dd 0080E4C0h
    dd 0080E4E0h
    dd 0080E500h
    dd 0080E520h
    dd 00000000h
    dd 00000000h
    dd 00000000h
    dd 00000000h
    dd 00000000h
    dd 00000000h
    dd 00000000h
    dd 00000000h
    dd 00000000h
    dd 00000000h
    dd 00000000h
    dd 00000000h
    dd 00000000h
    dd 00000000h
    dd 00000000h
    dd 00000000h
    dd 00000000h
; 80E180
lpbeginpaint  dd 0080E360h
lpcwindow     dd 0080E380h
lpdefwproc    dd 0080E3A0h
lpdm          dd 0080E3C0h
lpendpaint    dd 0080E3E0h
lpgm          dd 0080E400h
lpgwrect      dd 0080E420h
lploadcursor  dd 0080E440h
lploadicon    dd 0080E460h
lppqmessage   dd 0080E480h
lprdwindow    dd 0080E4A0h
lprclass      dd 0080E4C0h
lpswindow     dd 0080E4E0h
lptm          dd 0080E500h
lpuwindow     dd 0080E520h
    dd 00000000h
    dd 00000000h
    dd 00000000h
    dd 00000000h
    dd 00000000h
    dd 00000000h
    dd 00000000h
    dd 00000000h
    dd 00000000h
    dd 00000000h
    dd 00000000h
    dd 00000000h
    dd 00000000h
    dd 00000000h
    dd 00000000h
    dd 00000000h
    dd 00000000h
; 80E200
    db 028h, 00h
    db "SetDIBitsToDevice"
    db 00h
    dd 0,0,0
; 80E220
    db "gdi32.dll"
    db 00h,00h,00h
    dd 00000000h
; 80E230
; relocating names to below this line
wioatE230 db 27h,00h
          db "CloseHandle"
          db 00h,01h,00h
wioatE240 db 42h,00h
          db "CreateFileA"
          db 00h,00h,00h
insarg250 db 0edh,00h
          db "GetCommandLineA"
          db 00h,00h,00h
          dd 0,0,0
initE270  db 070h,01h
          db "GetModuleHandleA"
          db 00h,00h
          dd 0,0,0
wioatE290RR db 00h,00h
          db "xxxxxxxxxxxx"
          db 00h,00h
wioatE2a0 db 00h,00h
          db "xxxxxxxxxxxx"
          db 00h,04h
          dd 0
 db "xxxxxxxxxxxx"
wioatE2c0 db 05Ch,02h
          db "ReadFile"
          db 00h,05h,00h,00h,00h,00h
          dd 0
 db "xxxxxxxxxxxx"
wioatE2e0 db 0A8h,02h
          db "SetFilePointer"
          db 00h,06h,00h,00h
          db "xxxxxxxxxxxx"
wioatE300 db 00h,00h,00h
          db "xxxxxxxxxxxx"
          db 00h,07h,00h,00h,00h
 db "xxxxxxxxxxxx"
wioatE320 db 01Dh,03h
          db "WriteFile"
          db 00h,08h,00h,00h,00h
 db "xxxxxxxxxxxx"
; A1c0
   dd 0
wioatE340 db "kernel32.dll"
    db 00h,00h,00h,00h
    dd 0,0,0,0
; 80E360
    db 01h,00h
    db "BeginPaint"
    dd 00000000h
    dd 0,0,0,0
    db 02h,00h
    db "CreateWindowExA"
    db 00h,00h,00h
    dd 0,0,0
    db 084h,00h
    db "DefWindowProcA"
    dd 0,0,0,0
    db 092h,00h
    db "DispatchMessageA"
    db 00h,00h
    dd 0,0,0
    db 093h,00h
    db "EndPaint"
    db 00h,00h
    dd 0,0,0,0,0
    db 022h,01h
    db "GetMessageA"
    db 00h,00h,00h
    dd 0,0,0,0
    db 023h,01h
    db "GetWindowRect"
    db 00h
    dd 0,0,0,0
    db 024h,01h
    db "LoadCursorA"
    db 00h,00h,00h
    dd 0,0,0,0
    db 094h,01h
    db "LoadIconA"
    db 00h
    dd 0,0,0,0,0
    db 0d0h,01h
    db "PostQuitMessage"
    db 00h,00h,00h
    dd 0,0,0
    db 0d1h,01h
    db "RedrawWindow"
    db 00h,00h
    dd 0,0,0,0
    db 0d2h,01h
    db "RegisterClassA"
    dd 0,0,0,0
    db 045h,02h
    db "ShowWindow"
    dd 0,0,0,0,0
    db 05dh,02h
    db "TranslateMessage"
    db 00h,00h
    dd 0,0,0
    db 069h,02h
    db "UpdateWindow"
    db 00h,00h
    dd 0,0,0,0
; 080E540
  db "user32.dll"
  db 00h,00h
  dd 0,0,0,0,0
; 80E560
 db "----xxxx----xxxx----xxxx----xxxx"
 db "----xxxx----xxxx----xxxx----xxxx"
 db "----xxxx----xxxx----xxxx----xxxx"
 db "----xxxx----xxxx----xxxx----xxxx"
 db "----xxxx----xxxx----xxxx----xxxx"
; xxxxxxxxxxxx 0600
 dd 0,0,0,0,0,0,0,0
 db "xxxxxxxxyyyyyyyyxxxxxxxxyyyyyyyy"
 db "xxxxxxxxyyyyyyyyxxxxxxxxyyyyyyyy"
 db "xxxxxxxxyyyyyyyyxxxxxxxxyyyyyyyy"
 db "xxxxxxxxyyyyyyyyxxxxxxxxyyyyyyyy"
 db "xxxxxxxxyyyyyyyyxxxxxxxxyyyyyyyy"
 db "xxxxxxxxyyyyyyyyxxxxxxxxyyyyyyyy"
 db "xxxxxxxxyyyyyyyyxxxxxxxxyyyyyyyy"
 db "xxxxxxxxyyyyyyyyxxxxxxxxyyyyyyyy"
 db "xxxxxxxxyyyyyyyyxxxxxxxxyyyyyyyy"
 db "xxxxxxxxyyyyyyyyxxxxxxxxyyyyyyyy"
 db "xxxxxxxxyyyyyyyyxxxxxxxxyyyyyyyy"
 db "xxxxxxxxyyyyyyyyxxxxxxxxyyyyyyyy"
 db "xxxxxxxxyyyyyyyyxxxxxxxxyyyyyyyy"
 db "xxxxxxxxyyyyyyyyxxxxxxxxyyyyyyyy"
 db "xxxxxxxxyyyyyyyyxxxxxxxxyyyyyyyy"
; xxxxxxxxxxxx 0800
 db "xxxxxxxxyyyyyyyyxxxxxxxxyyyyyyyy"
 db "xxxxxxxxyyyyyyyyxxxxxxxxyyyyyyyy"
 db "xxxxxxxxyyyyyyyyxxxxxxxxyyyyyyyy"
 db "xxxxxxxxyyyyyyyyxxxxxxxxyyyyyyyy"
 db "xxxxxxxxyyyyyyyyxxxxxxxxyyyyyyyy"
 db "xxxxxxxxyyyyyyyyxxxxxxxxyyyyyyyy"
 db "xxxxxxxxyyyyyyyyxxxxxxxxyyyyyyyy"
 db "xxxxxxxxyyyyyyyyxxxxxxxxyyyyyyyy"
 db "xxxxxxxxyyyyyyyyxxxxxxxxyyyyyyyy"
 db "xxxxxxxxyyyyyyyyxxxxxxxxyyyyyyyy"
 db "xxxxxxxxyyyyyyyyxxxxxxxxyyyyyyyy"
 db "xxxxxxxxyyyyyyyyxxxxxxxxyyyyyyyy"
 db "xxxxxxxxyyyyyyyyxxxxxxxxyyyyyyyy"
 db "xxxxxxxxyyyyyyyyxxxxxxxxyyyyyyyy"
 db "xxxxxxxxyyyyyyyyxxxxxxxxyyyyyyyy"
 db "xxxxxxxxyyyyyyyyxxxxxxxxyyyyyyyy"
; xxxxxxxxxxxx 0a00
 db "xxxxxxxxyyyyyyyyxxxxxxxxyyyyyyyy"
 db "xxxxxxxxyyyyyyyyxxxxxxxxyyyyyyyy"
 db "xxxxxxxxyyyyyyyyxxxxxxxxyyyyyyyy"
 db "xxxxxxxxyyyyyyyyxxxxxxxxyyyyyyyy"
 db "xxxxxxxxyyyyyyyyxxxxxxxxyyyyyyyy"
 db "xxxxxxxxyyyyyyyyxxxxxxxxyyyyyyyy"
 db "xxxxxxxxyyyyyyyyxxxxxxxxyyyyyyyy"
 db "xxxxxxxxyyyyyyyyxxxxxxxxyyyyyyyy"
 db "xxxxxxxxyyyyyyyyxxxxxxxxyyyyyyyy"
 db "xxxxxxxxyyyyyyyyxxxxxxxxyyyyyyyy"
 db "xxxxxxxxyyyyyyyyxxxxxxxxyyyyyyyy"
 db "xxxxxxxxyyyyyyyyxxxxxxxxyyyyyyyy"
 db "xxxxxxxxyyyyyyyyxxxxxxxxyyyyyyyy"
 db "xxxxxxxxyyyyyyyyxxxxxxxxyyyyyyyy"
 db "xxxxxxxxyyyyyyyyxxxxxxxxyyyyyyyy"
 db "xxxxxxxxyyyyyyyyxxxxxxxxyyyyyyyy"
; xxxxxxxxxxxx 0c00
 db "xxxxxxxxyyyyyyyyxxxxxxxxyyyyyyyy"
 db "xxxxxxxxyyyyyyyyxxxxxxxxyyyyyyyy"
 db "xxxxxxxxyyyyyyyyxxxxxxxxyyyyyyyy"
 db "xxxxxxxxyyyyyyyyxxxxxxxxyyyyyyyy"
 db "xxxxxxxxyyyyyyyyxxxxxxxxyyyyyyyy"
 db "xxxxxxxxyyyyyyyyxxxxxxxxyyyyyyyy"
 db "xxxxxxxxyyyyyyyyxxxxxxxxyyyyyyyy"
 db "xxxxxxxxyyyyyyyyxxxxxxxxyyyyyyyy"
 db "xxxxxxxxyyyyyyyyxxxxxxxxyyyyyyyy"
 db "xxxxxxxxyyyyyyyyxxxxxxxxyyyyyyyy"
 db "xxxxxxxxyyyyyyyyxxxxxxxxyyyyyyyy"
 db "xxxxxxxxyyyyyyyyxxxxxxxxyyyyyyyy"
 db "xxxxxxxxyyyyyyyyxxxxxxxxyyyyyyyy"
 db "xxxxxxxxyyyyyyyyxxxxxxxxyyyyyyyy"
 db "xxxxxxxxyyyyyyyyxxxxxxxxyyyyyyyy"
 dd 0,0,0,0,0,0,0,0
; xxxxxxxxxxxx 7e00
 db "xxxxxxxxyyyyyyyyxxxxxxxxyyyyyyyy"
 db "xxxxxxxxyyyyyyyyxxxxxxxxyyyyyyyy"
 db "xxxxxxxxyyyyyyyyxxxxxxxxyyyyyyyy"
 db "xxxxxxxxyyyyyyyyxxxxxxxxyyyyyyyy"
 db "xxxxxxxxyyyyyyyyxxxxxxxxyyyyyyyy"
 db "xxxxxxxxyyyyyyyyxxxxxxxxyyyyyyyy"
 db "xxxxxxxxyyyyyyyyxxxxxxxxyyyyyyyy"
 db "xxxxxxxxyyyyyyyyxxxxxxxxyyyyyyyy"
 db "xxxxxxxxyyyyyyyyxxxxxxxxyyyyyyyy"
 db "xxxxxxxxyyyyyyyyxxxxxxxxyyyyyyyy"
 db "xxxxxxxxyyyyyyyyxxxxxxxxyyyyyyyy"
 db "xxxxxxxxyyyyyyyyxxxxxxxxyyyyyyyy"
 db "xxxxxxxxyyyyyyyyxxxxxxxxyyyyyyyy"
 db "xxxxxxxxyyyyyyyyxxxxxxxxyyyyyyyy"
 db "xxxxxxxxyyyyyyyyxxxxxxxxyyyyyyyy"
; short
 db "xxxxxxxx----------------xxxxxxy"
lastcode db "z"
; end of data section
; May 25 2017 at 10:16 A.M.
; bottom of file edmacj02.852
